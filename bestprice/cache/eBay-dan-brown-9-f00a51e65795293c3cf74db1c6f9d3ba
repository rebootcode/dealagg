<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"><html><head><script>var noStandardCSS = true;</script><style type="text/css">.pg-w {text-align:center; font:bold 1.231em Trebuchet MS}
.pg-cw {white-space:nowrap}
.pg-num {color:#8f8f8f}
.pg-num a, .pg-num a:link, .pg-num a:active, .pg-num a:visited, .pg-num b {color:#8f8f8f; padding:0px 5px}
.pg-cw a:hover {color:#003dad; text-decoration:none}
.pg-num b {color:#000}
.pg-cw i, .pg-cw u {background:url(http://q.ebaystatic.com/aw/pics/cmp/ds2/ui/sprPaginationTableArrows.png) no-repeat 0 -22px; padding-right:10px; text-decoration:none}
.pg-cw a:hover i {background-position:0 -47px}
i.pg-lad {background-position:0 3px}
.pg-cw u {background-position:100% -97px}
.pg-cw a:hover u {background-position:100% -122px}
u.pg-rad {background-position:100% -72px}
.pg-gp {text-align:right; display:block}
.pg-gp label, .pg-gp span {white-space:nowrap; display:inline-block; font:normal small Arial; color:#666; padding-right:5px; vertical-align:middle}
.pg-gp input {vertical-align:middle}
.pg-cnt {color:#666; padding:0px 0px 0px 10px; line-height:18px}
.pg-gy {background:#e8e8e8; border-top:1px solid #ccc; text-align:right; margin:0px 0px 10px 0px; padding:2px 3px 4px 0}
.pg-lp {padding-left:20px}
.pg-rp {padding-right:20px}
.pg-num, .pg-lp, .pg-rp {display:inline-block}
.pg-cpp {padding-right:5px}
.pg-mr {margin-right:5px; width:30px}
.pg-hdn {left:-1000px; position:absolute; top:-1000px}
body {font:normal small Arial, Helvetica, sans-serif}
.sec-fnt {font:normal small Trebuchet, "Trebuchet MS"}
a:link, a:active, a:visited, a:hover {color:#003dad; text-decoration:none}
a:visited {color:#70298e}
a:hover {text-decoration:underline}
.g-hdn {left:-9999px; position:absolute}
.btn-w, .btn-b, .btn-b input, .btn-b b, .btn-b a {display:inline-block; font:bold small Trebuchet, "Trebuchet MS"; background:url(http://q.ebaystatic.com/aw/pics/cmp/ds2/ui/sprBtnCore.png) no-repeat -450px 0; outline:none}
.btn-pad {padding:0 8px}
.btn-b {vertical-align:middle; z-index:2; padding:0 3px 0 0}
.btn-b input, .btn-b b, .btn-b a {border:0; color:#fff; font:bold 1.154em Trebuchet, "Trebuchet MS"; cursor:pointer; white-space:nowrap; margin:0 -2px; padding:1px 15px 3px}
.btn-b b, .btn-b a {padding:6px 15px 7px !important}
.btn-w i {background:#3c58c5 none repeat scroll 0 0; border:2px outset; color:#3c58c5; position:absolute; white-space:nowrap; margin:1px 0 1px 4px; padding:3px 7px; font-size:1.154em}
.btn-m {margin:8px}
.btn-w, .btn-b, .btn-b b, .btn-b a {position:relative !important}
.btn-b a, .btn-b a:hover, .btn-b a:visited, .btn-b a:active {text-decoration:none; color:#fff !important}
.btn-h, .btn-b b {display:none}
.psb-S, .psb-S input {height:24px}
.psb-S b, .psb-S a {padding:3px 15px !important}
.psb-b {background-position:100% -378px}
.psb-S input, .psb-S a {background-position:0 -344px; font-size:1em}
.psb-bo {background-position:100% -446px}
.psb-bo input, .psb-bo a {background-position:0 -412px}
.psb-bp {background-position:100% -514px}
.psb-bp input, .psb-bp a {background-position:0 -480px; padding:3px 14px 2px 16px}
.psb-bp a {padding:4px 14px 2px 16px}
.psb-bd {background-position:100% -582px; cursor:default}
.psb-bd input, .psb-bd b, .psb-bd a {background-position:0 -548px; cursor:default; color:#f5f5f5; font-size:1em}
.psb-S i {padding:0px 7px; font-size:1em}
</style><!--[if lt IE 8]><style>.btn-b input {position:relative; left:-3px; padding:0 16px 0 15px; width:1%}
.btn-b b, .btn-b a {left:-3px}
.btn-b input, .btn-b b, .btn-b a {margin:0}
</style><![endif]--><!--[if IE 6]><style>.btn-b input {overflow:visible; width:0}
</style><![endif]--><!--[if IE 8]><style>.pb-bp input {background-position:1px -171px}
.psb-bp input {background-position:1px -479px}
.ssb-bp input {background-position:1px -1095px}
</style><![endif]--></head><body style="margin:0;padding:0;" id="v4-1"><script type="text/javascript">// @Package com.ebay.vjo
/**
* VJO Bootstrap JST api must be updated in the class
	*com.ebay.vjo.lib.VjoAsJst in order for VJET IDE to use new api otherwise api is hidden in tool.
*/
// Utility API provided by vjo


(function () {
	var VERSION = 1.5,_bOldSupport = typeof (vjo)=="object";
	if(_bOldSupport && vjo._v == VERSION){ //if this vjo version already exists exit out
		return;
	}
	
	
	var vjo = {}; //create a local vjo object
	
	// ensure latest vjo version is on global scope
	var win = (typeof window != 'undefined') ? window : this, wv = win.vjo;
	if (!wv || !wv._v || wv._v < VERSION) {
		win.vjo = vjo;
	}
	
	var _typeMap = {}; //map that holds registered types, where the key is the type name
	var _global = this; //reference to the window object, or scoped 'this'
	var _clzCache = [];
	var _enableLazyInit = true;
	/**
	 *	VJO api's and properties
	 */
	_extend (vjo, {
		//version
		_v : 1.5,
		/**
		 * loader which can optionally be set, to dynamiclly load new types.
		 * usage would be, vjo.loader.load('type.name').
		 */
		loader : {
			async : true,
			load:function(){
				//implement
			} 
		},
		
		/**
		 * answers the qustion is given object of type array
		 */
		isArray : function (obj) {
			if (!obj) return false;
			return (obj.constructor == Array || (typeof obj == 'object' && obj.join && obj.splice));
		},
		/**
		 * Returns vjo type of given class name. If the type has not been loaded
		 * try to load it, using vjo.loader
		 */
		getType : function(clz,doNotLoad) {
			if (!clz) return;
			clz = _getTypeName(clz);//remove generic symbols such as "<E>"

			//We should handle case such as "a.b.c.X$Y" also
			var dollar = clz.lastIndexOf('$') + 1, dot = clz.lastIndexOf('.') + 1,
			   idx = dollar || dot , cn = idx ? clz.substring(idx) : clz,
			   clz = dollar ? (clz.substring(0, dollar - 1) + '.' + cn) : clz,
			   obj = _typeMap[clz];

			if (!doNotLoad && !obj) {
				vjo.loader.load(clz);
				obj = _typeMap[clz];
			}
			if (obj) {
				return obj.pkg[cn];
			}
			return;
		},
		
		/**
		 * mixin utility. takes an mtype, and a target. will throw an error if the mtype
		 * has static properties.
		 * Ex:
		 *		var obj = new my.package.Type();
		 *		vjo.mixin('my.package.MType', obj);
		 *		obj.doMixinMeth();
		 */
		mixin : function (mtype,target) {
			var mxn = this.getType(mtype);
			if (mxn) {
				if (mxn.vj$ && mxn.vj$._vjType === 'mtype') {
					if (mxn._props) {
						throw 'cannot mixin static props to an instance';
					}
					_extend(target,mxn._protos);
				}
			}
		},
		/**
		 * utility that creates a function reference to the method, given a ctx.
		 * openctx is a boolean, if true, it means that someone using call(...)
		 * or apply(...) who provided an alternative context to execute the
		 * function would get used otherwise if openctx was false, you can
		 * think of this functions context as being "sealed" ie not changeable
		 * in a call(...) or apply(...) usage case.  Regardless of being sealed
		 * passing a hitched function to bind will do the binding no matter what.
		 */
		hitch: function (ctx, fn, openctx) { 
//				hitch: function (fn, ctx, openctx) { 
			if (!_isFn(fn)) { // swap
				var temp = fn ; 
				fn = ctx ;
				ctx = temp ;
		    }
			return function () {
				return fn.apply((openctx&&this!=window)?this:ctx,arguments);
			}
		},

		/**
		 * utility that creates a function closure to combine a method and a given set of arguments.
		 */
		curry : function (fn) {
			var slice = Array.prototype.slice;
			//all arguments after "fn"" will be pre appended to
			//the actual function call argument list
			var args = slice.call(arguments,1); //create real array
			return function () {
				return fn.apply(this, args.concat(slice.apply(arguments)));
			};
		},
		/*
		First 2 arguments are the same processing as that of hitch which is 
		basically to set the context for the functions execution.  The remaining
		arguments (if any) are used in the curry(...)'ing of the args.  We only
		need a single closure to achive the bind/curry operations.
		*/
		bind: function(ctx, fn) {
			if (typeof fn == 'string') {
				fn = ctx[fn];
			}
			var slice = Array.prototype.slice;
			//all arguments after "ctx" and "fn" will be pre appended to
			//the actual function call argument list
			var args = slice.call(arguments,2); // create real array
			return function () {
				return fn.apply(ctx, args.concat(slice.apply(arguments)));
			};
		},
		/**
		 * utility to create a dom element given a tagname, and it's innerHTML
		 */
		create: function(elementName, value) {
			var elem = document.createElement(elementName) ;
			elem.tagName == 'TEXTAREA' ? elem.value = value : elem.innerHTML = value;
			return elem ;
		},
		/**
		 * utility to create an anonymous class. 'context' to be passed, is the scope of the anonymous class. within
		 * the anonymous class, you can reference the containing scope using "this.vj$.parent". the "clz" is the type
		 * to be implemented.
		 * Example:
		 *			var myType = vjo.make(this,'my.package.Type')
		 *			.protos({
		 *				foo:function(){//override
		 *					//do something;
		 *				}
		 *			})
		 *			.endType();
		 */
		make : function (context,clz) {//used to create an anonymous class
			var a = arguments, len = a.length, tp = (_isFn(clz) && clz.vj$) ? clz : this.getType(clz), _vjo = {};
			if (len<2 || !tp) throw "context and valid type are required";
			
			//copy all types from the current vj$ context
			//later we'll use to copy to the instance's vj$.
			_forEach(context.vj$,function(val,key){
				if (_isFn(val) && val.vj$ && val.vj$._vjType) {
					this[key] = val;
				}
			},_vjo);
			
			var _protos;
			var args = Array.prototype.slice.call(a,2,len);
			return {
				protos : function (obj) {
					_protos = obj;
					return this;
				}, 
				endType : function () {
					var t = vjo.ctype(), clztype = tp.vj$._vjType, rv;
					if (clztype==='itype') t.satisfies(tp);
					else if (clztype==='ctype' || clztype==='atype') { 
						var typeMeta = _TypeMeta.get(tp);
						if (typeMeta && !typeMeta._completed) {//make sure type is complete
							typeMeta.complete();
						}
						t.inherits(vjo.getType(tp.vj$._class));
					}
					else throw 'incompatible anonomyous type';
					t.protos(_protos);
					t.complete();
					t = t.endType();
					rv = _Type.createNoConstruct(t); //create a type without constructing it
					rv.vj$ = t.vj$;
					_extend(rv.vj$,_vjo); //let's copy namespace from the base type or interface
					(function () {//call super constructor no matter what;
						if (this.base) this.base.apply(this,arguments);
					}).apply(rv,args);
					if (rv.base && rv._getBase) {//update base, so we're not pointing at shared prototype base
						var fn = _Type.tmpFunc;
						fn.prototype = rv._getBase();
						rv.base = new fn; 
						rv.base._parent = rv;
					}
					rv.vj$.parent = tp._outer || context; //parent points to the enclosing context
					rv.vj$.outer = tp._outer;
					if (_protos && _protos.constructs) {
						_protos.constructs.apply(rv);
					}
					return rv;
				}
			};
		},
		/**
		 * 
		 */
		needs : function (clz,alias) {
		    if (!clz) return;
		    if (!_typeMap[clz]) {
		    	_createPkg(clz);
		    	vjo.loader.load(clz);
		    }
		},
		/* currently, not being used. this was to enable portal versioning.
		getVersion : function() {
			return _global._scope_name || "";
		},
		versionJsText : function(txt) {
			var scp = this.getVersion();
			if (scp) {
				var str = '(function(vjo){' + txt;
				str += '}).apply(' + scp + ',[' + scp + '.vjo]);';
				return str;
			}
			return txt;
		},
		*/
		/**
		 * Returns an array object with values filled in based on dimentions.
		 *
		 * @version		initial
		 *
		 * @param		val - Default value that needs to be used for initializing(0, false, or null)
		 * @param		size - Dimention, you can also pass multi-dimentions.
		 * @return		Array
		 * 
		 * All the params are optional. Not passing any info or only passing 'val' would return emty array with no elements
		 * Example:		var arr3 = vjo.createArray(null, 3, 2, 3);
		 *
		 */
		createArray : function(val, size){
		        var arr = [];
		        if (arguments.length > 1) {
		    		for (var ii=0; ii<size; ii++) {
		    			if (arguments.length > 2) {
		    				var tmp = [val];
		    				for (var k=2;k<arguments.length;k++) {
		    					tmp[tmp.length] = arguments[k];
		    				}
		    				arr[ii] = vjo.createArray.apply(this, tmp);
		    			} else {
		    				arr[ii] = val;
		    			}
		    		}
		        }
		        return arr;
		},
		/**
		 * This is utility method to test instanceof
		 *
		 * @version		initial
		 *
		 * @param		poObject - object
		 * @param		poType - type
		 * @return		boolean
		 * 
		 * Example:		var val = vjo.isInstanceOf(object1,type1)
		 *
		 */
		isInstanceOf : function(poObject, poType){
			//if poType is not vjo interface, use instanceof
			if(poObject === null) return false;	
			var isVjo = _isVjoType(poType);
			if(!isVjo || (isVjo && poType.vj$._vjType!="itype")){
				return poObject instanceof poType;
			}
			if(!poObject.vj$) return false;
			var clz = poObject.getClass();
		    if (_isInstanceForInterface(clz,poType)) return true;
		    var id = clz.getName(), meta, tp;
		    for (;;) {
		        meta = _TypeMeta.getById(id);
		        if (meta) {
		            var ihs = meta._inherits;
		            if (ihs.length==1) {
		                id = ihs[0];
		                tp=vjo.getType(id);
		                if (!tp) break;
		                if (_isInstanceForInterface(tp.clazz,poType)) return true;
		            } else break;
		        } else break;
		    }
		    return false;
		},
		
		/**
		 * Stores all the meta data handlers
		 */
		meta : {
			_list : {},
			load : function (pName, pFunc) {
				//Use prefix just to make sure we don't step on original type
				this._list[pName + '__rtti'] = pFunc;
			},
			get : function (pName) {
				return this._list[pName + '__rtti'];
			},
			has : function (pName) {
				return (this._list[pName + '__rtti'] ? true : false);
			}
		}
	});

	//CONSTANTS

	vjo.NEEDS_IMPL = function() {
		throw "needs implementation";
	};
	/*
	 * For globals where there is no initilizilation
	 * we need a way to say this is for definition only
	 * the global is defined else where in legacy global code
	 */
	vjo.METHODDEF = { NAME: "METHODDEF"};
	vjo.PROPDEF = { NAME: "PROPDEF"};
	

	//===========
	// OBJECT
	//===========
	vjo.Object = function () {
		this.vj$ = {_class:'vjo.Object',_vjType:'ctype',Object:vjo.Object, _meta : {}};
	};
	vjo.Object.prototype = {
		_hashCode : -1,
		getClass : _getClazz,
		/**
		 * Answers an integer hash code for the receiver. Any two
		 * objects which answer <code>true</code> when passed to
		 * <code>.equals</code> must answer the same value for this
		 * method.
		 *
		 * @author		OTI
		 * @version		initial
		 *
		 * @return		int
		 *					the receiver's hash.
		 *
		 * @see			#equals
		 */
		hashCode : function () {
			if (this._hashCode == -1) {
				this._hashCode = ++vjo.Object._hashCounter;
			} 
			return this._hashCode;
		},
			
		/**
		 * Compares the argument to the receiver, and answers true
		 * if they represent the <em>same</em> object using a class
		 * specific comparison. The implementation in Object answers
		 * true only if the argument is the exact same object as the
		 * receiver (==).
		 *
		 * @param		o Object
		 *					the object to compare with this object.
		 * @return		boolean
		 *					<code>true</code>
		 *						if the object is the same as this object
		 *					<code>false</code>
		 *						if it is different from this object.
		 * @see			#hashCode
		 */
		equals : function (o) {
			return (this === o);
		},
		
		/**
		 * Answers a string containing a concise, human-readable
		 * description of the receiver.
		 *
		 * @return		String
		 *					a printable representation for the receiver.
		 */
		toString : function () {
			return this.getClass().getName() + "@" + this.hashCode().toString(16);
		}
	};
	_extend(vjo.Object,{
		vj$ : {_class:'vjo.Object',_vjType:'ctype',Object:vjo.Object,_meta:{}},

		_hashCounter : 0
		,
		isInstance : function (o) {
			//TODO: mac ie 5? need to support? currently tier 3 browser
//			return (o instanceof this);
			return vjo.isInstanceOf(o,this); //rbhogi
		}
	});


	//===========
	// CLASS
	//===========
	/**
	* Represents a Class object definition
	*/
	vjo.Class = function (clz, typ){
		this._name = clz,
		this._type = typ || "ctype",
		this._satisfied = [];
		this.vj$ = {_class:'vjo.Class',_vjType:'ctype',Class:vjo.Class,_meta:{}};
	};	
	vjo.Class.prototype = new vjo.Object();
	_extend(vjo.Class.prototype, {
		/**
		 * Answers the name of the class which the receiver represents.
		 *
		 * @return		the receiver's full name including the package path.
		 *
		 */
		getName : function () {
			var n = this._name;
			return (n?n:null);
		},
		
		/**
		 * Return the simple name of this Class. The simple name does not include
		 * the package or the name of the enclosing class. The simple name of an
		 * anonymous class is "".
		 *
		 * @return the simple name
		 *
		 */
		getSimpleName : function () {
			// either a base class, or anonymous class
			// remove the package name
			var n = this.getName();
			var idx = n.lastIndexOf('.');
			if (idx != -1) {
				n = n.substring(idx+1);
				if (n) {
					idx = n.lastIndexOf("$");
					if (idx > 0) {
						n = n.substring(idx+1);
					}
				}
			}
			return n;
		},
	
		/**
		 * Answers the name of the package to which the receiver belongs.
		 * For example, Object.class.getPackageName() returns "vjo.dsf".
		 *
		 * @return		the receiver's package name.
		 *
		 */
		getPackageName : function () {
			var n = this.getName();
			if (n != null) {
				var i = n.lastIndexOf('.');
				if (i >= 0) {
					return n.substring(0, i);
				}
			}
			return "";
		},
		
		/**
		 * Answers true if the receiver represents an itype.
		 *
		 * @return		<code>true</code>
		 *					if the receiver represents an interface
		 *              <code>false</code>
		 *                  if it does not represent an interface
		 */
		isInterface : function () {
			return (this._type === "itype");
		},
		
		/**
		 * Returns true if the obj is an instance of this class.
		 */
		isInstance : function (obj) {
			var tp = vjo.getType(this.getName());
			if (tp) {
				return vjo.isInstanceOf(obj,tp); //rbhogi
			}
			return false;
		},
		
		/**
		 * Answers a string containing a concise, human-readable
		 * description of the receiver.
		 *
		 * @return		a printable representation for the receiver.
		 */
		toString : function () {
			return (this.isInterface() ? "interface " : "class ") + this.getName();
		},
		getClass : _getClazz,
		
		//Reflection related APIs
		_rtti : null,
		_metaloaded : false,
		
		getMeta : function () {
			if (this._rtti == null) {
				var err = "Metadata Not Available Exception";
				if (this._metaloaded) {
					throw err;
				} else {
					//load meta here
					var dataHdl = vjo.meta.get(this._name);
					if (dataHdl) {
						this._rtti = new vjo.TypeMetadata(dataHdl());
						this._metaloaded = true;
					} else {
						throw err;
					}
				}
			} 
			return this._rtti;
		},
		
		getConstructors : function () {
			return this.getMeta().getConstructors();
		},
		getFields : function () {
			return this.getMeta().getFields();
		},
		getDeclaredFields : function () {
			return this.getMeta().getDeclaredFields();
		},
		getMethods : function () {
			return this.getMeta().getMethods();
		},
		getDeclaredMethods : function () {
			return this.getMeta().getDeclaredMethods();
		},
		getModifiers : function () {
			return this.getMeta().getModifiers();
		},
		getAnnotations : function () {
			return this.getMeta().getAnnotations();
		},
		getInterfaces : function () {
			return this.getMeta().getInterfaces();
		},
        getVjoType : function () {
    		return vjo.getType(this.getName());
        }
	});
	
	_extend(vjo.Class,{
		/**
		 * Returns vjo.Class object of given class name. 
		 * It looks up in cache and returns, if found
		 * creates and and returns, if not found
		 */
		create : function (nm,typ) {
			if (!nm) {
				//Do not add clazz to cache if the key(class name) is undefined 
				return new vjo.Class(nm, typ?typ:'ctype');
			}
			var clz = _clzCache[nm];
			if (!clz) {
				_clzCache[nm] = clz = new vjo.Class(nm, typ?typ:'ctype');
			}
			return clz;
		}
	});

	_extend(vjo.Class,{
		/**
		 * Answers a Class object which represents the type
		 * named by the argument. The name should be the name
		 * of a type as described in the type definition.
		 *
		 * @param		clz	The name of the non-base type class to find
		 * @return		the named Class
		 * @throws		Error if a class is not found with the passed name
		 *
		 */
		forName : function (clz) {
			try {
				var o = eval(clz);
				if (o && o.clazz) {
					return o.clazz;
				}
			} catch (e) {
			}
			throw "Type not found for '" + clz + "'";
		},
		
		isInstance : function (o) {
			return vjo.isInstanceOf(o,vjo.Class); //rbhogi
		},

		//clazz : new vjo.Class("vjo.Class", "ctype")
		clazz : vjo.Class.create("vjo.Class")
	});
	
	//vjo.Object.clazz = new vjo.Class("vjo.Object", "ctype");
	vjo.Object.clazz = vjo.Class.create("vjo.Object");
	
	vjo.obj = function (type, json) {
		if (!type) {
			throw "Invalid type name";
		}
		if (!json) return null;
		
		var TypeObj, err = "Invalid type '" + type + "'.";
		try {
			TypeObj = eval(type);
		} catch (e) {
			throw err;
		}
		if (!TypeObj) return err;
		
		var o = new TypeObj();
		for (var i in json) {
			o[i] = json[i];
		}
		
		return o;
	};

	/**
	 * _TypeInitMgr manages type dependencies, and initializes types
	 * once all its dependencies are loaded.
	 */
	var _TypeInitMgr = (function(){
		var m_map = {}; //map of dependencies "typename" => ["depname"]
		var m_metas = {}; //map of types "typename" => typeMeta
		var m_needs = {}; //map of deferred needs "typename" => fn
		var m_stack = []; //current stack of synchronously loaded types
		var m_inners = {}; //map of inner types "typename" => [innerMeta]
		var m_loaded = {}; // map of loaded types "typename" => boolean
		var m_incomplate = []; // list of incomplete Types
		/**
		 * private methods
		 */
		function _addType(clz) {
			var depList = m_map[clz];
			if (!depList) {
				depList = [];
				m_map[clz] = depList;
			}
			return depList;
		}
		
		function _execInners(clz) {
			var ins = m_inners[clz];
			if (ins) {
				var len = ins.length;
				for (var i=0; i<len; i++) {
					var init = ins[i];
					if (init) init.complete();
				}
			}
			m_inners[clz] = null;
		}
		
		function _processNeeds(clz) {
			var n = m_needs[clz];
			if (n) {
				while (n.length>0) {
					n.pop()();
				}
				m_needs[clz] = null;
			}
		}
		
		function _pushDep(clz,stack,visited) {
			var arr = m_map[clz];
			stack.push(clz);
			visited[clz] = true;
			if (!arr || arr.length===0) return;
			var len = arr.length, i=0;
			for (; i<len; i++) {
				var key = arr[i];
				if (!visited[key]) {
					_pushDep(key,stack,visited);
				}
			}
			return;
		}
	
		function _isCompleted(clz) {
			return _TypeMeta._completed[clz];
		}

		function _canCompleteInternal(clz,start,visited) {
			if(_isCompleted(start)) return true;
			var arr = m_map[start];
			if (!arr || arr.length===0) return true;
			var len = arr.length, i=0;
			for (; i<len; i++) {
				var key = arr[i];
				if (!vjo.loader.async){
					//for synchronous loading, let's exit we find a circular dep
					if (key === clz) {
						return false;
					}
				} else if (!vjo.getType(key)) { //for async loading, let's exit we find an undefined type
				    _addIncomplete(clz, key);
				    return false;
				}
				if (!visited[key]) { //make sure we don't revisit types
					visited[key] = true;
					if (!_canCompleteInternal(clz,key,visited)){ //recursive
						return false;
					}
				}
			}
			return true;
		}
		
		/**
		    clz : Incomplete type
		    dep : Due to this type
		*/
		function _addIncomplete(clz, dep) {
		    if (!m_incomplate[dep]) {
		        m_incomplate[dep] = [];
		    }
		    m_incomplate[dep][m_incomplate[dep].length] = clz;
		}
		
		function _canComplete(clz) {
			var aD = m_map[clz];
			if (aD) {
				var len = aD.length;
				if (vjo.loader.async) {
					return _canCompleteInternal(clz,clz,{});
				} else {
					//in the synchronous case, check the stack first
					//for any circular dependencies
					var stk = m_stack, len2 = stk.length
					for (var i=0; i< len; i++) {
						var dep = aD[i];
						for (var j=0; j<len2; j++) {
							if (stk[j] === dep) return false;
						}
					}
					if (len2>0) {
						return _canCompleteInternal(clz,clz,{});
					}
				}
			} 
			return true;
		}
		
		function _complete(type) {
			_processNeeds(type);
			if (m_metas[type]) {
				m_metas[type].complete();
				m_metas[type] = null;
			}
			_execInners(type);
			m_loaded[type] = true;
		}
		
		/**
		 * public methods
		 */
		return {
			/**
			 * takes in a class, and a dependency. currently any .need on a type
			 * will add the dependency.
			 */
			addDep : function (clz,dep) {
				if (!clz) return;
				if (!_TypeMeta._completed[dep]) {
					var aD = _addType(clz);
					aD[aD.length] = dep;
				}
				if (!vjo.loader.async) { //synchronous loading to be added to stack
					var stk = m_stack;
					if (stk.length==0) stk.push(clz);
					if (stk[stk.length-1]===clz) stk.push(dep);
				}
			},
			/**
			 * takes in a class, and and removes the given dependency from the stack
			 * the stack is used for synchronous loading, so we can identify circular
			 * dependencies.
			 */
			popDep : function (clz,dep) {
				if (vjo.loader.async) return;
				var stk = m_stack;
				if (stk[stk.length-1]===dep) stk.pop();
			},
			/**
			 * associate an inner type, with a container type. Once the container type
			 * is completed, the _TypeInitMgr will complete the definition of all inner
			 * types.
			 */
			addInner : function (clz,fn) {
				if (!m_inners[clz]) m_inners[clz] = [];
				var ins = m_inners[clz];
				ins.push(fn);
			},
			/**
			 * callbacks are registered to a type so that needs can be added to the
			 * type's namespace, once it's safe to initialize.
			 */
			deferNeed : function (clz,fn) {
				var n = m_needs;
				if (!n[clz]) {
					n[clz] = [];
				}
				n[clz].push(fn);
			},

			processNeeds : function(clz){
				_processNeeds(clz);
			},
						
			/**
			 * register a type to the _TypeInitMgr
			 */
			register : function (clz,fn) {
				m_metas[clz] = fn;
			},
			/**
			 * type has completed its definition, check for any circular dependecies
			 * before initializing the type. otherwise wait notification that all 
			 * dependencies are loaded before initializing the type.
			 */
			load : function(clz) {
				if (!clz || m_loaded[clz]) return false;
				var deps = m_map[clz];
				if (!vjo.loader.async) {
					var stk = m_stack, len = stk.length;
					if (len > 0 && stk[len-1]===clz) stk.pop();
				}
				var isC = false;
				if (deps && _canComplete(clz)) {
					var stk = [];
					_pushDep(clz,stk,{});
					while(stk.length>0) {
						var type = stk.pop();
						if(_isCompleted(type)) continue;
						_complete(type);
					}
					isC = true;
				}
				if (!deps || deps.length==0) {//no dependencies
					_complete(clz)
				}

				//See if there are any types waiting for this type to complete
				//If so, trigger type complete chain.
				var list = m_incomplate[clz];
				if (!isC && list) {
				    for (var i=0,len=list.length; i<len; i++) {
				        var itm = list[i];
				        if (itm == null) continue;
				        if (_canComplete(itm)) {
				            _complete(itm);
				            list[i] = null;
				        }
				    }
				}
								
				return true;
			}
		};
	})();

		
	/**
	 * _Type holds utility methods to create type. These methods should be called in
	 * the context of the type.
	 */
	var _Type = {
		/**
		 * create a type, given a name, and if it's an interface or not.
		 */
		create : function(clz, isI) {
			isI = isI || false;
			if (!_isValidClz(clz)) {
				throw "Invalid type name '" + clz + "'";
			}
			
			var base = function() {
				var typeMeta = _TypeMeta.getById(base.vj$._meta._metaId), bConstruct = !base.__donotconstruct;
				if (_enableLazyInit && typeMeta._canDelayInit) {
					typeMeta._canDelayInit = false;
					typeMeta.endType();
				}
				if (_Type.shouldAutoConstruct(this,base,typeMeta)) {
					var b = _Type.createNoConstruct(base), rv = _Type.construct(b,arguments);
					return rv || b;
				}
				this.constructor = base;
				//last check to ensure type is completed, before we instantiate object
				if (typeMeta && !typeMeta._completed) {
					typeMeta.complete();
					//new instance creation didn't pick up update prototype, so let's
					//copy it to this instance. this will only affect the first instance
					//of this type
					_forEach(base.prototype,function(val,key,object){
							this[key] = val;
					},this);
				}
				//assign needed types from class
				this.vj$ = base.vj$;
				var t = this.vj$._vjType;
				if (bConstruct && (t == 'itype' || t == 'atype' || t == 'mtype')) {
				    throw t + " " + this.vj$._class + " cannot be instantiated";
				}
				//update inner instance types, on this instance
				_Type.processInners(this,base.vj$,base.clazz);
				if (bConstruct) {	
					var val = _Type.construct(this,arguments);
					if (val) return val;
				}
				// jce: placeholder to fix lint error
				return null;
			};
			base._name="base";
			base.vj$ = {_class:clz, _meta : {}};
			base.isInstance = this.isInstanceFunc;
			return base;
		},
		isInstanceFunc : function (o) {
			return vjo.isInstanceOf(o,this);
		},
		shouldAutoConstruct : function(ctx,type,meta) {
			return (!(ctx instanceof type) && !type.__donotconstruct && meta && meta._options.autoConstruct);
		},
		/**
		 * create an instance of a type without calling the real constructor
		 */
		createNoConstruct : function (type){
			type.__donotconstruct=true;
			var rv = new type();
			delete type.__donotconstruct;
			return rv;
		},
		/**
		 * add dependencies to a type (like a java import). currently this method
		 * should be called in the context of a type.
		 * i.e. _Type.needs.call(realType, dependencyName, alias);
		 */
		//> public final T needs(String type)
	    //> public final T needs(String type,String type)
	    //> public final T needs(Array ary)
		needs : function (clz,alias) {
			if (!clz || this.vj$._meta._isInner) 
				return this;
			var clzs = null, useAlias = false;
			var len = 1;
			if (typeof clz == 'string') {
				clzs = [clz];
				useAlias = (alias) ? true : false;
			} else if (clz instanceof Array){
				clzs = clz;
				len = clzs.length;
			} else {
				return this;
			}
			for (var i=0; i<len; i++) {
				var cl = clzs[i];
				var pObj = _typeMap[cl], idx = cl.lastIndexOf("."), 
				cn = (idx>-1) ? cl.substring(idx+1) : cl, tp = (pObj) ? pObj.pkg[cn] : null;
				_TypeInitMgr.addDep(this.vj$._class,cl);
				if (!tp) {
					tp = vjo.getType(cl);
				}	
				_TypeInitMgr.popDep(this.vj$._class,cl);
				_Type.addToNameSpace(this,tp,cl,cn,alias,useAlias);
			}
			return this;
		},
		
		//> public final T needslib(String type)
	    //> public final T needslib(Array ary)
		needslib : function(){},
		
		addToNameSpace : function(ctx,type,name,shortname,alias,useAlias) {
			//update vj$ namespace with dependencies in the needs	
			if (alias==="") return;
			if (type) {//TODO: check for duplicates? //rbhogi
				if (this._vjType == 'mtype') return;
				if (type.vj$ && type.vj$._vjType == 'mtype') return;
				var nm = (useAlias)?alias:shortname, err = false;
				if (ctx.vj$[nm] && ctx.vj$[nm]!==type) {
					if (_bOldSupport) err = true;
					else throw "Name collision with type '" + nm + "' in need list.";
				}
				if (!err) ctx.vj$[nm] = type;
			} else {
				_TypeInitMgr.deferNeed(ctx.vj$._class,
					vjo.curry(function(shortname,fullname,ctx){
						var tp = vjo.getType(fullname);
						if (!tp || tp.vj$._vjType == 'mtype') return;
						if (ctx.vj$[shortname] && ctx.vj$[shortname]!==tp) {
							throw "Name collision with " + nm + "in need list.";
						}		
						ctx.vj$[shortname] = tp;
						
				},(useAlias)?alias:shortname,name,ctx));
			}
		},
		/**
		 * add static properties/methods to type. this method should be called in the 
		 * context of a type. i.e. _Type.props.call(realType, properties);
		 */
	
		props : function (obj,fromMixin) {
			for (var key in obj) {
				if (!_isValidProp(key)) {
					continue;
				}
				var o = obj[key];
				this[key] = o;
				if (!o) {
					continue;
				}
				if (o.vj$) {
					if (o.vj$._meta._isInner && _Type.addInner(this,o,'s_inners',key)) {//debugger;
						if (this.vj$[key]) throw "'" + key + "' in type '" + this.vj$._class + "' conflicts with needed type name";
					    var _v = _createVjNS(this.vj$,key,o);
					    o.vj$ = _v;
					    if (!this.vj$._meta._isInner) {//debugger;
					    	var metaObj = _TypeMeta.get(o);
					    	if (metaObj && !metaObj._name) {
						    	_TypeInitMgr.addInner(this.vj$._class, metaObj);
						    	var rt = this.vj$._class;
						    	//all 2nd level inner types don't have a name. since we're at the
						    	//container type, we can now update the names of all nested inner
						    	//types
								_Type.updateInners(rt,rt+"."+key,o,true)
					    	}
					    }
					}
				}
				else if (_isFn(o) && !o._name) {
				    o._name = key;
				}
			}
			if (obj.toString != Object.prototype.toString) {
				//It has custom toString method!
				this.toString = obj.toString;
			}
			
			return this;
		},
		protosHandler : function (fn,type) {
			//if a base class calls a overridden method from the
			//derived class, we must update the vjo namespace
			return function(){
				var cbase = this.base, error = false, rv, 
				out = this.vj$.outer; //keep base instance
				_Type.setBase(this,type);
				try {
					rv = _Type.execRealFn(fn,arguments,this,type,out);
				} catch (e) {
					error = e;
				}
				this.base = cbase;
				
				if (error) {
					throw error;
				}
				return rv;
			};
		},
		
		/**
		 * add instance properties/methods to type. this method should be called in the 
		 * context of a type. i.e. _Type.protos.call(realType, properties);
		 */
		protos : function (obj,fromMixin) {
			if (!obj) return;
			
			for (var key in obj) {
				if (key==='base') {
					continue;
				}
				var val = obj[key];
				if (!val) {
					this.prototype[key] = val;
					continue;
				}
				var prev = this.prototype[key], isType = _isVjoType(val);
				if (prev && _Type.isValidProto(key,val,prev) && !isType) {
					this.prototype[key] = _Type.protosHandler(val, this);
				} else {
					if (isType && val.vj$._meta._isInner
						&& !this.vj$._meta._isInner) {//debugger;						
						var metaObj = _TypeMeta.getById(val.vj$._meta._metaId);
						if (metaObj && !metaObj._name) {
				    		_TypeInitMgr.addInner(this.vj$._class, metaObj);
				    		var rt = this.vj$._class;
				    		//all 2nd level inner types don't have a name. since we're at the
					    	//container type, we can now update the names of all nested inner
					    	//types
							_Type.updateInners(rt,rt+"."+key,val,false);
						}
					}
					this.prototype[key] = val;
				}
				if (isType) {
					if (val.vj$._meta._isInner && _Type.addInner(this,val,'_inners',key)) {
						if (this.vj$[key]) {
							throw "'" + key + "' in type '" + this.vj$._class + "' conflicts with needed type name";
						}
					}
				}
				else if (_isFn(val) && !val._name) {
					//debugger will not have name of method in call stack
					//.name is also readonly. we set _name, which we've updated
					//rhino to understand, and will reflect correctly in VJET
		    		val._name = key;
				}				
			}
			//For IE
			if (obj.toString != Object.prototype.toString) {
				//It has custom toString method!
				this.prototype.toString = obj.toString;
			}
			return this;
		},
		isValidProto : function(key,val,prev) {
			//_ovld is a keyword produced by java2js
			return (_isFn(prev) && key.indexOf("constructs")!=0 
		    && (key.indexOf("_ovld")===-1||key.indexOf("_ovld")!=(key.length-5)) 
	        && !_isVjoType(prev) && _isFn(val));
		},
		/**
		 * add interface to type (same as 'implements' in java). this method should be  
		 * called in the context of a type. i.e. _Type.satisfies.call(realType, interfaceName);
		 */
		satisfies : function (type,doNotAddMeta) {
			var clzs = [];
			if (type instanceof Array){
				clzs = type;
			} else {
				clzs = [type];
			}
			
			_forEach(clzs,function(val,key,obj){//debugger;
				//var len = this._satisfiers.length, cl = val, type;
				var cl = _getTypeName(val), type;
				if (_isVjoType(cl)) {
					type = cl;
					var clz = type.vj$._class || "", idx = clz.lastIndexOf("."), 
					cn = (idx>-1) ? clz.substring(idx+1) : clz;
					if (cn) this.vj$[cn] = type;
				} 
				
				var iface = (type) ? type : vjo.getType(cl);
				if (iface) {
				    //add interface meta
				    if (!doNotAddMeta) this.clazz._satisfied.push(iface);
					for (var i in iface) {	//copy static properties from interface
						var val = iface[i];
						if (_isValidProp(i) && !this[i]) {
							this[i] = val;
						}
					}
				}
			},this);
			
			return this;
		},
		/**
		 * add base class to type (same as 'extends' in java). this method should be  
		 * called in the context of a type. i.e. _Type.inherits.call(realType, baseTypeName);
		 */
		inherits : function (supClass, isB) { 
		    if (supClass === "vjo.Object" || supClass === vjo.Object) {
		    	if (isB ) {
		    		_Type.createInherits(this,vjo.Object);
		    	}
		    	return this;
		    }
		    supClass = _getTypeName(supClass);
		    if (!isB && !_isValidInh(supClass)) {
		    	throw "Cannot inherit from '" + supClass + "'";
		    }
			var type;
			if (_isVjoType(supClass)) {
				type = supClass;
				var clz = type.vj$._class || "", idx = clz.lastIndexOf("."), 
				cn = (idx>-1) ? clz.substring(idx+1) : clz;
				if (cn) this.vj$[cn] = type;
			} else {
				type = this.vj$[supClass] || vjo.getType(supClass);				
			}
			
			if (_isVjoType(type)) {
				var typeMeta = _TypeMeta.getById(type.vj$._meta._metaId);
				if (typeMeta && !typeMeta._completed) typeMeta.complete();
				_Type.createInherits(this,type);
			}
			return this;
		},
		setBase : function(ctx,type) {
			//currently, getBase returns a shared base object for all types.
			//_parent is set with the current scope, affected the shared getBase.
			//we've kept this this way for now, for performance reasons. and
			//haven't run into any problems yet since javascript is single threaded.
			//each instance similiarly update its _parent before potentially
			//calling a base method. if this ends up causing problems, we'll need
			//to create a new instance for base, and copy all getBase properties in.
			//this will be a performant, but potentially be needed if any issues are
			//found with the swapping approach.
			ctx.base = (type.prototype._getBase)? type.prototype._getBase() : null;
			if (ctx.base) ctx.base._parent = ctx; //keep toplevel scope
		},
		createInherits : function(derived,type) {
		    /**
		        type - Super class
		        derived - Current class
		    */
			var cls = this.createNoConstruct(type);
			cls.constructs = null; //do not want to pull in super constructor
			cls.constructor = derived;
			if (type === vjo.Object) {				
				cls.base = this.emptyFunc;
				derived.prototype = cls;
				cls._getBase = this.selfFunc;
				return;
			}
			var ptype = type.prototype; 			
			var baseRef = {};
			baseRef.vj$ = type.vj$;
			if (ptype._getBase && ptype._getBase()._constructs) baseRef._constructs = true;
			cls.base = function () { //super method
				var cbase = this.base, ptype = type.prototype, gb = ptype._getBase, c = ptype.constructs; 
				if (ptype.base) this.base = ptype.base;
				var cstr = (c) ? c.toString() : "", b = (cstr.indexOf("this.base(")===-1 && cstr.indexOf("this.constructs")===-1);
				if (gb && gb()._constructs && b) this.base(); 
				if (ptype.constructs) {
					var isIn = this.vj$._meta._isInner;
					try { _Type.execRealFn(ptype.constructs,arguments,this,type,isIn) } 
					catch (e) { throw e; }
				}
				this.base = cbase;
			}
			//reference to all base class methods.
			//should only be used internally
			cls._getBase = function() {
				return baseRef;
			};

			var vOP = vjo.Object.prototype;
			//add protos methods/
			for (var i in ptype) {
				if (i === 'toString') continue;
				var pt = ptype[i], bFn = _isFn(pt);
				if (i==='constructs' && bFn) {
					if (pt.length===0) {
						baseRef._constructs = true;
					}
				} else if (_isValidInst(i)) {
					if (bFn && !pt.vj$ && vOP[i]!==pt && !(pt instanceof RegExp)) {
						var ref = this.createBaseRef(type,pt,derived);
						baseRef[i] = ref;
						if (!pt.__isChained) {
							cls[i] = this.hasBaseCall(pt,i) ? ref : this.createChainedMethod(type,pt);
							//re-calling one of these chained methods will cause an 
							//infinite look, so we tag it so we're able to identify
							cls[i].__isChained = true;
						}
					} else {//TODO add inners
						if (_isVjoType(pt) && pt.vj$._meta._isInner) {
							var dmeta = derived.vj$._meta;
							if (!dmeta._inners) {
								dmeta._inners = {};
							}
							dmeta._inners[i] = pt;
						}
						cls[i] = pt;
					}
				}
			}
			if (baseRef.toString != vjo.Object.prototype.toString) {
				baseRef.toString = this.createBaseRef(type,ptype.toString,derived);
			}
			
			derived.prototype = cls; //update prototype chain
		},
		createChainedMethod : function (type,fn) { //create chained methods
			return function () {
				try {
					if(this.vj$._vjType==='etype') {
						return _Type.execRealFn(fn,arguments,this,type, true);
					} else {
						return _Type.execRealFn(fn,arguments,this,type);
					}
				} catch (e) {
					throw e;
				}
			};
		},
		emptyFunc : function() {},
		selfFunc : function() {return this},
		hasBaseCall : function(fn,key) {
			var fnStr = fn.toString();
			return (fnStr.indexOf('this.base.'+key+'(')!=-1);
		},
		//helper to create base method
		createBaseRef : function(type,fn,der) {
			return function () { //create base types
				var scp = (this._parent) ? this._parent : this, rv, error = false, cbase = scp.base; //keep base instance
				_Type.setBase(scp,type); //point to base class "base" before executing base method
				try { rv = _Type.execRealFn(fn,arguments,scp,type); }
				catch (e) { error = e; }
				scp.base = cbase; //restore base
				if (error) throw error;
				return rv;
				
			};
		},
		/**
		 * Utility to update class names for inner types
		 */
		updateInners : function(rootclz, clzname, inner, isStatic) {
			if (inner && inner.vj$) {
				var vj = inner.vj$, clz = inner.clazz;
				vj._class = clzname;
				var idx = clzname.lastIndexOf('.'), snm = clzname.substring(idx+1);
				vj[snm] = inner;
				if (clz && rootclz) {
					if (clzname.indexOf(rootclz) == 0) {
						var tmp = clzname.replace(rootclz, "");
						while (tmp.indexOf(".")>-1) {
							tmp = tmp.replace(".", "$");
						}
						clz._name = rootclz + tmp;
					} else {
						clz._name = rootclz + "$" + snm;
					}
				}
				_createPkg(clzname,true).pkg[snm] = inner;
				var ins = (isStatic) ? vj._meta.s_inners : vj._meta._inners
				if (ins) {
					_forEach(ins,function(val,key) {
						_forEach(vj,function(val,key){
							if (!this[key]&&val&&val.vj$) this[key] = val;
						},val.vj$);
						var m = _TypeMeta.getById(val.vj$._meta._metaId);
						if (val.vj$ && m) _TypeInitMgr.addInner(rootclz,m);
						//recursive call
						_Type.updateInners(rootclz,clzname+"."+key,val,isStatic);	
					});
				}
			}
		
		},
		/**
		 * Utility to store inner types on a type, for later processing
		 */
		addInner : function(clz,inner,store,key) {
			if (!clz || !inner || !key) return false;
			var vj = inner.vj$;
			if(!vj) return false;
			if (_isVjoType(inner) && vj._meta._isInner) {

			    var cvj = clz.vj$;
				if (!vj._class && cvj._class) {
			    	var cn = vj._class = cvj._class + "." + key;
			    	if (inner.clazz) {
						inner.clazz._name = cn;	//Update class info as well
						_clzCache[cn] = inner.clazz; //Update cache as well
			    	}
			    	_createPkg(cn,true).pkg[key] = inner;
			    }
			    if(store) {
			        if (!cvj._meta[store]) {
			        	cvj._meta[store] = {};
				    }
				    cvj._meta[store][key] = inner;
				}
				return true;
			}
			return false;
		},
		/**
		 * Gas
		 */
		execRealFn : function(fn,args,ctx,base,donotfix) {
			var error = false, rv, t = {vj$:ctx.vj$};
			if (!donotfix) {
				//take the first parameter's vj$ and assign it to the second's. After the real method
				//is called, swap it back. this became an issue in the case of instance inner types, 
				//because the static vj$ does not have instance specific properties, such as "parent"
				//for instance inner types. instance inner types will create their own vj$ on their
				//"base" which is why there's a check for it in the first parameter. this is a special
				//case for instance inners, in context swapping.
				_fixScope((ctx.base&&ctx.base.vj$&& base.vj$._class==ctx.base.vj$._class)?ctx.base:base,ctx)
			}
			try {
				rv = fn.apply(ctx,args);
			} catch (e) {
				//make sure we fix the scope back, before throwing an error
				//otherwise if the application catches the error, our context
				//will be wrong. we'll still be stuck with the old context's vj$
				error = e;
			}
			if (!donotfix) _fixScope(t,ctx);
			if (error) throw error;
			return rv;
		},
		createClazz : function(typ) {
			//Init class for the type
			var old = typ.clazz, nm = typ.vj$._class;
			if (old && old._name) {
				nm = old._name;
			}
//			debugger;
			typ.clazz = vjo.Class.create(nm, typ.vj$._vjType);
			if (old) {
				typ.clazz._satisfied = old._satisfied;
			}
			if (typ.prototype) typ.prototype.getClass = _getClazz;
			else typ.getClass = _getClazz;
			
			//add self-referencing type
			typ.vj$.type = typ;
		},
		canCallBase : function(obj) {
			var str = obj.constructs.toString();
			return obj.base && str.indexOf("this.base(")===-1 && str.indexOf("this.constructs")===-1;
		},
		tmpFunc : function() {},
		construct : function(ctx,args) {
			var c = ctx.constructs;			
			var fn, rv, dconstruct = false;
			if (ctx.base && ctx._getBase) {
				//BUGDB00734926 
				//fn = this.tmpFunc;
				fn = function() {};
				fn.prototype = ctx._getBase();
				dconstruct = fn.prototype._constructs || false;
			}
			
			if (dconstruct && (!c || this.canCallBase(ctx))) { //call base constructor if needed
					ctx.base();
			}
			
			if (c) rv = c.apply(ctx,args);//call real constructs
			
			if (fn) {//update base, so we're not pointing at shared prototype base
				ctx.base = new fn; 
				ctx.base._parent = ctx;
			}
			if (rv) {
				return rv;
			}
		},
		/**
		 * Utility to create instance inner types, on the instance.
		 * we can instantiate an inner instance type, like:
		 * new obj.InnerType()
		 */
		processInners : function(context,basevjo,baseclazz) {
			var inners = (basevjo) ? basevjo._meta._inners : null;
			if (!basevjo || !inners || inners.length==0 || !context) return;
			for (var k in inners) {//debugger;
				context[k] = vjo.curry(function (t,type,nm) {
						var cn = t.vj$._class + "." + nm;
						var m = _TypeMeta.getById(type.vj$._meta._metaId);
						if (m) m.complete();
						var tp = _Type.createNoConstruct(type);
						var _v = _createVjNS(basevjo,nm,type);
						tp.vj$ = _v;
						tp.vj$.outer = t;
						_Type.processInners(tp,_v,type.clazz);
						type.vj$._class = tp.vj$._class = cn;
						var s = type.prototype;
						if (type.clazz && !type.clazz._name) {
							type.clazz._name = tp.vj$._class;
							_clzCache[cn] = type.clazz; //When name is ipdated, update cache as well
						} else {
							_Type.createClazz(type);
						}
						_Type.construct(tp,Array.prototype.slice.call(arguments,3));
						if (tp.vj$.outer && tp.base.vj$) {
							var _v = _createVjNS(tp.vj$);
							_extend(_v,tp.base.vj$);
							tp.base.vj$ = _v;
						}
						return tp;
				},context,inners[k],k);
				context[k]._outer = context;
				context[k].vj$ = inners[k].vj$;
			}
		}};
		
	
	var hasConsole = (typeof console != "undefined");
	_extend(vjo,{
		sysout : { //do nothing or proxy to firebug console
			print : function() {
			    if (hasConsole) {
				    console.info.apply(this, arguments);
			    }
			},
			println : function() {
			    if (hasConsole) {
				    console.info.apply(this, arguments);
			    }
			},
			printStackTrace : function() {}
		},
		syserr : {
			print : function() {
				if (hasConsole) {
					console.warn.apply(this, arguments);
				}
			},
			println : function() {
				if (hasConsole) {
					console.warn.apply(this, arguments);
				}
			},
			printStackTrace : function() {}
		},
		jsunit : {
		    assertEquals : function(){},
		    assertTrue : function(){},
		    assertFalse : function(){},
		    assertNotNull : function(){}
		}
	});
	
	/**
	 * _TypeMeta collects data about a given type, and completes the definition
	 * when all the dependent types are loaded.
	 */
	function _TypeMeta(name,kind,cfg) {
		this._needs = [];
		this._props = null;
		this._protos = null;
		this._satisfies = [];
		this._mixins = [];
		this._inherits = [];
		this._globals = null;
		this._inits = null;
		this._expects = [];
		this._completed = (kind==='type')?true:false;
		this._isInner = (name)? false : true;
		this._name = name;
		this._kind = kind;
		this._options = {autoConstruct:true}; //default options
		this.init(cfg);
		this.setup();
	}
	
	_TypeMeta.prototype = {
		init : function (cfg) {
			this._cfg = {
				satisfiesFn : _Type.satisfies,
				inheritsFn : _Type.inherits,
				protosFn : _Type.protos,
				postDefFn : _Type.tmpFunc,
				typeDef : null,
				baseType : "vjo.Object"};
			if (cfg) _extend(this._cfg,cfg);
		},
		setup : function() {		
			var id = this._name;
			var t = this._type = this._cfg.typeDef || _Type.create(id,'itype'===this._kind);
			t.vj$._vjType = this._kind || 'ctype';
			this._canDelayInit = true; //Assume there are no static members by default, props & inits will set it to true
			if (this._isInner) { 
				id = _TypeMeta.id();
				t.vj$._meta._isInner = true;
			} else {//add type to typespace
				var pObj = _createPkg(id);
				if (!pObj.pkg[pObj.className]) pObj.pkg[pObj.className] = this._type;
				t.vj$[pObj.className] = t;
				_TypeInitMgr.register(id,this);
				this._isDup = (_TypeMeta.getById(id)!=null);
			}			
			if (!this._isDup) _TypeMeta.put(this,id);			
			t._inherits = null;
			_Type.createClazz(t);
			t.vj$._meta._metaId = id;
		},
		needs : function(need,alias) {
		    _Type.needs.apply(this._type,arguments);
			return this;
		},
		singleton : function () {//Depricated
			return this;  //TODO: self instantiate
		},
		//> final public T options(Object opts)
		options : function(opts) {
			if (opts) {
				for (var k in opts) {
					this._options[k] = opts[k];
				}
			}
			return this;
		},
		makeFinal : function () {//Depricated
		    return this;
		},
		//> final public T satisfies(String type)
		//> final public T satisfies(Array type)
		satisfies : function(type) {
		    var clzs = [];
			if (type instanceof Array) clzs = type;
			else clzs = [type];
			_forEach(clzs,function(val,key,obj){
		        var clsNeed = _getTypeName(val);
		        this.needs(clsNeed); //make sure class is loaded
				_Type.needs.call(this._type,clsNeed); //make sure class is loaded
				this._satisfies.push(val);
			},this);
            return this;
		},
		 //> public final T props(Object objLiteral) 
		props : function (props) {
			this._canDelayInit = false;
			if (this._props) throw "multiple props blocks are not allowed";
			this._props = props;
			_Type.props.apply(this._type,arguments);
			return this;
		},
		//> final public T protos(Object objLiteral)
		protos : function (protos) {
		    if (this._protos) throw "multiple protos blocks are not allowed";
			this._protos = protos;
			return this;
		},
		//> final public T inherits(String type)
		//> final public itype inherits(Array type) ; this is only for itype allows for multiple inherits
		inherits : function(type) {
			var clzs = [];
			if (type instanceof Array) clzs = type;
			else clzs = [type];
			_forEach(clzs,function(val,key,obj){
				var clsNeed = _getTypeName(val);
				this.needs(clsNeed); //make sure class is loaded
				this._inherits.push(val);
			},this);
			return this;
		},
		
		//> final public T mixin(String type)
		//> final public T mixin(Array type)
		mixin : function (type) {
			var clzs = [];
			if (type instanceof Array) clzs = type;
			else clzs = [type];
			_forEach(clzs,function(val,key,obj){
			    var clsNeed = _getTypeName(val);
			    this.needs(clsNeed); //make sure class is loaded
				this._mixins.push(val);
			},this);
            		return this;
		},
		//> final public T inits(Function func)
		inits : function (fn) {
			this._canDelayInit = false;		
			this._inits = fn;
			return this;
		},
		//> final public T globals(Object obj)
		globals : function (obj) {
			this._canDelayInit = false;
			this._globals = obj;
			return this;
		},
		validateAndMerge : function (context,field){
			var p = (field) ? context[field] : context;
			return function(val,key,obj) {
				if (p[key]) {
					throw "collision when mixing in '" + key + "' into " +  this._name;
				} else {
					p[key] = val;
				}
			};
		},
		mergeMixins : function(props) {
			var mxns = this._mixins;
			for (var i=0; i<mxns.length; i++) {
				var m = vjo.getType(mxns[i]);
				if (!m || !m.vj$ || m.vj$._vjType!='mtype') throw mxns[i] + 'is not a valid mtype.';
				var exp = m._expects; sats = m._satisfiers;
				if (!this._protos) this._protos = {};
				if (!this._props) this._props = {};
				//update namespace with mixins
				_copyNS(m.vj$,this._type.vj$);
				//point mtype reference to target reference
				var nm = m.vj$._class, idx = nm.lastIndexOf('.');
				var clz = (idx != -1) ? nm.substring(idx+1) : nm;
				if (!this._type.vj$[clz])
					this._type.vj$[clz] = this._type;
				else
					throw clz + " is already defined in the current namespace";
				_forEach(m._protos, this.validateAndMerge(this,'_protos'), this);
				_forEach(m._props, this.validateAndMerge(props,'_props'), this);
				for (var j=0; j<sats.length; j++) this._satisfies.push(sats[i]);
				if (exp) this._expects.push(exp);
			}
		},
		completeSatisfies : function() {
			if (this._satisfies.length>0) this._cfg.satisfiesFn.call(this._type,this._satisfies);
			if (this._expects.length>0) this._cfg.satisfiesFn.call(this._type,this._expects,true);
		},
		completeInherits : function() {
			var ilen = this._inherits.length
			if (ilen>0)  {
				if (this._kind != 'itype' && ilen>1) {
					throw 'type can only inherit from one type';
				}
				for (var i=0; i<ilen; i++) this._cfg.inheritsFn.call(this._type,this._inherits[i]);
			} else {
				if (this._kind!='itype') {
					this._cfg.inheritsFn.call(this._type,this._cfg.baseType,true);
				}
			}
		},
		completeDef : function() {
			if (this._protos) this._cfg.protosFn.call(this._type,this._protos);
			this._cfg.postDefFn.call(this);
			//initialize
			// init globals
			if (this._globals && !this._isDup) this.__initGbs(this._globals);
			// inits
			if (this._inits && !this._isDup) this._inits.call(this._type);			
		},
		__initGbs:function(obj){
			//for(i in obj){ eval( i + "=\"" +obj[i] + "\"" ) }
			
			_forEach(obj,function(val,key){
				// I am making default policy error for now
			    // defer to general error catching mechanism in prod env
			    // TODO make this policy driven
				
				if(val!=vjo.METHODDEF && val!=vjo.PROPDEF){
					if (this[key] && this[key]!==val){
						throw key + " is already defined in the current namespace";
					}
					this[key] = val;
				}
			},win);
			
		},
		complete : function () {
			if (this._completed) return this;
			this._completed = true;
			_TypeMeta._completed[this._name] = true;
			//merge mixins, and validate for collisions
			_updateInnerEtypes(this._type.vj$);
			if (this._mixins.length > 0) {
				var p = {_props:{}};
				this.mergeMixins(p);
				_Type.props.call(this._type,p._props);
			}
			//complete definition of type
			this.completeSatisfies();
			this.completeInherits();
			this.completeDef();
			return this;
		},
		typesAvail : function(list) {
			for (var i=0; i<list.length;i++) {
				if (!_isVjoType(list[i])) {
					return  false; 
				}
			}
			return true;
		},
		canComplete : function() {
			var b = (this._inits==null) &&  this.typesAvail(this._inherits);
			if (b) b = this.typesAvail(this._satisfies);
			if (b) b = this.typesAvail(this._mixins);
			return b;
		},
		//> final public T endType()
		endType : function () {
		    if (!this._isInner) {
				if (_enableLazyInit && this._canDelayInit) {
				 	return this._type;
				}		    
				_TypeInitMgr.load(this._name);
				if (vjo.validateType) {
					vjo.validateType(this._type);
				}
		    } else if (this.canComplete()) this.complete();

		    //all other inners/anonymous will be completed at later time
			//alternatively, user can complete their type, if needed.
		    return this._type;
		}
	};
	_extend(_TypeMeta,{
		_count : 0,
		_pre : "tmp",
		_reg : {},
		_completed : {},
		/**
		 * Generate a unique id
		 */
		id : function () {
			return this._pre + this._count++;
		},
		/**
		 * Register a type meta
		 */
		put : function(meta,id) {
			var nm = (id) ? id : this._pre + this._count++;
			this._reg[nm] = meta;
		},
		/**
		 * Access TypeMeta given a type.
		 */
		get : function(type) {
			var _type;
			if (_isVjoType(type)) {
				return this._reg[type.vj$._meta._metaId];
			} else if (_type=vjo.getType(type)) {
				return this._reg[_type.vj$._meta._metaId];
			} else {
				return this._reg[type];
			}
		},
		getById : function(id) {
			return this._reg[id];
		}
	});
	
	
	/**
	 * Type Definitions
	 *
	*/
	
	/**
	 * Class Type
	 */
    //> final public T ctype(String? type)
	vjo.ctype = function (clz) {
		clz = _getTypeName(clz);
		var t = new _TypeMeta(clz);
		return t;
	};
	
	//backwards compatibility
	vjo.type = function (clz) {
		clz = _getTypeName(clz);
		var t = new _TypeMeta(clz,'type');
		t.inits = function (fn) {
			if (fn && !this._isDup) fn.call(this._type);
			return this;
		};
		t.props = function (props) {
			_Type.props.apply(this._type,arguments);
			return this;
		};
		t.protos = function (props) {
			_Type.protos.apply(this._type,arguments);
			return this;
		};
		t.inherits = function(clz) {
		    _Type.inherits.apply(this._type,arguments);
		    return this;
		};
		t.satisfies = function(clz) {
		    _Type.satisfies.apply(this._type,arguments);
		    return this;
		};
		return t;
	};
	
	/**
	 * Interface Type
	 */
    //> final public vjo.itype itype(String? type)
	vjo.itype = function (clz) {
		clz = _getTypeName(clz);
		var t = new _TypeMeta(clz,'itype', {
			inheritsFn : function (supClass) {
				var type = (this.vj$[supClass]) ? this.vj$[supClass] : 
					(this.vj$.b && this.vj$.b[supClass]) ? this.vj$.b[supClass] : vjo.getType(supClass);
				if (type) {
				    //copy static finals
				    for (var i in type) {	
						var val = type[i];
						if (_isValidProp(i) && !this[i]) {
							this[i] = val;
						}
					}
				}
				return this;
			}
		});
		t._type.isInstance = function (obj) {
			    return vjo.isInstanceOf(obj,this);
		};
		return t;
	};
	
	vjo.atype = vjo.ctype; //depricated
	
	function _MType(clz) {
	function _addMixinMethods(to, methods, ns) {
		if (!methods || typeof methods != 'object') return;
		var b = true;
		for (var i in methods) {
			b = false;
			if (!reservedMProp[i]) {
				to[i] = methods[i];
			}
		}
		return b;
	};
		var t = this;
		t.vj$ = { _vjType : 'mtype', _class:clz, _meta : {} };
		t._props = null;
		t._protos = {};
		t._expects = "";
		t._satisfiers = [];
		t.needs = function () { return _Type.needs.apply(this,arguments); };
		t.props = function (props) {
			var p = this._props || {};
			if (!_addMixinMethods(p,props,this.vj$)) {
				if (!this._props) {
					this._props = p;
				} 
			}
			return this;
		};
		t.protos =  function (protos) {
			if (protos && protos['constructs']) {
				throw 'mtype cannot have constructs block';
			}
			_addMixinMethods(this._protos,protos,this.vj$);
			return this;
		};
		//> final public T expects(String type)
		t.expects = function (clz) {
			this._expects = vjo.getType(clz);
			return this;
		};
		t.satisfies = function (clz) {
			var clzs = [];
			if (clz instanceof Array) clzs = clz;
			else clzs = [clz];
			_forEach(clzs,function(val,key,obj){
			    var clsNeed = _getTypeName(val);
			    this.needs(clsNeed); //make sure class is loaded
				this._satisfiers.push(val);
			},this);
			return this;
		};
			
		t.endType = function () {
			if (this.vj$._class) _TypeInitMgr.load(this.vj$._class);
			return this;
		}
		return t;
	}
	
	/**
	 * Mixin Type
	 */
	//> final public mtype mtype(String? type)
	vjo.mtype = function (clz) {
		clz = _getTypeName(clz);
		var base = new _MType(clz);
		
		//if class not specified, return class
		if (!clz || _isInnerClass(clz)) base.vj$._meta._isInner = true;
		if (!clz) return base;
		
		var pObj = _createPkg(clz);
		//if class already exists, just return the type. do not override existing class
		return (pObj.pkg[pObj.className])? base : (pObj.pkg[pObj.className] = base); 
	};
	
	/**
	 * Enum Type
	 */
    //> final public vjo.etype etype(String? type)
	vjo.etype = function(clz) {
		clz = _getTypeName(clz);
		_createEnum();
		var eDef = function (args) {
		    this.vj$ = eDef.vj$;
			if (args != false) {
				if (!this.constructs) {
					throw "'" + this.vj$._class + "' cannot be instantiated";
				}
				var rv = this.constructs.apply(this,args);
			}
		};
		eDef.vj$ = {_class:clz, _vjType:'etype', _meta:{}};
		eDef.isInstance = function (o) {
			return vjo.isInstanceOf(o,this); //rbhogi
		};
		var t = new _TypeMeta(clz,'etype',{
			typeDef : eDef,
			baseType : 'vjo.Enum',
			postDefFn : function(){
				this._type.prototype.toString = vjo.Enum.prototype.name;
				if (this._eVals) this._type.values.call(this._type,this._eVals);
			}
		});
		_extend(t,{
			inherits : function () {
				throw "Invalid type definition. etype cannot be inheritted from another type";
			},
			//> final public T values(String type)
		    //> final public T values(Object objLiteral)
			values : function (vals) {
				this._eVals = vals;
				//this._type.values.call(this._type,vals);
				return this;
			}
		});
		
		var en = t._type;
		en._enums = [];
		en.from = vjo.Enum.from;
		en._nativeValueOf = en.valueOf;
		en.valueOf = vjo.Enum.from;
		en.values = function (vals) {
			if (arguments.length == 0) {
				if (this._enums.slice) {
					return this._enums.slice();
				} else {
					var a = [];
					for (var i = 0; i < this._enums.length; i++) {
						if (this._enums[i]) {
							a[i] = this._enums[i];
						}
					}
					return a;
				}
			} else {
		    	var ord = 0;
		    	if (typeof vals == "string" && vals.length > 0) {
					while (vals.indexOf(" ") > -1) {
						vals = vals.replace(" ", "");
					}
	    			//Simple case...
	    			//  ex: .values("MON,TUE,WED")
	    			// or .values("MON:1, TUE, WED")
		    		if (vals.indexOf(",") > 0) {
		    			var a = vals.split(","), t;
			    		if (a[0] && a[0].indexOf(":") > 0) {
			    			throw "Invalid labels for etype values: " + a[0];
			    		}
		    			for (var i = 0, l = a.length; i < l; i++) {
		    				var eV = a[i];
		    				if (i==0 && t && t.length>0) {
		    					eV = t[0];
		    				} else {
		    					if (a[i].indexOf(":")>-1) {
		    						//Error case
		    						eV = a[i].split(":")[0];
		    					}
		    				}
		    				this._enums[this._enums.length] = new en(false);
		    				this._enums[this._enums.length - 1]._name = eV;
		    			}
		    		} else {
	    				this._enums[0] = new en(false);
	    				this._enums[0]._name = vals;
		    		}
		    	} else {
					//Complex case...
					//  ex: values({MON:[true],TUE:[true],SUN:[false]})
					for (var itm in vals) {
						this._enums[this._enums.length] = new en(vals[itm]);//TODO
						this._enums[this._enums.length - 1]._name = itm;
					}
		    	}
		    	
		    	//Create static refs for enums
		    	for (var i = 0, l = this._enums.length; i < l; i++) {
		    		if (this._enums[i]) {
		    			var nm = this._enums[i]._name;
						if (this[nm]) {
							//Validate props members against values
							throw "Invalid prop member. Cannot use etype value as prop member.";
						}
			    		this[nm] = this._enums[i];
			    		this[nm]._ord = ord++;
		    		}
		    	}
			}
			en.prototype.constructs = null;
			return this;
			
		};
		    
		
		return t;
	};
	
	/**
	 * Native Object Type
	 */
	//> final public vjo.otype otype()
    //> final public vjo.otype otype(String type)
	vjo.otype = function (clz) {
		return {
			//> final public T defs(Object objLiteral)
			defs : function (defs) {
				return this;
			},
			endType : function () {
			}
		};
	};
	
	
	/*
		reserved words
	*/
	var reservedProp = {}, reservedProto = {}, reservedMProp = {}, reservedClz = {}, reservedInh = {};
	_forEach("props protos inherits prototype inits satisfies mixin _inherits _satisfiers singleton isInstance vj$".split(" "),
		function (val,key,obj) {
			this[val] = true;
		},reservedProp);
	_forEach("constructs getClass _getBase base vj$".split(" "),
		function (val,key,obj) {
			this[val] = true;
		},reservedProto);
	_forEach("props protos _props _protos vj$ _expects expects _satisfiers satisfies endType".split(" "),
		function (val,key,obj) {
			this[val] = true;
		},reservedMProp);
	_forEach("vjo.Class vjo.Object".split(" "),
		function (val,key,obj) {
			this[val] = true;
		},reservedClz);
	
	/**
	 *	utility methods used by bootstrap
	 */
	
	function _isVjoType(clz,excludeMixin) {
		if (clz && clz.vj$ && clz.vj$._vjType) {
			if (_isFn(clz)) return true;
			else if (clz.vj$._vjType === 'mtype' && !excludeMixin) return true
		}
		return false;
	}
	
	function _isInstanceForInterface(poClass,poType) {
        var clz = poClass, arr = clz._satisfied;
        for (var i=0; i<arr.length; i++) if (_isInterfaceInstanceOf(poType, arr[i])) return true;
	    return false;
	}
	
	function _isInterfaceInstanceOf(src,target) {
	    if (src === target) return true;
	    var meta = _TypeMeta.getById(target.vj$._meta._metaId), inhs;
	    if (meta && (inhs = meta._inherits)) {
	        for (var i=0;i<inhs.length;i++) {
	            var tpName = _getTypeName(inhs[i]);
	            if (src === vjo.getType(tpName)) return true;
	        }
	    }
	    return false;
	}
	
	function _createPkg (className,doNotCreateNS) {
		if (!className) return null;
		var pkgType = _typeMap[className];
		if (pkgType) return pkgType;//if have pkg, return
			
		var names = className.split('.'), len = names.length;
		if (doNotCreateNS) {
			pkgType = {pkg:{className:names[len-1]}};
		} else {
			var pkg = (names[0]=='vjo') ? _global : this; //TODO: update with scope
			for (var i=0; i<len-1;i++){
				var name = names[i];
				var sub = pkg[name];
				if (!sub) {
					pkg[name] = sub = {};
				}
				pkg = sub;
			}
			pkgType = {pkg:pkg,className:(len>0)?names[len-1]:""}
		}
		_typeMap[className] = pkgType;
		return pkgType;
	}
	
	function _createEnum() {
		//Enum created already!
		if (_isFn(vjo.Enum)) {
			return;
		}
		var nm = "vjo.Enum";
		var baseEnum = vjo.ctype(nm)
		.props({
			from : function () {
//				if (!arguments[0]) {
//					throw "Invalid argument value: " + arguments[0];
//				}
				if (arguments.length == 0 || arguments.length > 2) {
					//Invoke native valueOf method
					return this._nativeValueOf.apply(this, arguments);
				}
				var s = arguments[0];
				if (arguments.length == 2) {
					s = arguments[1];
					if (s) {
						var clz = arguments[0];
						try {
							var n = clz.getName();
							while (n.indexOf("$") > 0) {
								n = n.replace("$", ".");
							}
							var o = eval(n);
							if (o[s]) {
								return o[s];
							}
						} 
						catch (a) {
						}
					}
					throw "No enum const " + arguments[0].getName() + "." + s;
				} else {
					if (this[s]) {
						return this[s];
					}
				}
				throw "No enum const " + s;
			}
		})
		.protos({
			_name : null,
			_ord : -1,
			constructs : function() {
				throw "cannot instantiate 'vjo.Enum'";
			},
			name : function () {
				return this._name;
			},
			ordinal : function () {
				return this._ord;
			},
			compareTo : function (o) {
				if (o == null) {
					throw "compare to Etype value cannot be null";
				}
				return (this.ordinal() - o.ordinal());
			},
			equals : function (o) {
				return (this===o);
			},	
		    getDeclaringClass:function(){
                var clazz=this.getClass();
                return clazz;
                //if(!clazz.prototype) return clazz;
                //var zuperName = clazz.prototype.vj$._class;
                //var zuper = vjo.getType(zuperName);
        	    //return (zuperName === 'vjo.Enum') ? clazz : zuper;
			}	
		})
		.endType();	
		baseEnum._nativeValueOf = baseEnum.valueOf;
		baseEnum.valueOf = vjo.Enum.from;
		reservedClz[nm] = true;
		reservedInh[nm] = true;
	}

	//Added to Object at runtime
	function _getClazz() {
	    //See bug 1785
	    //if(this.vj$._vjType === 'ctype' && !this.vj$._meta._isInner && this.constructor.clazz) {
		//    var n = clz = this.constructor.clazz._name, idx = n.lastIndexOf('.');
		//    this.vj$.type.clazz
		//    if (idx != -1) clz = n.substring(idx+1);
		//    if (this.constructor.vj$[clz]) return this.constructor.vj$[clz].clazz;
	    //} else {
		//	var n = clz = this.vj$._class, idx = n.lastIndexOf('.');
		//	if (idx != -1) clz = n.substring(idx+1); 
		//	if (this.vj$[clz]) return this.vj$[clz].clazz;
		//}

		var n = clz = this.vj$._class, idx = n.lastIndexOf('.');
		if (idx != -1) clz = n.substring(idx+1); 
		if (this.vj$[clz]) return this.vj$[clz].clazz;

		//Error case...
		return null;
	}

	function _updateInnerEtypes(context) {
		if (!context._class) return;
		var typeVjo = context._meta;
		if (typeVjo.s_inners) {
			for (var k in typeVjo.s_inners) {
				if (typeVjo.s_inners[k].vj$._vjType == 'etype') {
					for (var i=0;i<typeVjo.s_inners[k]._enums.length; i++) {
						typeVjo.s_inners[k]._enums[i].vj$ = typeVjo.s_inners[k].vj$;
						_updateInnerEtypes(typeVjo.s_inners[k]._enums[i].vj$);
					}
				}
				_updateInnerEtypes(typeVjo.s_inners[k].vj$);
			}
		}
		if (typeVjo._inners) {
			for (var k in typeVjo._inners) {
				if (typeVjo._inners[k].vj$._vjType == 'etype') {
					if (!typeVjo._inners[k].vj$._class) {
						typeVjo._inners[k].clazz._name = typeVjo._inners[k].vj$._class = typeVjo._class + "." + k;
					}
					for (var i=0;i<typeVjo._inners[k]._enums.length; i++) {
						typeVjo._inners[k]._enums[i].vj$ = typeVjo._inners[k].vj$;
						_updateInnerEtypes(typeVjo._inners[k]._enums[i].vj$);
					}
				}
				_updateInnerEtypes(typeVjo._inners[k].vj$);
			}
		}
	}
	
	function _hasCollisionWithMixin(type,name,isStatic) {
		var mxns = type.vj$._meta.mixins;
		if (!mxns || mxns.length==0) return false;
		for (var i=0; i<mxns.length; i++) {
			var mxn = mxns[i];
			if (isStatic) {
				if (mxn._props && mxn._props[name]) return true;
			} else {
				if (mxn._protos[name]) return true;
			}
		}
		return false;
	}
	
	function _isValidInst (value) {
		return !(reservedProto[value]===true);
	}
	
	function _isValidClz(value) {
		return !(reservedClz[value]===true);
	}
	
	function _isValidInh(value) {
		return !(reservedInh[value]===true);
	}
	
	function _extend(target,source) {
		for (var name in source) {
			var copy = source[name];
			if (copy !== undefined)
				target[name] = copy;
		}
		if (source.toString != Object.prototype.toString) {
			target.toString = source.toString;
		}
	}

	function _forEach(object, block, context) {
		if (!object) return;		
		if ( !vjo.isArray(object) ) {
			for (var name in object ) {
				if ( block.call(context,object[name],name,object) === false )
					break;
			}
		} else {
			for (var i =0, len = object.length; i<len; i++) {
				if (block.call(context,object[i],i,object)===false)
						break;
			}
		}
		return object;
	}
	
	function _createVjNS(ns,name,type) {
		var rv = {};
		_extend(rv,ns);
		if (name && type) {
			delete rv._meta
			_extend(rv,type.vj$); 
			rv[name] = type;
		}
		return rv;
	}
	
	function _copyNS(from,to) {
		_forEach(from,function(val,key){
			if (key != 'type' && _isVjoType(val,true)) {
				if (this[key] && this[key]!==val) 
					throw key + " is already defined in the current namespace";
				this[key] = val;
			}
		},to);
	}

	function _isInnerClass (clz) {
		if (!clz) return true;
		else if (clz.indexOf('.')==-1) return false;
		var tp = clz;
		while ((i = tp.lastIndexOf('.'))>0) {
			tp = tp.substring(0,i);
			if (_typeMap[tp])
				return true;
		}
		return false;
	}
	
	function _isFn(fn) {
		return typeof fn == 'function';
	}
	
	function _isValidProp (pVal) {
		return !(reservedProp[pVal]===true);
	}
	function _fixScope(from,to) {
		to.vj$ = from.vj$;
	}
	function _getTypeName(name) {
		if (typeof name != 'string') return name;
		var idx = name.indexOf('<');
		if (idx>0) {
			var idx2 = name.indexOf(' ');
			if (idx2 > 0 && idx2 < idx) idx = idx2;
			name = name.substring(0,idx);
		}
		return name;
	}
	
}).apply(this);
/**
* Represents a VJO event reference which wraps the DOM native Event
* object. 
*/
vjo.ctype('vjo.dsf.Event')
.protos({
	src : null,
	eventType : null,
	nativeEvent : null,
	
	/**
	* Creates an event instance by given element, type of event and the 
	* browser's native event object.
	* 
	* @param {Object} src 
	*        An element which emit the event
	* @param {String} eventType 
	*        An event type of this event
	* @param {com.ebay.dsf.resource.html.event.handler.JsHandlerObjectEnum} event 
	*        A browser's native event object
	* @constructor
	*/
	//> public void constructs(Object, String, com.ebay.dsf.resource.html.event.handler.JsHandlerObjectEnum);
	constructs : function (src, eventType, pEvent) {
		this.src = src;
		this.eventType = eventType;
		this.nativeEvent = pEvent;
	}
})
.endType();
/**
* Represents a message reference.
* <p>A message could bring properties used by service handler. Some of them are 
* important and would be defined when a message is new created,
* 	<li>svcId - A service id this message is targeting to
* 	<li>request - 
* 	<li>response - vjo.dsf.ServiceResponse
* 	<li>clientContext -
* 	<li>trspType - constant from vjo.dsf.ITransport
* 	<li>returnData -
*   <li>v - version
*   <li>svcName - web service name
*   <li>opName - web service operation name
*   <li>stok - tracking param
*   <li>pId - tracking param
*/
vjo.ctype('vjo.dsf.Message') //<public dynamic
//> needs vjo.dsf.ServiceResponse, vjo.dsf.SvcConfig
.protos({
	objType : 'dsf_Message', //< public final String
	//> public String trspType
	trspType : '',
	//> public String svcId
	svcId : '',
	//> public Object request
	request : null,
	//> public ServiceResponse response
	response : null,
	//> public int status
	status : null,
	//> public SvcConfig svcConfig
	svcConfig : null,
	//> public String stok
	stok : '',
	//> public String pId
	pId : '',
    //> public constructs(String, String?)
	constructs : function (svcId, opName) {
    	var a = arguments, l = a.length;
		if(l==1){
            this.svcId = svcId;
        } else if(l==2){
            this.svcId = svcId + "."  + opName;
            this.svcName = svcId;
			this.opName = opName;
        }
		this.rawRequest = this.trace = "";
		this.clientContext = {};
		this.trspType = 'InProc';
		this.returnData = true;
		this.v = '0';
		this.headers = null;
	}
})
.endType();
vjo.itype("vjo.dsf.ITransport") //< public
//> needs vjo.dsf.Message
.protos({
    //> public void handleRequest(Message message, Object callback)
    handleRequest : function(message, callback){
    }
})
.endType();
/**
* Represents the response from a service.
*/
vjo.ctype('vjo.dsf.ServiceResponse') //< public
//>needs vjo.dsf.Error
.protos({	
	objType:undefined, //<public String
	errors:undefined, //<public Array
	data:undefined, //<public Object
	
	//> public void constructs();
	constructs : function () {
		this.errors = []; // FIXME had to add due to new instances would retain old errors 
	},
	//> public void addError(Error error)
	addError : function (error) {
		if (this.errors) {
			this.errors[this.errors.length] = error;
		}
	}
})
.endType();
vjo.ctype('vjo.dsf.InProcReqtHdl')
.satisfies('vjo.dsf.ITransport')
.needs('vjo.dsf.ServiceResponse')
.needs('vjo.dsf.Message')
.protos({
	constructs : function () {
		this.svcHdls = {};
	},
	registerSvcHdl : function(svcId, handler) {
		this.svcHdls[svcId] = handler;
	},
	getSvcHdl : function(svcId) {
		return this.svcHdls[svcId];
	},
	//> public void handleRequest(Message message, Object? callback)
	handleRequest : function(message, callback) {
//		message.trace += '-->SvcHdl_' + message.svcId;
		if (!message.response) {
			message.response = new vjo.dsf.ServiceResponse();
		}
		var handler = this.svcHdls[message.svcId];
		if (handler) {
			// changed to use message rather than message.request
			message.response.data = handler.invoke(message);
		}
		if (typeof message.status == 'undefined' || message.status == null) {
			message.status = 1; //back to response chain
		}
	}
})
.endType();

/**
* Represents a service engine runtime error.
*/
vjo.ctype('vjo.dsf.Error')
.protos({
	id:undefined, //<public String
	message:undefined, //<public String
	
	/**
	* Creates a new instance for the service engine runtime error.
	* 
	* @param {String} id 
	*        An id of this error instance
	* @param {String} message 
	*        A content of this error instance
	* @constructor 
	*/
	//>public void constructs();
	//>public void constructs(String);
	//>public void constructs(String, String);
	constructs : function (psId,psMessage) {
		this.id = psId;
		this.message = psMessage;
	}
})
.endType();
vjo.ctype('vjo.dsf.SvcErr') //< public
.needs('vjo.dsf.Error')
.needs('vjo.dsf.Message')
.props({
	// client error ids
	InvRsp:"InvalidRsp", //< public final String
	InvRqBnd:"RqInvalidBnd", //< public final String
	InvRspBnd:"RspInvalidBnd", //< public final String
	InvRq:"InvalidRequest", //< public final String
	TO:"TimedOut", //< public final String
//	PROTOCOL_DOES_NOT_MATCH_SVC_SPEC:"Client.Request.ProtocolDoesNotMatchSvcSpec", //< public final String
	RqUnk:"Client.Request.UnknownError", //< public final String
	// legacy SYS error ids
	SvcRq:"SYS.SVC_REQUEST_ERROR", //< public final String
	SvcRsp:"SYS.SVC_RESPONSE_ERROR", //< public final String
	GlbRq:"SYS.GLOBAL_REQUEST_ERROR", //< public final String
	GlbRsp:"SYS.GLOB_RESPONSE_ERROR", //< public final String
	TrnRq:"SYS.TRANS_REQUEST_ERROR", //< public final String
	TrnRsp:"SYS.TRANS_RESPONSE_ERROR", //< public final String
	Prs:"SYS.JSON_PARSE_ERROR", //< public final String
	SvcPrc:"SYS.DARWIN_SERVICE_PROTOCOL_ERROR", //< public final String
	//> public void err(Message message, String errorId, String errorMsg);
	err : function(message, errorId, errorMsg) {
		message.response.addError(new vjo.dsf.Error(errorId, errorMsg));
	}
})
.endType();
vjo.ctype('vjo.dsf.ServiceRegistry') //< public
.needs('vjo.dsf.ITransport')
//> needs vjo.dsf.IBinding
.props({
	// transports
	t : [], //< private static ITransport[]
	// bindings
	b : [], //< private static IBinding[]
	//> public IBinding getBinding(String payloadType);
	getBinding : function(payloadType) {
		return this.b[payloadType]; //< IBinding
	},
	//> public ITransport getTransport(String trspType);
	getTransport : function(trspType) {
		return this.t[trspType];
	},
	/**
	 * returns true if registered else false
	 */
	//> public boolean registerBinding(String payloadType, IBinding binding);
	registerBinding : function(payloadType, binding) {
		if (payloadType && binding) {
			this.b[payloadType] = binding;
			return true;
		}
		return false;
	},
	/**
	 * returns true if registered else false
	 */
	//> public boolean registerTransport(String trspType, ITransport transport);
	registerTransport : function(trspType, transport) {
		if (trspType && transport) {
			if (vjo.isInstanceOf(transport, vjo.dsf.ITransport)) {
				// only register if trspType is not already registered
				if (null == this.t[trspType]) {
					this.t[trspType] = transport;
					return true;
				}
			}
		}
		return false;
	}
})
.endType();
vjo.ctype('vjo.dsf.RemoteReqtHdl') //< public
.satisfies('vjo.dsf.ITransport')
.needs(['vjo.dsf.SvcErr',
'vjo.dsf.ServiceRegistry',
'vjo.dsf.ServiceResponse',
'vjo.dsf.ServiceEngine'
        ])
//> needs vjo.dsf.IBinding, vjo.dsf.ITransport, vjo.dsf.Message
.protos({
	//> public void handleRequest(Message message, Object callback)
	handleRequest : function(message, callback) {
//		message.trace += '-->RemoteHdl_' + message.svcId;
		message.response = new vjo.dsf.ServiceResponse(); //< ServiceResponse
		// svcConfig is required
		if (!message.svcConfig) {
	   		vjo.dsf.SvcErr.err(message, vjo.dsf.SvcErr.InvRq, "message.svcConfig is undefined")
			return;
		}
		// get binding
		var binding = vjo.dsf.ServiceRegistry.getBinding(message.svcConfig.reqtMarshalling); //< IBinding
		if (binding){
			binding.serialize(message);
		}
		else {
			// no binding error
			vjo.dsf.SvcErr.err(message, vjo.dsf.SvcErr.InvRqBnd, "reqtMarshalling=" + message.svcConfig.reqtMarshalling);
		}
		this.invoke(message);	
	},
	//> private void invoke(Message message);
	invoke : function(message) {
		// use transport if registered then return
		// JSCALLBACK uses JSONP transport
		var tT = ((message.svcConfig.respMarshalling == 'JSCALLBACK')?'JSONP':'XHR');
		var t = vjo.dsf.ServiceRegistry.getTransport(tT); //< ITransport
		if (t) {
			t.handleRequest(message, this.callback);
		}
	},
	//> public void callback(Message message);
	callback: function (message) {
		try {
			var binding = vjo.dsf.ServiceRegistry.getBinding(message.svcConfig.respMarshalling); //< IBinding
			if (binding){
				binding.deserialize(message);
			}
			else {
				vjo.dsf.SvcErr.err(message, vjo.dsf.SvcErr.InvRspBnd, "marshalling=" + message.svcConfig.respMarshalling + ":responseText=" + message.response);
			}
		} catch (e) {
			vjo.dsf.SvcErr.err(message, vjo.dsf.SvcErr.InvRsp, "marshalling=" + message.svcConfig.respMarshalling + ":responseText=" + message.response);
		}
		// TODO review if commented out then DapSample works
		vjo.dsf.ServiceEngine.handleResponse(message);
	}
})
.endType();
/**
* Represents the configuration object of a service.
*/
vjo.ctype('vjo.dsf.SvcConfig') //< public
.protos({
	objType:null, //<public String
	url:null, //<public String
	method:null, //<public String
	reqtMarshalling:null, //<public String
	respMarshalling:null, //<public String
	async:true, //<public boolean
	timeout:0, //<public int
	operationName:null,
	typeMappingClassName:null,
	
	/**
	* Creates a instance of the service configuration object.
	*
	* @param {String} method
	*        A String represents the request method. Such as "GET" and "POST"
	* @param {String} url
	*        A String reprents the request target url
	* @constructs
	*/
	//>public constructs(String, String);
	constructs : function (method, url) {
		this.objType = "dsf_SvcConfig";
		this.svcType=null;
		this.url = url;
		this.method = method;
		this.reqtMarshalling = 'raw';
		this.respMarshalling = 'raw';
		this.async = true;
		this.timeout = 0;
	}
})
.endType();
/**
* JsonpTransport
* Sends the remote request across a domain.
*/
vjo.ctype('vjo.dsf.XDomainRequest')
.satisfies('vjo.dsf.ITransport')
.needs(['vjo.dsf.EventDispatcher',
        'vjo.dsf.ServiceEngine'])
//>needs vjo.dsf.Message
.props({
	callbacks : [],
	sCallbackName : "callback",
	sPreId : "xdr_",
	sPreExtId : "xdr_ext_",
	iCount : 0,
	bUseIframe : (navigator.userAgent.indexOf('Firefox')>0),
	bodyLoaded: false, //< boolean
	//> public void onLoad();
	onLoad : function() {
		this.bodyLoaded = true;
	},
	
	//> private Object getReqDiv();
	getReqDiv : function () {
		return document.getElementsByTagName(this.bodyLoaded?"body":"head")[0];
	},
	
	/**
	* Sends the remote request. This function will create a JavaScript statement
	* in the page and embraced with <script> tag. The id of this tage will be 
	* returned by this function.
	*
	* @param {Object} req 
	*        A request object to be sent. It can be a message object or a request url
	* @return {String} 
	*        A String id represents the script tag created to execute sending 
	*        action in the page
	*/
	//> public String send(Object poReq);
	//> public String send(Object poReq, boolean pbBustCache);
	send : function (poReq) { //returns id of script tag. if you are using this outside of client service engine, you must
		//app must cleanup
		if (!document.createElement || !poReq) {	//not supported
			return;
		}
		var url = "", eid = "", rdm = '_vrdm='+(new Date()).getTime();
		if (typeof poReq == "string") {
			url = poReq;
			eid = this.sPreExtId + this.iCount++;
		} else if (poReq.objType=="dsf_Message" && poReq.svcConfig) {
			var cb = this.createCallback(poReq);
			eid = this.sPreId + this.callbacks[this.callbacks.length-1];
			url = poReq.svcConfig.url + "&callback=" + cb;
		}
		var frm = null, doc;
		doc = document;
		var scpt = this.createElement("script");
		scpt.async = true; //make it async call
		scpt.defer = true; //make it async call(older browsers)
		scpt.id = eid;
		scpt.type = 'text/javascript';
		var bustCache = true;
		if(arguments.length>1){
			bustCache = arguments[1];
		}
		if(bustCache){
			url = url + ((url.indexOf('?')==-1) ? '?' : '&') + rdm;
		}
		scpt.src = url; 		
		//scpt.src = url + ((url.indexOf('?')==-1) ? '?' : '&') + rdm;
		//this.getReqDiv().appendChild(scpt);
		//Making script call really asynchronous
		var that = this;
		window.setTimeout(function(){that.getReqDiv().appendChild(scpt);},0);
		return eid; //callback should call parent.cb for firefox. parent.cb should be safe regardless
	},
	
	//> private String createCallback(Object poMessage);
	createCallback : function (poMessage) {
		var len = this.callbacks.length, name = this.sCallbackName + len,
		eid = this.sPreId+name;
		this.callbacks[len] = name;
		this[name] = function (poResponse) {
			vjo.dsf.XDomainRequest.loaded(eid);
			poMessage.response = poResponse;
			vjo.dsf.ServiceEngine.handleResponse(poMessage);
		};
		//TODO: add scoping
		
		//var ver = vjo.getVersion(), rv = ((ver)?ver+".":"")+"vjo.dsf.XDomainRequest."+name;
		var ver = "", rv = ((ver)?ver+".":"")+"vjo.dsf.XDomainRequest."+name; //< String
		return rv;
	},
	
	//> private void loaded(String);
	loaded : function (psName) {
		var e = document.getElementById(psName);
		if (e !== null) {
			e.parentNode.removeChild(e);
		}
	},
	
	//> private HTMLElement createElement(String);
	createElement : function (psType) {
		return (typeof(createElementV4)!="undefined")?createElementV4(psType):document.createElement(psType);
	}
})
.protos({
    //> public void handleRequest(Message message, Object callback)
    handleRequest : function(message, callback){
 		vjo.dsf.XDomainRequest.send(message);
 	}
})
.inits(function (){
	vjo.dsf.EventDispatcher.addEventListener(window,"load",this.onLoad,this);
})
.endType();
/**
 * The ServiceEngine passes messages through a configured set of handlers. 
 * Some handlers are specific to a particular service, some global, and 
 * some are transport related. Those handlers will be invoked in sequence on
 * service process chain. 
 * <p>
 * A service process chain shows as below:
 * <pre>
 *                        (REQUEST)
 *                      |           |
 *           -> SERVICE | TRANSPORT | GLOBAL \
 *         /            |           |         ->
 * LISTENER             |           |           SERVICE
 * 		   <-           |           |          /
 *            \ SERVICE | TRANSPORT | GLOBAL <-                            
 *                      |           |
 *                        (RESPONSE)
 * </pre>
 * <p>
 * A service can be registered on remote and also be avaliable on client side.
 * See the Ajax BinDox on how the ServiceEngine can communicate with the server's 
 * service engine via Ajax. On client, you can use the service engine for 
 * custom event listening. One component can fire an event (broadcast a message) 
 * while another can listen (has a handler registered and interested in that 
 * type of message) for the event.
 */
vjo.ctype('vjo.dsf.ServiceEngine') //< public
.needs([
	'vjo.dsf.InProcReqtHdl',
	'vjo.dsf.RemoteReqtHdl',
	'vjo.dsf.ServiceResponse',
	'vjo.dsf.SvcConfig',
	'vjo.dsf.XDomainRequest',
	'vjo.dsf.Error',
	'vjo.dsf.ServiceRegistry',
	'vjo.dsf.SvcErr'])
//> needs(vjo.dsf.Message)
//> needs(vjo.dsf.ITransport)
.props({
	STATUS : {
		ABORT : -1,
		JUMP : 1
	},
	E:null, //< type::SvcErr
	svcReqtHdls : null, //< Array
	svcRespHdls : null, //< Array
	glbReqtHdls : null, //< Array
	glbRespHdls : null, //< Array
	trspReqtHdls : null, //< Array
	trspRespHdls : null, //< Array
	svcHdls : null, //< Array
	inProcHdl : null, //< InProcReqtHdl
	remoteHdl : null, //< RemoteReqtHdl
	//> public void init();
	init : function() {
		this.svcReqtHdls = [];
		this.svcRespHdls = [];
		this.glbReqtHdls = [];
		this.glbRespHdls = [];
		this.trspReqtHdls = [];
		this.trspRespHdls = [];
		this.inProcHdl = new this.vj$.InProcReqtHdl();
		this.remoteHdl = new this.vj$.RemoteReqtHdl();
		this.E = this.vj$.SvcErr;
		vjo.dsf.ServiceRegistry.registerTransport('JSONP', new vjo.dsf.XDomainRequest());
	},
	/**
	* Passes a messages through all handlers registered to handle this message. 
	* The message will be sent to remote server side if it is a remote request.
	* The handlers process the messeage in sequence till all handlers are invoked
	* or the flow is aborted.
	*
	* @param {Message} oMessage 
	*        A Message object to be passed
	* @return {boolean} 
	*        the returnData defined in the message 
	*/
	//> public boolean handleRequest(Message oMessage);
	handleRequest : function(m) {
		
		var rt, ab = this.STATUS.ABORT;
		
		if ((m.status != ab) && typeof rt == 'undefined') {
			rt = this.processServiceRequestHandlers(m);
		}	
		if ((m.status != ab) && typeof rt == 'undefined') {
			rt = this.processGlobalRequestHandlers(m);
		}
		if ((m.status != ab) && typeof rt == 'undefined') {
			this.processTransportHandlers(m);
		}	
		// remote requests will handle the response on their own
		// TODO better way to handle a response
		if ((m.status != ab) && ('Remote' != m.trspType || typeof rt != 'undefined')) {
			this.handleResponse(m, rt);
		}
		
		return m.returnData;
	},
	//> private String processServiceRequestHandlers(Message oMessage);
	processServiceRequestHandlers : function(oMessage){
		var rt, handlers = this.svcReqtHdls[oMessage.svcId];
		if (handlers) {	
			try {
				for (var i=0,len=handlers.length; i < len; i++) {
					oMessage.trace = oMessage.trace + '-->svcReqtHdl_' + i;
					handlers[i].handleRequest(oMessage);			
					if (oMessage.status == this.STATUS.JUMP) {
						rt = 'SVC';		
						this.err(oMessage,this.E.SvcRq,this.E.SvcRq);		
						break;
					}
				}
			} catch (e) {
				rt = 'SVC';
				this.err(oMessage,this.E.SvcRq,this.E.SvcRq);			
			}
		}
		return rt;
	},
	
	//> private String processGlobalRequestHandlers(Message oMessage);
	processGlobalRequestHandlers : function(oMessage){
		var rt;
		if (oMessage.status != this.STATUS.JUMP) {
		    try {
				for (var i=0, len=this.glbReqtHdls.length; i < len; i++) {
					oMessage.trace = oMessage.trace + '-->glbReqtHdl_' + i;
					this.glbReqtHdls[i].handleRequest(oMessage);			
					if (oMessage.status == this.STATUS.JUMP) {
						rt = 'GLB';
						this.err(oMessage,this.E.GlbRq,this.E.GlbRq);	
						break;
					}
				}
			} catch (e) {
				rt = 'GLB';
				this.err(oMessage,this.E.GlbRq,this.E.GlbRq);				
			}
		}
		return rt;
	},
	
	//> private void processTransportHandlers(Message oMessage);
	processTransportHandlers : function(oMessage){
		if (oMessage.status != this.STATUS.JUMP && oMessage.trspType) {
			// use transport if registered
			var transport = vjo.dsf.ServiceRegistry.getTransport(oMessage.trspType); //< ITransport
			if (transport) {
				transport.handleRequest(oMessage, this.handleResponse);
			}
			else {
				// legacy
				var handlers = this.trspReqtHdls[oMessage.trspType];
				if (handlers) {	
				    try {
						for (var i = 0, len = handlers.length; i < len; i++) {
							oMessage.trace = oMessage.trace + '-->trspReqtHdl_' + i;
							handlers[i].handleRequest(oMessage);				
							if (oMessage.status == this.STATUS.JUMP) {
								this.err(oMessage,this.E.TrnRq,this.E.TrnRq);	
								break;
							}
						}
					} catch (e){
						this.err(oMessage,this.E.TrnRq,this.E.TrnRq);					
					}
				}
				
				if (oMessage.status!=this.STATUS.JUMP && oMessage.status!=vjo.dsf.ServiceEngine.STATUS.ABORT) {
					if (oMessage.trspType == 'undefined'){
						this.err(oMessage,this.E.TrnRq,this.E.TrnRq);
					}
					else {
						// fallback to legacy transport
						if ('InProc' === oMessage.trspType) {
							this.inProcHdl.handleRequest(oMessage);
						} else if ('Remote' === oMessage.trspType){
							this.remoteHdl.handleRequest(oMessage);
						}		
					}
				}
			}
		}
	},
	//> public void handleResponse(Message msg);
	//> public void handleResponse(Message msg, String jumpto);
	handleResponse : function(msg, jumpto) {
		
		if (msg.trspType != 'undefined' && msg.trspType && typeof jumpto == "undefined") {
			// TEMP: remove after swf callback fix
//			msg.trspType = 'FLASH';
			this.processTransResponseHandlers(msg);
		}
		
		if (jumpto != 'SVC') {
			this.processGlobalResponseHandlers(msg);
		}
		this.processServiceResponseHandlers(msg);
	},
	
	//> private void processTransResponseHandlers(Message msg);
	processTransResponseHandlers : function(msg){
	
		var handlers = this.trspRespHdls[msg.trspType];
		try {
			if (handlers) {	
				for (var i = handlers.length - 1; i >= 0; i--) {
					msg.trace = msg.trace + '-->trspRespHdl_' + i;
					handlers[i].handleResponse(msg);				
				}
		    }
		} catch (e) {
	   		this.err(msg,this.E.TrnRsp,this.E.TrnRsp);	
		}
	},

	//> private void processGlobalResponseHandlers(Message msg);
	processGlobalResponseHandlers : function(msg){
		try {
			for (var i = this.glbRespHdls.length - 1; i >= 0 ; i--) {
				msg.trace = msg.trace + '-->glbRespHdl_' + i;
				this.glbRespHdls[i].handleResponse(msg);
			}
		} catch (e) {		
	   		 this.err(msg,this.E.GlbRsp,this.E.GlbRsp);	
		}
	},
			
	//> private void processServiceResponseHandlers(Message msg);
	processServiceResponseHandlers : function(msg){
		var applier;
		if (msg.clientContext) {
			applier = msg.clientContext.svcApplier;
		}
		try {
			if (applier) {
				if (typeof applier.onResponse == 'function') {
					applier.onResponse(msg);
				} else if (typeof applier == 'function') {
					applier(msg);
				}
			}
		} catch (e){
			this.err(msg,this.E.SvcRsp,this.E.SvcRsp);	
		}
		var handlers = this.svcRespHdls[msg.svcId];		
		if (handlers) {	
			try {		
				for (var i = handlers.length - 1; i >= 0; i--) {
					msg.trace = msg.trace + '-->svcRespHdl_' + i;	
					handlers[i].handleResponse(msg);		
				}
			} catch (e) {
				this.err(msg,this.E.SvcRsp,this.E.SvcRsp);
			}
		}			
	},	
	
	//> private Object createHandler(Object handler, String methodName);
	createHandler : function (handler,methodName) {
		if (typeof handler[methodName] != 'function') {
			if (typeof handler == 'function') {
				var func = handler, obj = {}, self = this;
				obj[methodName] = function () {
					return func.apply(self,arguments);
				};
				handler = obj;
			}
		}
		return handler;
	},
	
	/**
	* Registers a client side service. A non-remote message will invoke the 
	* service after go through all request handlers. Only one handler can be 
	* registered as a service per each service id.
	* <p>
	* To invoke the registered service. The property 'trspType' of the message
	* should be set as 'InProc'.
	*
	* @param {String} svcId 
	*        A string id represents the service
	* @param {Object} handler 
	*        A handler function to be registered as the service
	*/
	//> public void registerSvcHdl(String svcId, Object handler);
	registerSvcHdl : function(svcId, handler) {
		if (!svcId || !handler) {
			return;
		}
		handler = this.createHandler(handler,"invoke");
		this.inProcHdl.registerSvcHdl(svcId, handler);
	},
	
	/**
	* Gets the service handler registered on a service id. This handler is
	* registered by the function {@link #registerSvcHdl}
	*
	* @param {String} svcId 
	*        A String id represents the service
	* @return {Object} 
	*        A handler registered on this service
	* @see #registerSvcHdl
	*/
	//> public Object getSvcHdl(String svcId);
	getSvcHdl : function (svcId) {
		return this.inProcHdl.getSvcHdl(svcId);
	},

	/**
	* Registers a handler as service-specific request handler in service engine. 
	* The service-specific request handlers will be invoked at the begining of the
	* service process chain. Multiple handlers can be registered as service-specific
	* request handler. All these handlers should populate the message with relevent
	* data the target service will need.
	* 
	* @param {String} svcId 
	*        A String id represents the service
	* @param {Object} handler 
	*        A function to be registered as the service-specific request handler 
	*/
	//> public void registerSvcReqtHdl(String svcId, Object handler);
	registerSvcReqtHdl : function(svcId, handler) {
		if (!svcId || !handler) {
			return;
		}
		// failed to init
		if (!this.svcReqtHdls) {
			this.init();
		}
		if (typeof this.svcReqtHdls[svcId] == "undefined") {
			this.svcReqtHdls[svcId] = [];
		}
		var handlers = this.svcReqtHdls[svcId];
		handlers[handlers.length] = this.createHandler(handler,"handleRequest");
	},

	/**
	* Registers a handler as service-specific response handler in service engine.
	* The service-specific response handlers will be invoked at the end of the
	* service process chain. Multiple handlers can be registered as service-specific
	* response handler. All these handlers should be able to use the data provided
	* by the service.
	*
	* @param {String} svcId 
	*        A String id represents the service
	* @param {Object} handler 
	*        A function to be registered as the service-specific response handler
	*/
	//> public void registerSvcReqtHdl(String svcId, Object handler);
	registerSvcRespHdl : function(svcId, handler) {
		if (!svcId || !handler) {
			return;
		}
		if (typeof this.svcRespHdls[svcId] == "undefined") {
			this.svcRespHdls[svcId] = [];
		}
		var handlers = this.svcRespHdls[svcId];
		handlers[handlers.length] = this.createHandler(handler,"handleResponse");
	},

	/**
	* Registers a handler as global request handler in service engine. The global
	* request handler will have an opportunity to affect any service message that 
	* are sent to the service engine. It will be notified after all
	* service-specific request handlers are invoked.
	*
	* @param {Object} handler 
	*        A function to be registered as the global request handler
	*/
	//> public void registerGlbReqtHdl(Object handler);
	registerGlbReqtHdl : function(handler) {
		if (!handler) {
			return;
		}
		this.glbReqtHdls[this.glbReqtHdls.length] = this.createHandler(handler,"handleRequest");
	},

	/**
	* Registers a handler as global response handler in service engine. The global
	* response handler will have an opportunity to affect any service message that
	* are set to the service engine. It will be notified after all transport 
	* response handlers are invoked.
	*
	* @param {Object} handler 
	*        A function to be registered as the global response handler
	*/
	//> public void registerGlbRespHdl(Object handler);
	registerGlbRespHdl : function(handler) {
		if (!handler) {
			return;
		}
		this.glbRespHdls[this.glbRespHdls.length] = this.createHandler(handler,"handleResponse");
	},

	/**
	* Registers a handler as transport-specific request handler in service engine. 
	* The transport-specific request handler will have an opportunity to affect the
	* service message with the specified transport type. By default, there are two
	* transport-specific request handler, "InProc" is for client, and "Remote" is
	* for remote call. These handlers will be notified after all global request
	* handler are invoked.
	*
	* @param {String} transportType 
	*        A String represents the type of transport
	* @param {Object} handler 
	*        A function to be registered as the transport-specific request handler
	*/
	//> public void registerTrspReqtHdl(String transportType, Object handler);
	registerTrspReqtHdl : function(transportType, handler) {
		if (!transportType || !handler) {
			return;
		}
		if (typeof this.trspReqtHdls[transportType] == "undefined") {
			this.trspReqtHdls[transportType] = [];
		}
		// if not ITransport than use legacy
		if (!vjo.dsf.ServiceRegistry.registerTransport(transportType, handler)) {
			var handlers = this.trspReqtHdls[transportType];
			handlers[handlers.length] = this.createHandler(handler,"handleRequest");
		}
	},
	
	/**
	* Registers a handler as transport-specific response handler in service engine. 
	* The transport-specific response handler will have an opportunity to affect the
	* service message with the specified transport type. These handlers will be 
	* notified at the beginning of the service response phase.
	*
	* @param {String} transportType 
	*        A String represents the type of transport
	* @param {Object} handler 
	*        A function to be registered as the transport-specific response handler
	*/
	//> public void registerTrspReqtHdl(String transportType, Object handler);
	registerTrspRespHdl : function(transportType, handler) {
		if (!transportType || !handler) {
			return;
		}
		if (typeof this.trspRespHdls[transportType] == "undefined") {
			this.trspRespHdls[transportType] = [];
		}
		var handlers = this.trspRespHdls[transportType];
		handlers[handlers.length] = this.createHandler(handler,"handleResponse");
	},
	//> private void err(Message msg, String errorId, String errorMsg);
	err : function(msg, errorId, errorMsg) {
	    if (!msg.response) {
	    	msg.response = new vjo.dsf.ServiceResponse();
		}
	    if (msg.response.addError) {
	    	msg.response.addError(new vjo.dsf.Error(errorId,errorMsg));
	    }
		else {
			// backwards compatibility logic here
			// add ServiceResponse.addError methods
	    	msg.response.addError =  vjo.dsf.ServiceResponse.prototype['addError'];
		    // if non-object response, no place to set response error
		    if (msg.response.addError) {
		    	msg.response.addError(new vjo.dsf.Error(errorId,errorMsg));
		    }
		}
	},
	
	//Helper method, used with code gen
	//> public void register(int pFuncType, String pServiceId, Object pHandler);
	register : function (pFuncType, pServiceId, pHandler) {
		var _s = vjo.dsf.ServiceEngine; //DO NOT change it to 'this'
		switch (pFuncType) { 
			case 0:
				_s.registerSvcHdl(pServiceId, pHandler);
				break;
			case 1:
				_s.registerSvcReqtHdl(pServiceId, pHandler);
				break;
			case 2:
				_s.registerGlbReqtHdl(pServiceId, pHandler);
				break;
			case 3:
				_s.registerTrspReqtHdl(pServiceId, pHandler);
				break;
			case 4:
				_s.registerSvcRespHdl(pServiceId, pHandler);
				break;
			case 5:
				_s.registerGlbRespHdl(pServiceId, pHandler);
				break;
			case 6:
				_s.registerTrspRespHdl(pServiceId, pHandler);
				break;
		}
	}	
})
.inits(function(){
	this.init();
})
.endType();

/**
* A class contains utilities used to handle DOM elements. The functions in this 
* class encapsulate frequently used JavaScript attributes and functions, and 
* make them compatible in most popular browsers.
*/
vjo.ctype("vjo.dsf.Element")
.props({
	/**
	* Gets the DOM element object with a given id. 
	*
	* @param {String} id 
	*        A string id of the DOM element
	* @return {String}
	*        The DOM element with the given id
	*/
	//> public Object get(String);
	get : function(psId) {
		return document.getElementById(psId);
	},
	
	/**
	* 
	* Specifies whether or not a DOM element should be displayed. This function 
	* uses the <code>style.display</code> property. If the element is not 
	* displayed, it does not affect the page layout.
	*
	* @param {String} id 
	*        A String id of the DOM element to be shown/hidden
	* @param {boolean} display 
	*        A boolean value representing whether or not to show the element
	* @see   vjo.dsf.Element.toggleVisibility
	*/
	//> public void toggleHideShow(String,boolean);
	//> public void toggleHideShow(String);
	toggleHideShow : function(psId, pbDisplay) {
		var e = this.get(psId), s, d, u = "undefined";
		if (e)
		{
			s = e.style;
			d = s.display;
			if (typeof(pbDisplay)===u)
			{
				pbDisplay = (d === "" || d === "block") ? false : true;
			}
			e.bIsShown = pbDisplay;
			s.display = (pbDisplay) ? "block" : "none";
		}	
	},
	
	/**
	* Appends a specified DOM element to the <code>BODY</code> element. 
	*
	* @param {String} id 
	*        A String id of the DOM element
	*/
	//> public void promoteToBody(String);
	promoteToBody : function(psId) {
		var e = this.get(psId), b = document.body;
		if(e && b && e.parentNode && (e.parentNode !== b)){
			e.parentNode.removeChild(e);
			b.appendChild(e);
		}
	},
	
	/**
	* Specifies whether or not a DOM element should be visible. This function 
	* uses the <code>style.visibility</code> property. Making the element 
	* invisible will affect the layout.
	*
	* @param {String} id 
	*        A String id of the DOM element
	* @param {boolean} display 
	*        A boolean value representing whether or not the element should be 
	*        visible
	* @see   vjo.dsf.Element.toggleVisibility
	*/
	//> public void toggleVisibility(String,boolean);
	//> public void toggleVisibility(String);
	toggleVisibility : function(psId, pbVisible) {
		var e = this.get(psId), v, s, u = "undefined";
		if (e)
		{
			s = e.style;
			v = s.visibility;
			if (typeof(pbVisible)===u)
			{
				pbVisible = (v === "") ? false : true;
			}
			
			e.bIsVisible = pbVisible;
			s.visibility = (pbVisible) ? "" : "hidden";
		}
	},
	
	/**
	* Sets a DOM element whther or not to be enable. If the element is disabled,
	* no action would be invoked by any event on it.
	*
	* @param {String} id 
	*        A String id of the DOM element
	* @param {boolean} enable 
	*        A boolean value representing whether or not the element should be 
	*        enable
	*/
	//> public void enable(String,boolean);
	enable : function(psId, pbEnable) {
		var e = this.get(psId);
		if (e)
			e.disabled = !pbEnable;
	},
	
	/**
	* Sets how far the left edge of an element is to the right of the left edge 
	* of the parent element.
	*
	* @param {String} id 
	*        A String id of the DOM element
	* @param {String} left 
	*        A String that represents the number of the left offset
	* @return {String} 
	*        A String that represents the number of the left offset which is 
	*        same as the parameter <code>left</code>
	*/
	//> public String left(String,String);
	left : function(psId, psLeft) {
		return this.setLTWH(psId, psLeft, "Left");
	},

	/**
	* Sets how far the top edge of an element is above the top edge of the 
	* parent element.
	*
	* @param {String} id 
	*        A String id of the DOM element
	* @param {String} top 
	*        A String represents the number of the top offset
	* @return {String} 
	*        A String represents the number of the top offset which is same as 
	*        the parameter <code>top</code>
	*/
	//> public String top(String,String);
	top : function(psId, psTop)	{
		return this.setLTWH(psId, psTop, "Top");
	},
	
	/**
	* Sets the width of the element.
	*
	* @param {String} id 
	*        A String id of the DOM element
	* @param {String} width 
	*        A String that represents the number of the width
	* @return {String} 
	*        A String that represents the number of the width which is same as 
	*        the parameter <code>width</code>
	*/
	//> public String width(String,String);
	width : function(psId, psWidth)	{
		return this.setLTWH(psId, psWidth, "Width");
	},
	
	/**
	* Sets the height of the element.
	*
	* @param {String} id 
	*        A String id of the DOM element
	* @param {String} height 
	*        A String that represents the number of the height 
	* @return {String} 
	*        A String that represents the number of the height which is same as 
	*        the parameter <code>height</code>
	*/
	//> public String height(String,String);
	height : function(psId, psHeight) {
		return this.setLTWH(psId, psHeight, "Height");
	},
		
	//> protected String top(String,String,String);
	setLTWH : function(psId, psVal, psName) {
		var e = this.get(psId);
		if (e)
		{
			if ((psVal != null) && !isNaN(parseInt(psVal)))
				e.style[psName.toLowerCase()] = psVal;
			return e["offset" + psName];
		}
	},
	
	/**
	* Creates a DOM element with the given name.
	* 
	* @param {String} name 
	*        A String name of the created element
	* @return {Object} 
	*        Newly created DOM element
	*/
	//> public Object createElement(String);
	createElement : function(name) {
		return document.standardCreateElement?document.standardCreateElement(name):document.createElement(name);//<@SUPRESSTYPECHECK
	},

	/**
	* Checks whether a DOM element is in the specified container.
	* 
	* @param {Object} container 
	*        A DOM element as the container
	* @param {Object} element 
	*        The DOM element to be checked
	* @return {boolean} 
	*        True if the element's parent is the specified container.
	*/
	// public boolean createElement(Object, Object);
	containsElement : function(container,element) {
		while ((element != null) && (element != container) && (element.parentNode != null)) { element = element.parentNode; }
		return (element == container);
	},

	/**
	* Returns a DOM elements with the specified tag name and class style. If 
	* multiple elements are matched, returns the first element. If no such 
	* element is found, returns <code>null</code>. 
	* 
	* @param {Object} element 
	*        An element from where the search should start. Only the descendants 
	*        of this element are included in the search, but not the element 
	*        itself 	
	* @param {String} tagName 
	*        A tag name to be searched
	* @param {String} className 
	*        A class name the element to be applied
	* @return {Object} 
	*        The first matched element. if nothing is found, returns 
	*        <code>null</code>
	* @see   #getElementsByTagClass
	*/
	//> public Object getElementByTagClass(Object, String, String);
	getElementByTagClass : function(element,tag,name) {
		var tags = element.getElementsByTagName(tag);
		for (var ndx = 0;((ndx < tags.length) && (tags[ndx].className.match(name) == null));ndx++);
		return (ndx < tags.length)?tags[ndx]:null;
	},

	/**
	* Returns a collection of DOM elements with the specified tag name and class 
	* style. If no such element are found, returns an empty collection.
	* 
	* @param {Object} element 
	*        An element from where the search should start. Only the descendants 
	*        of this element are included in the search, but not the element 
	*        itself 	
	* @param {String} tagName 
	*        A tag name to be searched
	* @param {String} className 
	*        A class name the element to be applied
	* @return {Object} 
	*        The array containing all found object elements. If nothing is 
	*        found, returns an empty array.
	* @see   #getElementByTagClass
	*/
	//> public Object getElementsByTagClass(Object, String, String);
	getElementsByTagClass : function(element,tag,name) {
		var elements = new Array();
		var tags = element.getElementsByTagName(tag);
		for (var ndx = 0;(ndx < tags.length);ndx++) {
			if (tags[ndx].className.match(name)) elements.push(tags[ndx]);
		}
		return elements;
	},
	//> public void toggleHideShowRow(String,boolean);
	//> public void toggleHideShowRow(String);
	toggleHideShowRow : function(psId, pbDisplay) {
		var e = this.get(psId), ua = navigator.userAgent.toLowerCase(), s, d, u = "undefined",
		p = (ua.indexOf('firefox')!=-1)?"table-row":"block";
		if (e)
		{
			s = e.style;
			d = s.display;
			if (typeof(pbDisplay)===u)
			{
				pbDisplay = (d === "" || d === p) ? false : true;
			}
			e.bIsShown = pbDisplay;
			s.display = (pbDisplay) ? p : "none";
		}	
	}
})
.endType();




/**
* Manages, dispatches, and cleans up all DOM events created in V4. 
* <code>EventDispatcher</code> is a <code>singleton</code>. You can access 
* <code>EventDispatcher<code> directly, via <code>vjo.dsf.EventDispatcher</code>.
*/
vjo.ctype('vjo.dsf.EventDispatcher')
.needs(['vjo.dsf.Event',
        'vjo.dsf.ServiceEngine',
        'vjo.dsf.Element'])
.props({
	eventHandlers : {},
	nativeEventHandlers : {},
	unboundElems : [],
	fCustomLoad : {},
	
	/**
	* Invokes the handlers registered on an event of a given DOM element in 
	* sequence. If the handler returns a <code>Message</code> object, this 
	* function will put them into <code>ServiceEngine</code>.
	*
	* @param {String} srcId 
	*        A String id that represents the DOM element
	* @param {Object} event 
	*        A <code>Event</code> object that represents the triggered event
	* @return {Object} 
	*        The return value depends on the different conditions as listed 
	*        below:
	*        <ul>
	*         <li>true - If no handler is registered on this event or, all 
	*             handlers return <code>Message</code> object and the 
	*             propagation is not stopped during the process.
	*         </li>
	*         <li>false - If the propagation is stopped during the process.
	*         </li>
	*         <li>Object - It's the last non-<code>Message</code> object 
	*             returned by a handler, and the propagation is not stopped 
	*             after that handler's execution.
	*		  </li>
	*        </ul>
	*        To stop the propagation, you can set the value of the 
	*        <code>returnData</code> defined in <code>Message</code> object as 
	*        <code>false</code>.
	*/
	//> public Object process(String, Object);
	process : function(srcId, event) {
		var eventHandlersPerSrc = this.eventHandlers[srcId];
		if (!eventHandlersPerSrc) {
			return true;
		}
	
		var handlers = eventHandlersPerSrc[event.eventType];
		if (!handlers) {
			return true;
		}
	
		var returnData, len = handlers.length;
	
		for (var i = 0; i < len; i++) {
			var message = handlers[i].handle(event);
			if (message && message.objType == "dsf_Message") {
				if (this.vj$.ServiceEngine) {//make async
					//var cb = this.createRequest(message);
					//window.setTimeout(cb,1);
					this.vj$.ServiceEngine.handleRequest(message);
				}
				if (message.returnData===false) {
					returnData = false;
				}
			} else if (returnData!=false && typeof message != 'undefined') { //do not ovveride false
				returnData = message;
			} 
		}
			
		return returnData;	
	},
	
	/**
	* Registers a handler on an event of a given DOM element into the internal 
	* registry. Calling this function will not cause the occurence of the event 
	* to trigger its handler. To safely register the handler so that it can be 
	* triggered by the occurence of the event, use {@link #add}.
	*
	* @param {String} id 
	*        A String id of the DOM element 
	* @param {String} eventType 
	*        A string that represents the type of the event
	* @param {Object} handler 
	*        The handler function to be registered
	* @param {Object} scope 
	*        A scope that the handler function belongs to
	* @return {Object} 
	*        The registered handler function or <code>EventDispatcher</code>
	*        itself if the handler is not a valid  function
	* @see   #add	
	*/
	//> public Object register(String, String, Object, Object);
	register : function(id, eventType, handler, scope) {
		if (!id || !eventType || !handler) {
			return this;
		} else {
			if (typeof handler.handle != 'function') {
				if (typeof handler == 'function') {
					var func = handler, scp = scope || this;
					var obj = {handle:function () {
						return func.apply(scp,arguments);
					}};
					handler = obj;
				} else {
					return this;
				}
			}
		}
		
		var handlers = this.eventHandlers[id];
		if (!handlers) {
			handlers = this.eventHandlers[id] = {};
		}
		if (!handlers[eventType]) {
			handlers[eventType] = [];
		}
		var len = handlers[eventType].length;
		handlers[eventType][len] = handler;
		return handler;
	},
	
	/**
	* Removes all handlers from an event of a DOM element from the internal VJO
	* registry. If {@link #add} or {@link #addEventListener} was used to 
	* register the handler, the handler may still be attached on the event even 
	* after calling this function. In that case, use {@link #detachHandler} to 
	* safely remove all handlers attached to the specified element and event.
	*
	* @param {String} id 
	*        A String id of the DOM element 
	* @param {String} eventType 
	*        A string represents the event type
	* @see   #add
	* @see   #addEventListener
	* @see   #detachHandlers	
	*/
	//> public void unregister(String, String);
	unregister : function (id,eventType) {
		if (!this.eventHandlers[id]) {
			return;
		}
		//clear handlers
		//this.eventHandlers[id][eventType] = [];
		delete this.eventHandlers[id][eventType];
	},
	
	//> private void registerNative(Object, String, Object);
	registerNative : function(elem, eventType, handler) {
		var id = (elem==window) ? "body" : elem.id;
		var handlers = this.nativeEventHandlers[id];
		if (!handlers) {
			handlers = this.nativeEventHandlers[id] = {};
		}
		if (!handlers[eventType]) {
			handlers[eventType] = [];
		}
		var len = handlers[eventType].length;
		handlers[eventType][len] = handler;
	},
	
	/**
	* Adds a handler on an event of a given DOM element. A {@link vjo.dsf.Event}
	* object will be passed to the handler function as the first parameter after
	* the event is triggered. 
	*
	* @param {String} id 
	*        A String id of the DOM element 
	* @param {String} eventType 
	*        A string that represents the type of the event
	* @param {Object} handler 
	*        A handler function to be added to the event of the DOM element
	* @param {Object} scope 
	*        A scope that the handler function belongs to
	* @return {Object} 
	*        The added handler function or EventDispatcher itself if the handler 
	*        is not a function
	* @see   vjo.dsf.Event
	*/
	//> public Object add(String, String, Object, Object);
	add : function(id, eventType, handler, scope) {
		if (!id || !eventType || !handler) {
			return this;
		} 
		var b = this.isBound(id,eventType),
		rv = this.register(id, eventType, handler, scope);
		if (!b) {
			b = this.bind(id, eventType);
			if (b===null) {
				this.unboundElems[this.unboundElems.length] = id;		
			}
		}
		return rv;
	},
	
	/**
	* Attaches a handler on an event of a given DOM element. The handler will 
	* not be registered to the internal VJO registry. No messages will be 
	* emitted to the <code>ServiceEngine</code> if using this function to 
	* register the handler. Use {@link #add} for complete registration.
	*
	* @param {Object} elem 
	*        A DOM element object
	* @param {String} eventType 
	*        A string that represents the type of the event
	* @param {Object} handler 
	*        A handler function to be attached to the event of the DOM element
	* @param {Object} scope 
	*        A scope that the handler function belongs to
	* @param {boolean} capture 
	*        A boolean value representing whether or not to attach the handler
	*        on event capture flow. This parameter is invalid in IE browsers
	* @return {Object} 
	*        Returns the handler function if successfully attached to an 
	*        element. Otherwise, return <code>false</code>.
	* @see   #add
	*/
	//> public Object addEventListener(HTMLElement, String, Object, Object, boolean);
	//> public Object addEventListener(HTMLElement, String, Object, Object);
	//> public Object addEventListener(Window, String, Object, Object);
	//> public Object addEventListener(String, String, Object, Object);
	addEventListener : function(elem,type,listener,scope,capture) {  
		var scp = scope || vjo.global;
		if (typeof elem == 'string') {
			elem = this.vj$.Element.get(elem);
		}
		if (!elem) {
			return false;
		}
		var func = function (event) {
			var ev = event || window.event;
			var rv = listener.call(scp,ev);
			if (rv===false) {
				vjo.dsf.EventDispatcher.stopEvent(ev);
			}
			if (typeof rv != 'undefined') {
				return rv;
			}
		};
		if (window.addEventListener) {
			elem.addEventListener(type,func,capture||false); 
			this.registerNative(elem,type,func);
			return func;
		} else if (window.attachEvent) {
			elem.attachEvent("on" + type,func); 
			this.registerNative(elem,type,func);
			return func;
		}
		elem["on"+type] = func;
		return false;
	},
	
	/**
	* Binds all handlers registered on the internal VJO registry  to an event of 
	* a DOM element. The function {@link #register} is used to register the 
	* handlers to the internal VJO registry. This function is used after the 
	* handlers are registered. The function {@link #add} covers both two 
	* functions.
	*
	* @param {String} id
	*        A String id of  the DOM element
	* @param {String} eventType
	*        A string that represents the type of the event
	* @return {Object} 
	*        The EventDispatcher itself. If the DOM element to be bound doesn't 
	*        exist, it will return <code>null</code>
	* @see   #add
	* @see   #register
	*/
	//> public Object bind(String, String);
	bind : function (id, eventType) {
		var element = this.vj$.Element.get(id);
		if (id == "body" || element == document.body) {
			element = document.body;
			if (eventType == "load" || eventType == "unload") {
				var rv = this.addEventListener(window,eventType,
						function (event) {
							var oED = vjo.dsf.EventDispatcher;
							if (typeof oED.fCustomLoad[eventType] == 'function') {
								oED.fCustomLoad[eventType]();
							}
							oED.run(document.body, event || window.event, eventType);
							oED.unregister("body",eventType);
							oED.fCustomLoad = {};
						});
				if (rv===false) {//older browser compatibility
					if (element.vjLoadSet) {
						return this;
					} else {
						element.vjLoadSet = true;
						//store custom onload handlers
						var customLoad = window["on"+eventType] || "";
						if (customLoad) {
							this.fCustomLoad[eventType] = customLoad;
						}
					}
				}
				return this;
			}
		} 
		
		if (element) { //only attach if element exists
			this.addEventListener(element, eventType, this.notifier, element); //pass element so that this works
			return this;
		}
		return null;
	},
	
	
	//> private Object notifier(Object, String);
	notifier : function(event, eventType){
		//return vjo.dsf.EventDispatcher[eventType](this, event || window.event);
		return vjo.dsf.EventDispatcher.run(this, event || window.event, eventType);
	},
	
	/**
	* Re-binds all handlers to an event of a DOM element if a new handler is 
	* regiestered.
	* 
	*/
	//> public void reBind();
	reBind : function () {
		var eH = this.eventHandlers, uE = this.unboundElems, 
		len = uE.length, tmp = [];
		
		for (var i=0; i<len; i++) {
			var id = uE[i], hdls = eH[id];
			if (hdls) {
				for (var type in hdls) {
					if (!this.hasBinding(id,type)) {
						var rv = this.bind(id,type);
						if (rv===null) {
							tmp[tmp.length] = id;
						}
					}
				}
			}
		}
		this.unboundElems = tmp;
	},
	
	/**
	* Returns true if a specified event of a DOM element has at least one 
	* handler.
	*
	* @param {String} id 
	*        A String id of the DOM element
	* @param {String} type 
	*        A string that represents the type of the event 
	* @return {boolean} 
	*        True if a specified event of a DOM element has at least one handler
	*/
	//> public boolean isBound(String, String);
	isBound : function (id,type) {
		var handlers = this.eventHandlers[id];
		return (handlers && handlers[type] && handlers[type].length>0);
	},
	
	//> private boolean hasBinding(String, String);
	hasBinding : function (id,type) {
		var nEH = this.nativeEventHandlers;
		if (nEH[id] && nEH[id][type]) {
			var aH = nEH[id][type], len = aH.length, rv = false;
			for (var i = 0; i<len; i++) {
				var str = aH[i].toString();
				if (str && str.indexOf('vjo.dsf.EventDispatcher')!=-1) {
					return true;
				}
			}
		}
		return false;
	},
	
	/**
	* Removes a handler from an event of a given DOM element. It cannot remove
	* the handler from the internal VJO registry. Use {@link #detachHandlers}
	* for full detaching of the handler.
	*
	* @param {Object} elem 
	*        A DOM element object
	* @param {String} eventType 
	*        A string that represents the type of the event
	* @param {Object} handler 
	*        A handler function to be removed
	* @see   #detachHandlers
	*/
	//> public void removeEventListener(Object, String, Object)
	removeEventListener : function(elem,type,listener) { 
		if (!elem || !type) {
			return;
		} else if (typeof elem == 'string') {
			elem = this.vj$.Element.get(elem);
		}
		if (window.addEventListener && listener) {
			elem.removeEventListener(type,listener,false); 
		}
		else if (window.attachEvent && listener) {
			elem.detachEvent("on" + type,listener); 
		}
		else {
			elem["on"+type] = null;
		}
	},
	
	/**
	* Removes all handler from an event of a given DOM element. It cannot remove
	* the handlers from the internal VJO registry. Use {@link #detachHandlers}
	* for full detaching of the handlers.
	*
	* @param {Object} elem 
	*        A DOM element object
	* @param {String} eventType 
	*        A string that represents the type of the event
	* @param {Object} handler The handler function to be removed
	* @see   #detachHandlers
	*/
	//> public void detachNativeHandlers(Object, String);
	detachNativeHandlers : function (elem,type) {
		var id = (elem==window) ? "body" : elem.id;
		var handlers = this.nativeEventHandlers[id];
		if (handlers && handlers[type]) {
			var h = handlers[type], len = h.length;
			for (var i=0; i<len; i++) {
				this.removeEventListener(elem,type,handlers[type][i]);
			}
			//handlers[type] = [];
			delete handlers[type];
		} 
	},

	/**
	* Detaches a handler on an event of a given DOM element in the internal VJO 
	* registry. The handler will still be triggered by the specified event. Use 
	* {@link #detachHandlers} to safely detach all the handlers. 
	*
	* @param {Object} elem 
	*        A DOM element object
	* @param {String} eventType 
	*        A string that represents the type of the event
	* @param {Object} handler 
	*        The handler function to be removed
	* @see #detachHandlers
	*/
	//> public void detachhandler(String, String, Object);
	detachHandler : function(id, eventType, handler) {
		var handlers = this.eventHandlers[id];
		if (!handlers || !handlers[eventType]) {
			return;
		}
		var h = [], len = handlers[eventType].length;
		for (var i=0; i<len; i++) {
			if (handler != handlers[eventType][i]) {
				h[h.length] = handlers[eventType][i];
			}
		}
		this.eventHandlers[id][eventType] = h;
		
	},

	/**
	* Detaches all handlers bound on an event of a DOM element.
	*
	* @param {Object} elem 
	*        A DOM element object
	* @param {String} eventType 
	*        A string that represents the type of the event
	*/
	//> public void detachHandlers(String, String);
	detachHandlers : function(id, eventType) {
		this.unregister(id,eventType);
		var element = this.vj$.Element.get(id);
		if (id == "body") {
			element = window;
		} 
		
		if (element) {
			this.detachNativeHandlers(element,eventType);
		}
	},
	
	/**
	* Stops any action on an event. This function will stop both the propagation 
	* flow and the event itself.
	*
	* @param {Object} evt 
	*        An event object 
	*/
	//> public void stopEvent(Object);
	stopEvent : function (e) {
		this.stopPropagation(e);
		this.preventDefault(e);
	},
	
	/**
    * Stops executing all remaining handlers on the propagation flow.
    * 
	* @param {Object} evt 
	*        An event object
    */
	//> public void stopPropagation(Object);
	stopPropagation: function(e) {
        if (e.stopPropagation) {
            e.stopPropagation();
        } else {
            e.cancelBubble = true;
        }
    },
    
    /**
    * Cancels the event if it is cancelable.
    * 
	* @param {Object} evt 
	*        An event object
    */
    //> public void preventDefault(Object);
    preventDefault: function(e) {
        if (e.preventDefault) {
            e.preventDefault();
        } else {
            e.returnValue = false;
        }
    },
    
    /**
    * Gets the target element for an event.
    *
	* @param {Object} evt 
	*        An event object
    */
    //> public HTMLElement target(Object);
    target : function(event) { 
		return this.resolveTextNode((event.target)?event.target:event.srcElement);
	},

	currentTarget : function(event) { 
		return this.resolveTextNode((event.currentTarget)?event.currentTarget:event.srcElement);
	},

	/**
    * Gets the secondary target element for an event. Only 'mouseover'
    * and 'mouseout' have this target.
    *
	* @param {Object} evt 
	*        An event object
    */
	//> public HTMLElement relatedTarget(Object);
	relatedTarget : function(event) { 
		if (event.relatedTarget) 
			return this.resolveTextNode(event.relatedTarget);
		else if ((event.type === "mouseover") && event.fromElement) 
			return this.resolveTextNode(event.fromElement);
		else if ((event.type === "mouseout") && event.toElement) 
			return this.resolveTextNode(event.toElement);
		return null;		
	},

	//> private HTMLElement resolveTextNode(Object);
	resolveTextNode : function(node) {
		return (node && (node.nodeType == 3))?node.parentNode:node;
	},
	
	//> private void cleanUp();
	cleanUp : function () {
		var handlers = this.nativeEventHandlers;
		for (var id in handlers) {
			for (var ev in handlers[id]) {
				if (ev!='unload') {//keep unload handlers
					this.detachHandlers(id,ev);	
				}
			}
		}
	},
	
	/**
	 * Detaches all handlers bound on an event of a DOM element.
	 *
	 * @param {Object} elem
	 *        A DOM element object
	 * @param {String} eventType
	 *        A string that represents the type of the event
	*/
	//>public void detachAllElemHandlers(Object, String)
	detachAllElemHandlers : function(elem, eventType){
		 if (!elem) return;

		 if (elem.id){
			 this.unregister(elem.id, eventType);
			 if (elem.id == "body") {
				 elem = window;
			 }
		 }
		 this.detachNativeHandlers(elem, eventType);
	 },

	//> private String getId(Object);
	//> private String getId(Object, String);
	getId : function(src, id) {
		return (id === null || !id)?src.id:id;
	},
	
	//> private String getBodyId(Object);
	//> private String getBodyId(Object, String);
	getBodyId : function(src, id) {
	    var srcId = this.getId(src, id);
	    if (!srcId || src == document.body) {
	        srcId = "body";
	    }
	    return srcId;
	},
	
	/**
	* Executes all registered handlers associated with given DOM element on 
	* <code>unload</code> event. This function has been deprecated, 
	* you can use {@link #run} instead.
	*
	* @deprecated 
	* @param {Object} src 
	*        A DOM element the handlers registed on
	* @param {Object} event 
	*        Browser's native event of the triggered event
	* @return {Object} 
	*        The result of the handlers 
	* @see   #run
	*/
	//> public Object unload(Object, Object);
	unload : function(src, pEvent) {
		return this.process(this.getBodyId(src), new vjo.dsf.Event(src, 'unload', pEvent));
	},
		
	/**
	* Executes all registered handlers associated with given DOM element on 
	* <code>change</code> event. This function has been deprecated, 
	* you can use {@link #run} instead.
	*
	* @deprecated 
	* @param {Object} src 
	*        A DOM element the handlers registed on
	* @param {Object} event 
	*        Browser's native event of the triggered event
	* @return {Object} 
	*        The result of the handlers 
	* @see   #run
	*/
	//> public Object change(Object, Object);
	change : function(src, pEvent) {
		return this.process(this.getId(src), new vjo.dsf.Event(src, 'change', pEvent));
	},
	
	/**
	* Executes all registered handlers associated with given DOM element on 
	* <code>submit</code> event. This function has been deprecated, 
	* you can use {@link #run} instead.
	*
	* @deprecated 
	* @param {Object} src 
	*        A DOM element the handlers registed on
	* @param {Object} event 
	*        Browser's native event of the triggered event
	* @return {Object} 
	*        The result of the handlers 
	* @see   #run
	*/
	//> public Object submit(Object, Object);
	submit : function(src, pEvent) {
		return this.process(this.getId(src), new vjo.dsf.Event(src, 'submit', pEvent));
	},
	
	/**
	* Executes all registered handlers associated with given DOM element on 
	* <code>reset</code> event. This function has been deprecated, 
	* you can use {@link #run} instead.
	*
	* @deprecated 
	* @param {Object} src 
	*        A DOM element the handlers registed on
	* @param {Object} event 
	*        Browser's native event of the triggered event
	* @return {Object} 
	*        The result of the handlers 
	* @see   #run
	*/
	//> public Object reset(Object, Object);
	reset : function(src, pEvent) { 
		return this.process(this.getId(src), new vjo.dsf.Event(src, 'reset', pEvent));
	},
	
	/**
	* Executes all registered handlers associated with given DOM element on 
	* <code>select</code> event. This function has been deprecated, 
	* you can use {@link #run} instead.
	*
	* @deprecated 
	* @param {Object} src 
	*        A DOM element the handlers registed on
	* @param {Object} event 
	*        Browser's native event of the triggered event
	* @return {Object} 
	*        The result of the handlers 
	* @see   #run
	*/
	//> public Object select(Object, Object);
	select : function(src, pEvent) { 
		return this.process(this.getId(src), new vjo.dsf.Event(src, 'select', pEvent));
	},
	
	/**
	* Executes all registered handlers associated with given DOM element on 
	* <code>blur</code> event. This function has been deprecated, 
	* you can use {@link #run} instead.
	*
	* @deprecated 
	* @param {Object} src 
	*        A DOM element the handlers registed on
	* @param {Object} event 
	*        Browser's native event of the triggered event
	* @return {Object} 
	*        The result of the handlers 
	* @see   #run
	*/
	//> public Object blur(Object, Object);
	blur : function(src, pEvent) { 
		return this.process(this.getId(src), new vjo.dsf.Event(src, 'blur', pEvent));
	},
	
	/**
	* Executes all registered handlers associated with given DOM element on 
	* <code>focus</code> event. This function has been deprecated, 
	* you can use {@link #run} instead.
	*
	* @deprecated 
	* @param {Object} src 
	*        A DOM element the handlers registed on
	* @param {Object} event 
	*        Browser's native event of the triggered event
	* @return {Object} 
	*        The result of the handlers 
	* @see   #run
	*/
	//> public Object focus(Object, Object);
	focus : function(src, pEvent) { 
		return this.process(this.getId(src), new vjo.dsf.Event(src, 'focus', pEvent));
	},
	
	
	/**
	* Executes all registered handlers associated with given DOM element on 
	* <code>keydown</code> event. This function has been deprecated, 
	* you can use {@link #run} instead.
	*
	* @deprecated 
	* @param {Object} src 
	*        A DOM element the handlers registed on
	* @param {Object} event 
	*        Browser's native event of the triggered event
	* @return {Object} 
	*        The result of the handlers 
	* @see   #run
	*/
	//> public Object keydown(Object, Object);
	keydown : function(src, pEvent) { 
		return this.process(this.getBodyId(src), new vjo.dsf.Event(src, 'keydown', pEvent));
	},
	
	/**
	* Executes all registered handlers associated with given DOM element on 
	* <code>keypress</code> event. This function has been deprecated, 
	* you can use {@link #run} instead.
	*
	* @deprecated 
	* @param {Object} src 
	*        A DOM element the handlers registed on
	* @param {Object} event 
	*        Browser's native event of the triggered event
	* @return {Object} 
	*        The result of the handlers 
	* @see   #run
	*/
	//> public Object keypress(Object, Object);
	keypress : function(src, pEvent) { 
		return this.process(this.getBodyId(src), new vjo.dsf.Event(src, 'keypress', pEvent));
	},
	
	/**
	* Executes all registered handlers associated with given DOM element on 
	* <code>keyup</code> event. This function has been deprecated, 
	* you can use {@link #run} instead.
	*
	* @deprecated 
	* @param {Object} src 
	*        A DOM element the handlers registed on
	* @param {Object} event 
	*        Browser's native event of the triggered event
	* @return {Object} 
	*        The result of the handlers 
	* @see   #run
	*/
	//> public Object keyup(Object, Object);
	keyup : function(src, pEvent) { 
		return this.process(this.getBodyId(src), new vjo.dsf.Event(src, 'keyup', pEvent));
	},
	
	
	/**
	* Executes all registered handlers associated with given DOM element on 
	* <code>click</code> event. This function has been deprecated, 
	* you can use {@link #run} instead.
	*
	* @deprecated 
	* @param {Object} src 
	*        A DOM element the handlers registed on
	* @param {Object} event 
	*        Browser's native event of the triggered event
	* @return {Object} 
	*        The result of the handlers 
	* @see   #run
	*/
	//> public Object click(Object, Object);
	click : function(src, pEvent) {
		return this.process(this.getBodyId(src), new vjo.dsf.Event(src, 'click', pEvent));
	},
	
	/**
	* Executes all registered handlers associated with given DOM element on 
	* <code>dblclick</code> event. This function has been deprecated, 
	* you can use {@link #run} instead.
	*
	* @deprecated 
	* @param {Object} src 
	*        A DOM element the handlers registed on
	* @param {Object} event 
	*        Browser's native event of the triggered event
	* @return {Object} 
	*        The result of the handlers 
	* @see   #run
	*/
	//> public Object dblclick(Object, Object);
	dblclick : function(src, pEvent) {
		return this.process(this.getBodyId(src), new vjo.dsf.Event(src, 'dblclick', pEvent));
	},
	
	/**
	* Executes all registered handlers associated with given DOM element on 
	* <code>mousedown</code> event. This function has been deprecated, 
	* you can use {@link #run} instead.
	*
	* @deprecated 
	* @param {Object} src 
	*        A DOM element the handlers registed on
	* @param {Object} event 
	*        Browser's native event of the triggered event
	* @return {Object} 
	*        The result of the handlers 
	* @see   #run
	*/
	//> public Object mousedown(Object, Object);
	mousedown : function(src, pEvent) {
		return this.process(this.getBodyId(src), new vjo.dsf.Event(src, 'mousedown', pEvent));
	},
	
	/**
	* Executes all registered handlers associated with given DOM element on 
	* <code>mousemove</code> event. This function has been deprecated, 
	* you can use {@link #run} instead.
	*
	* @deprecated 
	* @param {Object} src 
	*        A DOM element the handlers registed on
	* @param {Object} event 
	*        Browser's native event of the triggered event
	* @return {Object} 
	*        The result of the handlers 
	* @see   #run
	*/
	//> public Object mousemove(Object, Object);
	mousemove : function(src, pEvent) {
		return this.process(this.getBodyId(src), new vjo.dsf.Event(src, 'mousemove', pEvent));
	},
	
	/**
	* Executes all registered handlers associated with given DOM element on 
	* <code>mouseout</code> event. This function has been deprecated, 
	* you can use {@link #run} instead.
	*
	* @deprecated 
	* @param {Object} src 
	*        A DOM element the handlers registed on
	* @param {Object} event 
	*        Browser's native event of the triggered event
	* @return {Object} 
	*        The result of the handlers 
	* @see   #run
	*/
	//> public Object mouseout(Object, Object);
	mouseout : function(src, pEvent) {
		return this.process(this.getBodyId(src), new vjo.dsf.Event(src, 'mouseout', pEvent));
	},
	
	/**
	* Executes all registered handlers associated with given DOM element on 
	* <code>mouseover</code> event. This function has been deprecated, 
	* you can use {@link #run} instead.
	*
	* @deprecated 
	* @param {Object} src 
	*        A DOM element the handlers registed on
	* @param {Object} event 
	*        Browser's native event of the triggered event
	* @return {Object} 
	*        The result of the handlers 
	* @see   #run
	*/
	//> public Object mouseover(Object, Object);
	mouseover : function(src, pEvent) {
		return this.process(this.getBodyId(src), new vjo.dsf.Event(src, 'mouseover', pEvent));
	},
	
	/**
	* Executes all registered handlers associated with given DOM element on 
	* <code>mouseup</code> event. This function has been deprecated, 
	* you can use {@link #run} instead.
	*
	* @deprecated 
	* @param {Object} src 
	*        A DOM element the handlers registed on
	* @param {Object} event 
	*        Browser's native event of the triggered event
	* @return {Object} 
	*        The result of the handlers 
	* @see   #run
	*/
	//> public Object mouseup(Object, Object);
	mouseup : function(src, pEvent) {
		return this.process(this.getBodyId(src), new vjo.dsf.Event(src, 'mouseup', pEvent));
	},	

	//> public Object contextmenu(Object, Object);
	contextmenu : function(src, pEvent) {
		return this.process(this.getBodyId(src), new vjo.dsf.Event(src, 'contextmenu', pEvent));
	},	
		
	/**
	* Executes all registered handlers associated with given DOM element on 
	* <code>load</code> event. This function has been deprecated, 
	* you can use {@link #run} instead.
	*
	* @deprecated 
	* @param {Object} src 
	*        A DOM element the handlers registed on
	* @param {Object} event 
	*        Browser's native event of the triggered event
	* @return {Object} 
	*        The result of the handlers 
	* @see   #run
	*/
	//> public Object load(Object, Object);
	load : function(src, pEvent) {
		return this.run(src, pEvent, 'load');
	},
	
	/**
	* Executes all registered handlers associated with given DOM element and 
	* event. The handlers registed on <code>body</code> for the 
	* <code>load</code> event will be removed when this function is first 
	* executed. It will make sure that the handler for <code>load</code> will be 
	* executed once and only once.
	*
	* @param {Object} src 
	*        A DOM element the handlers are registed on
	* @param {Object} event 
	*        Browser's native event object of the triggered event
	* @param {String} eventType 
	*        A string representing the event type
	* @return {Object}
	*        The result of the handlers 
	*/
	//> public Object run(Object, Object, String);
	run : function (src, pEvent, eventType) {
		var et = eventType || pEvent.type;
		var id = this.getBodyId(src);
		var vEvt = new vjo.dsf.Event(src, et, pEvent);
		var rv = this.process(id, vEvt);
		if (et==='load' && id==='body') {
			this.unregister('body', 'load'); 
		}
		return rv;
	}
	
})
.inits(function() {
	//must cleanup on page unload	
	vjo.dsf.EventDispatcher.addEventListener(window,'load',function(){
		vjo.dsf.EventDispatcher.addEventListener(window,'unload',function(){
			vjo.dsf.EventDispatcher.cleanUp();
		});
	});
})
.endType();
/**
* Adds/gets the argument pairs to the request url.
*/
vjo.ctype("vjo.dsf.utils.URL")
.props({
	/**
	* Adds argument to the URL string. If there are already arguments following 
	* the url, the newly added argument will overwrite all of them. 
	*
	* @param {String} url 
	*        An url string the argument will add to
	* @param {String} argName 
	*        A string name of the new added argument
	* @param {String} argValue 
	*        A string value of the new added argument
	* @return {String}
	*        An url string with new added argument
	*/
	//> public String addArg(String,String,String);
	addArg : function(psUrl, psArgName, psArgValue) {
		if (psUrl == null || psUrl == undefined) {
			return null;
		}
	
		if (psUrl.indexOf("?") < 0) {
			psUrl += "?" + psArgName + "=" + psArgValue;
			return psUrl;
		}
		
		var argPair  = this.getArgPairIfExists(psUrl, psArgName);
		if (argPair !== null) {
			psUrl = psUrl.replace(argPair, psArgName + "=" + psArgValue);
		} else {
			psUrl += "&" + psArgName + "=" + psArgValue;
		}
		return psUrl;
	},
	
	/**
	* Gets the value of specified argument name from a given url.
	*
	* @param {String} url 
	*        An url string contains the argument pair
	* @param {String} argName 
	*        A string name of the argument
	* @return {String} 
	*        The value of the specified argument
	*/
	//> public String getArg(String,String);
	getArg : function(psUrl, psArgName) {
		if (psUrl == null || psUrl == undefined) {
			return null;
		}
	
		if (psUrl.indexOf("?") < 0) {
			return null;
		}
		
		var argPair  = this.getArgPairIfExists(psUrl, psArgName);
		if (argPair !== null) {
			return argPair.substring(argPair.indexOf("=")+1);
		}
		return null;
	},

	//>  private String getArgPairIfExists(String,String);
	getArgPairIfExists : function(psUrl, psArgName) {
		var argsIndex = psUrl.indexOf("?");
		if (argsIndex < 0) {
			return null;
		}
		
		var argsStr = psUrl;
		var argPair, argName;	
		while (argsIndex >= 0) {
			argsStr = argsStr.substring(argsIndex+1);
			argPair = argsStr;
			argsIndex = argsStr.indexOf("&");
			if (argsIndex >= 0) {
				argPair = argsStr.substring(0, argsIndex);
			}
			argName = argPair.substring(0, argPair.indexOf("="));
			if (argName == psArgName) {
				//parameter exists
				return argPair;
			}		
		}
		return null;
	}
})
.endType();


/**
* This class contains functions for getting elements position info
* 
*/
vjo.ctype("vjo.dsf.document.Positioning")
.props({
	/**
	* Gets the number of pixels that the content is scrolled to the left and 
	* top. This function will return an Array structure which has two elements - 
	* the first one is the pixel number of scorlled content to left, and the 
	* other one is the number to top.
	*
	* Examples:
	* <code>
	*    var offsets = getScrollLeftTop();
	*    alert("The left offset is: " + offsets[0]);
	*    alert("The top offset is: " + offsets[1]);
	* </code>
	*
	* @return {Object} 
	*         an array structure that contains number of pixels of scorlled 
	*         content to left and top
	*/
	//> public Object getScrollLeftTop();
	getScrollLeftTop : function() {
		var d = document, rv = [0,0], db = d.body, de = d.documentElement;
		if (db) 
		{
			rv[0] += db.scrollLeft;
			rv[1] += db.scrollTop;
		}
		if (de) 
		{
			//using xhtml1-transitional.dtd de scrolltop needs to be appended
			rv[0] += de.scrollLeft;
			rv[1] += de.scrollTop;
		}
	   return rv;
	},
	
	/**
	* Gets the number of pixels that the upper left corner of the current 
	* element is offset to the left within the offsetParent node.
	*
	* @param {Object} elem 
	*        an element to be got the number of pixels
	* @return {int} 
	*        the number of pixels of the element's offset to the left
	*/
	//> public int getOffsetLeft(Object);
	getOffsetLeft : function(poElem) {
		var e = poElem, l = 0;
		while (e)
		{
			l += e.offsetLeft;
			e = e.offsetParent;
		}
		return l;
	},
	
	/**
	* Gets the number of pixels that the upper left corner of the current 
	* element is offset to the top within the offsetParent node.
	*
	* @param {Object} elem 
	*        an element to be got the number of pixels
	* @return {int} 
	*        the number of pixels of the element's offset to the top
	*/
	//> public int getOffsetTop(Object);
	getOffsetTop : function(poElem)	{
		var e = poElem, t = 0;
		while (e)
		{
			t += e.offsetTop;
			e = e.offsetParent;
		}
		return t;
	},
	
	/**
	* Gets the number of pixels of the content's width.
	*
	* @return {int} 
	*         the number of pixels of the content's width
	*/
	//> public int getClientWidth();
	getClientWidth : function()	{
		var s = self, d = document, de =  d.documentElement, w;
		if (s.innerWidth)
		{
		    w = s.innerWidth;
		}
		else if (de && de.clientWidth)
		{
		    w = de.clientWidth;
		}
		else
		{
			w = d.body.clientWidth;
		}
		return w;
	},
	
	/**
	* Gets the number of pixels of the content's height.
	*
	* @return {int} 
	*         the number of pixels of the content's height
	*/
	//> public int getClientHeight();
	getClientHeight : function() {
		var s = self, d = document, de =  d.documentElement, h;
		if (s.innerHeight)
		{
		    h = s.innerHeight;
		}
		else if (de && de.clientHeight)
		{
		    h = de.clientHeight;
		}
		else
		{
			h = d.body.clientHeight;
		}
		return h;
	},
	
	/**
	* Gets the number of pixels that the event element's offset to the left and 
	* top. This function will return an array structure which has two elements 
	* - the first one is the pixels number of event element's offset to left, 
	* and the other one is to top.
	* <p>
	* Examples:
	* <code>
	*    var eventOffsets = getScrollLeftTop(event);
	*    alert("The event left offset is: " + eventOffsets[0]);
	*    alert("The event top offset is: " + eventOffsets[1]);
	* </code>
	*
	* @return {Object} 
	*         an array structure that contains number of pixels of event element's 
	*         offset to left and top
	*/
	//> public Object getEventLeftTop(MouseEvent);
	getEventLeftTop : function(poEvent)	{
		 //Height offset isn't exact in non-IE.  It doesn't accomodate for toolbars and
		 //status bar.  Must be calculated by outer and inner height, minus a fixed height
		 //for status bar
		 var u = "undefined", evt = window.event || poEvent,
	     xOff = (typeof(screenLeft) != u) ? screenLeft : screenX,
	     yOff = (typeof(screenTop) != u) ? screenTop : (screenY + (outerHeight - innerHeight) - 25);
	
		 return [evt.screenX - xOff,evt.screenY - yOff];
	}
})
.endType();

/**
* Represents a dsf runtime error.
*/
vjo.ctype("vjo.dsf.error.Error")
.protos({
	//> public void constructs(String,String,String);
	constructs : function (psMessage, psUrl, psLineNumber) {
		this.message = psMessage;
		this.url = psUrl;
		this.lineNumber = psLineNumber;
		this.userAgent = navigator.userAgent;
	}
})
.endType();
/**
* Manages runtime errors and handlers registered on the errors.
*/
vjo.ctype("vjo.dsf.error.ErrorHandlerManager")
.needs("vjo.dsf.error.Error")
.props({
	dsfErrors : [],
	handlers : [],
	
	/**
	* Adds an error object to the dsf error list.
	*
	* @param {String} message 
	*        A string message describes the error
	* @param {String} url 
	*        An page url where causes the eror
	* @param {String} lineNumber 
	*        A number value indecates the line where the error happens
	* @param {boolean} 
	*        Always returns true
	*/
	//> public boolean add(String, String, String);
	add : function (psMessage, psUrl, psLineNumber) {
		this.dsfErrors[this.dsfErrors.length] = new vjo.dsf.error.Error(psMessage, psUrl, psLineNumber);
		return true;		
	},
	
	/**
	* Converts an error to HTML format or plain text format.
	* 
	* @param {boolean} isHTML 
	*        A boolean value that reprents whether convert the error to HTML 
	*        format or plain text fromat
	* @return {String} 
	*        error information with specified format
	*/
	//> public String convertErrorTo(boolean);
	convertErrorTo : function (pbIsHTML) {
		var sBr = pbIsHTML ? "<br>" : "\n";
		var sHtmlOpen = pbIsHTML ? "<html><title>" : "";
		var sHtmlClose = pbIsHTML ? "</title><body>" : sBr;
		var sHtmlClose2 = pbIsHTML ? "</body></html>" : "";
		var sH2Open = pbIsHTML ? "<h2>" : "";
		var sH2Close = pbIsHTML ? "</h2>" + sBr : sBr;
		var sBOpen = pbIsHTML ? "<b>" : "";
		var sBClose = pbIsHTML ? "</b>" : "";
	
	
		var html = sHtmlOpen + "V4 JS Errors" + sHtmlClose;
		html += sH2Open + "Total number of errors = " + this.dsfErrors.length + sH2Close;
	
		for (var i =0;i<this.dsfErrors.length;i++) {
			html += sBOpen + "Message: " + sBClose + this.dsfErrors[i].message;
			html += sBr;
			html += sBOpen + "URL :" + sBClose + this.dsfErrors[i].url;
			html += sBr;
			html += sBOpen + "Line Number :" + sBClose + this.dsfErrors[i].lineNumber;
			html += sBr;
			html += sBOpen + "User Agent :" + sBClose + this.dsfErrors[i].userAgent;
			html += sBr;
			html += sBr;
		}
	
		html += sHtmlClose2;
		return html;	
	},
	
	/**
	* Converts an error to HTML format.
	* 
	* @return {String} error 
	*         information in HTML format
	*/
	//> public String toHTML();
	toHTML : function () {
		return this.convertErrorTo(true);
	},
	
	/**
	* Converts an error to plain text format.
	* 
	* @return {String} error 
	*         information in plain text format
	*/
	//> public String toText();
	toText : function () {
		return this.convertErrorTo(false);
	},
	
	/**
	* Pops up a window to show the error information.
	*
	*/
	//> public void show();
	show : function () {
		var errorwin = window.open("","V4JSErrors", "height=500,width=500,menubar=no,status=no,scrollbars=yes");
		if (window.focus) {		
			errorwin.focus();
		}
		errorwin.document.write(this.toHTML());
		errorwin.document.close();
	},
	
	/**
	* Registeres a handler to process the runtime error
	*
	* @param {Object} handler 
	*        A handler used to process the error
	*/
	//> public void register(Object);
	register : function (handler) {
		if (!handler) {
			return this;
		}
		if (typeof handler != 'object') {
			return this;
		}
		this.handlers[this.handlers.length] = handler;
		return handler;
	},
	
	/**
	* Clears all handlers registered to process the errors
	*
	*/
	//> public void clear();
	clear : function () {
		this.handlers.length = 0;
	},
	
	/**
	* Processes an error using all registered handlers
	*
	* @param {String} message 
	*        A string message describes the error
	* @param {String} url 
	*        An page url where causes the eror
	* @param {String} lineNumber 
	*        A number value indecates the line where the error happens
	*/
	//> public void process(String, String, String)
	process : function (psMessage, psUrl, psLineNumber) {
		for (var i=0;i<this.handlers.length;i++) {
			this.handlers[i].handle(psMessage, psUrl, psLineNumber);
		}
	},
	
	//> public void enableOnError(boolean hideJsErrors);
	//> public void enableOnError(boolean hideJsErrors, boolean addStackTrace);
	enableOnError : function (hideJsErrors, addStackTrace) {
		if(typeof(hideJsErrors)=="undefined"){
			//hideJsErrors is undefined, hide the errors as before
			hideJsErrors = true;
		}
		window.onerror = function(message, url, lineNumber) {
					var enableStackTrace = (addStackTrace?true:false);
					message = enableStackTrace?vjo.dsf.error.ErrorHandlerManager.stackTrace():message;
		            vjo.dsf.error.ErrorHandlerManager.process(message, url, lineNumber);
					return hideJsErrors;
				};	
	},
    stackTrace : function(){
		var msg;
		var err = this.errorObj();//simulate error to get error object reference
		if(err.stack){ 
			msg = this.stackTraceByError(err);
		}else{
			msg = this.stackTraceByCallee(arguments.callee);
		}
		return msg;
    },
	errorObj : function(){
	    try {
	    	//> @SUPPRESSTYPECHECK
	    	// undefined global variable $undefined$ must be created or error is thrown
             var err = $undefined$ << 1; 
        } catch (e) {
            return e;
        }
	}, 
    stackTraceByError : function(e) {
		var astack = e.stack.split("\n");
		//Remove first two entries
		//First entry is errorObj call
		//Second entry is stackTrace call
		astack[0]=astack[1]="";
		return astack.join().substring(2); //remove first two commas
    },

    stackTraceByCallee : function(curr) {
    //debugger;
        var ANON = '?', fnRE = /function\s*([\w\-$]+)?\s*\(/i,
            stack = [], j = 0, fn, args;
        var maxStackSize = 10;
        //start from curr.caller to skip stackTrace
        curr = curr.caller;
        while (curr && stack.length < maxStackSize) {
            fn = fnRE.test(curr.toString()) ? RegExp.$1 || ANON : ANON;
            if(fn==ANON && curr._name){
				fn = curr._name;
            }
			args = Array.prototype.slice.call(curr['arguments']);
			stack[j++] = fn + '(' + this.argumentsAsString(args) + ')';
            curr = curr.caller;
        }
        return stack;
    },
    argumentsAsString : function (args) {
        for (var i = 0; i < args.length; ++i) {
            var arg = args[i];
            if (arg === undefined) {
                args[i] = 'undefined';
            } else if (arg === null) {
                args[i] = 'null';
            } else if (arg.constructor) {
                if (arg.constructor === Array) {
                    if (arg.length < 3) {
                        args[i] = '[' + this.argumentsAsString(arg) + ']';
                    } else {
                        args[i] = '[' + this.argumentsAsString(Array.prototype.slice.call(arg, 0, 1)) + '...' + this.argumentsAsString(Array.prototype.slice.call(arg, -1)) + ']';
                    }
                } else if (arg.constructor === Object) {
                    args[i] = '#object';
                } else if (arg.constructor === Function) {
                    args[i] = '#function';
                } else if (arg.constructor === String) {
                    args[i] = '"' + arg + '"';
                }
            }
        }
        return args.join(',');
    }

})
.endType();


vjo.ctype("vjo.dsf.utils.HexToDecimal")
.props({
	//>public int hex2Dec(String source)
	hex2Dec : function(source) {
		return parseInt(source,16);
	}	
})
.endType();

vjo.ctype("vjo.dsf.utils.DecimalToHex")
.props({
	//>public String dec2Hex(String source)
	dec2Hex : function (source) {
		return parseInt(source,10).toString(16);
	}	
})
.endType();

/**
* Reads and writes cookies for Marketplace domain page.
* <p>
* Note: This class is only used for eBay site. 
* 
*/
vjo.ctype("vjo.dsf.cookie.VjCookieJar")
.needs([ 
	"vjo.dsf.utils.HexToDecimal", 
	"vjo.dsf.utils.DecimalToHex"])
.props({

	//TODO: possibly make this config data
	Default_Cookie_Format : {
		"COOKIELET_DELIMITER":"^",
		"NAME_VALUE_DELIMITER":"/",
		"escapedValue":true
	},
	
	DP_Cookie_Format : {
		"COOKIELET_DELIMITER":"^",
		"NAME_VALUE_DELIMITER":"/",
		"bUseExp":true,
		"startDelim":"b"
	},
	
	Session_Cookie_Format : {
		"COOKIELET_DELIMITER":"^",
		"NAME_VALUE_DELIMITER":"=",
		"escapedValue":true,
		"startDelim":"^"
	},
	
	DS_Cookie_Format : {
		"COOKIELET_DELIMITER":"^",
		"NAME_VALUE_DELIMITER":"/"
	},
	
	sPath : "/",
	
	aConversionMap : {
		'reg' : ['dp1','reg'],
		'recent_vi' : ['ebay','lvmn'],
		'ebaysignin' : ['ebay','sin'],
		'p' : ['dp1','p'],
		'etfc' : ['dp1','etfc'],
		'keepmesignin' : ['dp1','kms'],
		'ItemList' : ['ebay','wl'],
		'BackToList' : ['s','BIBO_BACK_TO_LIST']
	},
	

	aFormatMap : {
	},
	
	
	sCOMPAT : "10",
	sCONVER : "01",
	sSTRICT : "00",
	
	sModesCookie : "ebay",
	sModesCookielet : "cv",

	/**
	* Gets the value of the given cookielet from a specified cookie.
	*
	* @param {String} cookie 
	*        a string name of the cookie
	* @param {String} cookielet 
	*        a string name of the cookielet in the specified cookie
	* @return {String} 
	*        the value of the cookielet 
	*/
	//>public String readCookie(String,String);
	readCookie : function (psCookie,psCookielet) {
		var rv = this.readCookieObj(psCookie,psCookielet).value;
		return  (rv) ? decodeURIComponent(rv) : "";
	},
	 
	//>private Object createDefaultCookieBean(String, String);
	createDefaultCookieBean : function(psCookie,psCookielet) {
		// define cookie bean
		var cookie = {};
		// string
		cookie.name = psCookie;
		// string
		cookie.cookieletname = psCookielet;
		// string
		cookie.value = "";
		// date in millisecs UTC
		cookie.maxage = 0;
		cookie.rawcookievalue = "";
		cookie.mode = "";
		return cookie;
	},
	
	

	// TODO make internal method to return cookie object readCookieObj
	//> private String readCookieObj(String,String);
	readCookieObj : function (psCookie,psCookielet) {
		var cookie = this.createDefaultCookieBean(psCookie,psCookielet);
		this.update();
		this.checkConversionMap(cookie);
	
		// returns the raw value of the cookie from document.cookie
		// raw value
		cookie.rawcookievalue = this.aCookies[cookie.name];
		
		// TODO - determine why this is required
		if (!cookie.name || !cookie.rawcookievalue){
			cookie.value = "";
		}
		else if (!cookie.cookieletname){
			// read cookie
			this.readCookieInternal(cookie);
		}
		else {
			// read cookielet 
			this.readCookieletInternal(cookie);	
		}
		
		return (typeof(cookie)!="undefined")?cookie:"";
	},
	
	//> private void checkConversionMap(Object);
	checkConversionMap : function(cookie) {
		//Check conversion map
		// 2 values returned - 2 values cookie + cookielet
		var cmap = this.aConversionMap[cookie.name];
		
		// if cookielet is in conversio map then do the following
		// reset cookie and cookielet names to old namesl
		/*
			raw cookies are being converted to cookielets 
			this takes care of the moving cookies to cookielets
		*/
		
		if (cmap) {
			// compatibility mode 
			cookie.mode = this.getMode(cookie.name);
			cookie.name = cmap[0];
			cookie.cookieletname = cmap[1];
		}
	},
	
	//> private Object readCookieInternal(Object);
	readCookieInternal : function(cookie) {
			// read raw cookie with compatibility modes to switch between raw cookie and cookielets
			cookie.value  = cookie.rawcookievalue;
			return cookie;
	},
	
	//> private Object readCookieletInternal(Object);
	readCookieletInternal : function(cookie){
			var clet = this.getCookielet(cookie.name,cookie.cookieletname,cookie.rawcookievalue);
			// handling formats of cookielets mentiond in aFormatMap
			var format = this.getFormat(cookie.name);		
			if (clet && format.bUseExp){
				//do not expire cookie on client
				var cletOrig = clet;
				clet = clet.substring(0,clet.length-8);
				if (cletOrig.length > 8) {
					cookie.maxage = cletOrig.substring(cletOrig.length-8);
				}
			}
			
			// All other modes and if mode is not available
			cookie.value = clet;
			// COMPAT mode
			if (cookie.mode == this.sCOMPAT){
				cookie.value = cookie.rawcookievalue;
			}
			return cookie;
	},
	
	/**
	* Gets multiple values from a cookielet. This function splits a cookielet 
	* value by predefined delimiter and construct an array stores each value.
	*
	* @param {String} cookie 
	*        a string name of the cookie
	* @param {String} cookielet 
	*        a string name of the cookielet in the specified cookie
	* @return {Object} 
	*        an array that stores the multiples value
	*/
	//> public Object readMultiLineCookie(String,String);
	readMultiLineCookie : function (psCookie,psCookielet) {
		//this.update();
		if (!psCookie || !psCookielet){
			return "";
		}
		var val, r = "";
		var cmap = this.aConversionMap[psCookie];
		if (cmap) {
			val = this.readCookieObj(cmap[0],cmap[1]).value || "";
		}
		if (val) {	
			r = this.getCookielet(psCookie,psCookielet,val) || "";
		}
		return (typeof(r)!="undefined")?r:"";
	},
	
	/**
	* Writes a value String to a given cookie. This function requires setting 
	* an exact expire date. You can use {@link writeCookieEx} instead to set 
	* the days that the cookie will be avaliable.
	*
	* @param {String} cookie 
	*        a string name of the cookie to be written
	* @param {String} value  
	*        a string value to be written in cookie
	* @param {String} exp 
	*        an exact expired date of the cookie
	* @see #writeCookieEx
	*/
	//> public void writeCookie(String,String,String);
	//> public void writeCookie(String,String,int);
	writeCookie : function (psCookie,psVal,psExp) {
		//@param		pbSecure - secured? (optional)	
		//Check conversion map
		var cmap = this.aConversionMap[psCookie];
		if (cmap) {
			this.writeCookielet(cmap[0], cmap[1], psVal, psExp);
			return;
		}	
		var format = this.getFormat(psCookie);
		if (psVal && format.escapedValue) {
			psVal = encodeURIComponent(psVal);
		}
		this.writeRawCookie(psCookie,psVal,psExp);
		
	},
	
	//> private void writeRawCookie(String, String, String);
	//> private void writeRawCookie(String, String, int);
	writeRawCookie : function (psCookie,psVal,psExp) {
		if (psCookie && (psVal!==undefined)){
	//		Uncomment secure related lines below and 
	//		add to param list if it is being used
	//		var secure = pbSecure?"true":"";
	//		check for size limit
			if((isNaN(psVal) && psVal.length<4000) || (psVal+'').length<4000){
				if (typeof psExp == 'number') {
					psExp = this.getExpDate(psExp);
				}
				var expDate = psExp?new Date(psExp):new Date(this.getExpDate(730));
				var format = this.getFormat(psCookie);
				//TODO: refactor domain logic before E513
				var sHost = this.sCookieDomain;
				var dd = document.domain;
				//if (!dd.has(sHost)) {
				if (dd.indexOf(sHost)==-1) {
					var index = dd.indexOf('.ebay.');
					if (index>0) {
						this.sCookieDomain = dd.substring(index);
					}
				}
				//Added check before writing the cookie
				if(document.cookie)
				{
					document.cookie = psCookie + "=" + (psVal||"") + 
					((psExp || format.bUseExp)?"; expires=" + expDate.toGMTString():"") +
					"; domain=" + this.sCookieDomain + 
					"; path=" + this.sPath;
	//				"; secure=" + secure;
				}
			}
		}
	},
	
	/**
	* Writes a value String to a given cookie. You can put the days to expired 
	* this cookie from the current time.
	*
	* @param {String} cookie 
	*        a string name of the cookie to be written
	* @param {String} value 
	*        a string value to be written in cookie
	* @param {int} expDays 
	*        the number of days that represents how long the cookie will be 
	*        expired
	* @see #writeCookie
	*/	
	//>public void writeCookieEx(String,String,int);
	writeCookieEx : function (psCookie,psVal,piDays) {
		this.writeCookie(psCookie,psVal,this.getExpDate(piDays));
	},
	
	/**
	* Writes value to cookielet. You can use {@link writeMultiLineCookie} for 
	* some multi-level cookielet.
	*
	* @param {String} cookie 
	*        the name of the specified cookie which contains the cookielet to be 
	*        write
	* @param {String} cookielet 
	*        the name of the cookielet to be write
	* @param {String} val 
	*        the value of the cookielet
	* @param {String} exp 
	*        an expired date of the cookielet
	* @param {String} contExp 
	*        an expired date of the cookie
	* @see #writeMultiLineCookie
	*/
	//> public void writeCookielet(String,String,String,String,String);
	//> public void writeCookielet(String,String,String,int,String);
	//> public void writeCookielet(String,String,String,int,int);
	writeCookielet : function (psCookie,psCookielet,psVal,psExp,psContExp) {
		//@param		pSec - secured? (optional)
		if (psCookie && psCookielet){
			this.update();
			var format = this.getFormat(psCookie);
			if (format.bUseExp && psVal){
				//Set the default exp date to 2 yrs from now
				if (typeof psExp == 'number') {
					psExp = this.getExpDate(psExp);
				}
				var expDate = psExp?new Date(psExp):new Date(this.getExpDate(730)); //<Date
				var expDateUTC = Date.UTC(expDate.getUTCFullYear(),expDate.getUTCMonth(),expDate.getUTCDate(),expDate.getUTCHours(),expDate.getUTCMinutes(),expDate.getUTCSeconds());
				expDateUTC = Math.floor(expDateUTC/1000);
				//psVal += expDateUTC.dec2Hex();
				psVal += this.vj$.DecimalToHex.dec2Hex(expDateUTC);
			}
			var val = this.createCookieValue(psCookie,psCookielet,psVal);
			this.writeRawCookie(psCookie,val,psContExp);
		}
	},
	
	/**
	* Writes value to some multi-level cookielet. Some cookielet contains sub 
	* level, and you can use the name of the cookielet as cookie name and write 
	* its sub level value.
	* These cookielet includes:
	* <p>
	* <pre>
	* Name as Cookie | name in cookielet         | upper level cookie
	* -------------- |---------------------------|----------------------
	* reg            | reg                       | dp1 
	* recent_vi      | lvmn                      | ebay
	* ebaysignin     | sin                       | ebay
	* p              | p                         | dp1
	* etfc           | etfc                      | dp1
	* keepmesignin   | kms                       | dp1
	* BackToList     | BIBO_BACK_TO_LIST         | s
	* reg            | reg                       | dp1
	* </pre>
	* <p>
	* you need to use {@link writeCookielet} for other cookielet.
	*
	* @param {String} cookie 
	*        the name of the specified cookie which contains the cookielet to be write
	* @param {String} cookielet 
	*        the mame of the cookielet to be write
	* @param {String} val 
	*        the value of the cookielet
	* @param {String} exp 
	*        an expired date of the cookielet
	* @param {String} contExp 
	*        an expired date of the cookie
	* @see #writeCookielet
	*/
	//> public void writeMultiLineCookie(String,String,String,String,String);
	writeMultiLineCookie : function (psCookie,psCookielet,psVal,psExp,psContExp) {
		this.update();
		var val = this.createCookieValue(psCookie,psCookielet,psVal);
		if (val){	
			var cmap = this.aConversionMap[psCookie];
			if (cmap) {
				this.writeCookielet(cmap[0],cmap[1],val,psExp,psContExp);
			}
		}
	},
	
	/**
	* Gets the bit flag value at a particular position.This function is 
	* deprecated, use {@link #getBitFlag} instead.
	*
	* @deprecated
	* @param {String} dec 
	*        a bit string that contains series of flags
	* @param {int} pos 
	*        the flag position in the bit string
	* @return {int} 
	*        the flag value
	* @see #getBitFlag
	*/
	//> public int getBitFlagOldVersion(String, int);
	getBitFlagOldVersion : function(piDec, piPos) {
		//converting to dec
		var dec = parseInt(piDec,10);//<Number
		//getting binary value //getting char at position
		var b = dec.toString(2), r = dec?b.charAt(b.length-piPos-1):"";
		return (r=="1")?1:0;
	},
	
	/**
	* Sets the bit flag at a particular position. This function is deprecated, 
	* use {@link #setBitFlag} instead.
	*
	* @deprecated
	* @param {String} dec 
	*        a bit string contains series of flags
	* @param {int} pos 
	*        the flag position in the bit string
	* @param {int} val 
	*        the flag value to be set. Flag will be set as 1 only if the value of 
	*        this parameter is 1
	* @see #setBitFlag
	*/
	 //> public int setBitFlagOldVersion(int, int, int);
	setBitFlagOldVersion : function(piDec, piPos, piVal) {
		var b="",p,i,e,l;
		//converting to dec
		piDec = parseInt(piDec+"",10);
		if(piDec)
		{
			//getting binary value 
			b = piDec.toString(2);
		}
		l = b.length;
		if (l<piPos)
		{
			e = piPos-l;
			for(i=0;i<=e;i++)
			{
				b = "0"+b;
			}
		}
		//finding position
		p = b.length-piPos-1;
		//replacing value at pPos with pVal and converting back to decimal
		return parseInt(b.substring(0,p)+piVal+b.substring(p+1),2);
	},
	
	/**
	* Gets the bit flag value at a particular position.
	*
	* @param {String} dec 
	*        a bit string which contains series of flags
	* @param {int} pos 
	*        the flag position in the bit string
	* @return {int} 
	*        the flag value
	*/
	//> public int getBitFlag(String,int);
	getBitFlag : function(piDec, piPos) {

		if(piDec != null && piDec.length > 0 && piDec.charAt(0) == '#' )
		{
			var length = piDec.length;
			var q = piPos%4;
			var hexPosition = Math.floor(piPos/4) + 1;
						
			var absHexPosition = length - hexPosition;
			var hexValue = parseInt(piDec.substring(absHexPosition,absHexPosition+1),16);
			var hexFlag = 1 << q;
			
			return ((hexValue & hexFlag) == hexFlag)?1:0;		
		}
		else
		{
			//process by old format
			return this.getBitFlagOldVersion(piDec, piPos);
		}

	},
	
	/**
	* Set the bit flag at a particular position.
	*
	* @param {String} dec 
	*        A bit string that contains series of flags
	* @param {int} pos 
	*        the flag position in the bit string
	* @param {int} val 
	*        the falg value to be set. Flag will be set as 1 only if the value of 
	*        this parameter is 1. 
	*/
	//> public int setBitFlag(String,int,int);
	//> public int setBitFlag(int,int,int);
	setBitFlag : function(piDec, piPos, piVal) {

		if(piDec != null && piDec.length > 0 && piDec.charAt(0) == '#' )
		{
			//process by new format
			var length = piDec.length;
			var q = piPos%4;
			var hexPosition = Math.floor(piPos/4) + 1;
			
			if(length <= hexPosition)
			{				
				if(piVal != 1) {
					return piDec;
				}
				
				var zeroCout = hexPosition - length + 1;
				var tmpString = piDec.substring(1,length);
				while(zeroCout > 0)
				{
					tmpString = '0' + tmpString;
					zeroCout--;
				}
				
				piDec = '#' + tmpString;
				length = piDec.length;
			}
			
			var absHexPosition = length - hexPosition;
			var hexValue = parseInt(piDec.substring(absHexPosition,absHexPosition+1),16);
			var hexFlag = 1 << q;
			
			if(piVal == 1)
			{
				hexValue |= hexFlag;
			}
			else
			{
				hexValue &= ~hexFlag;
			}
			
			piDec = piDec.substring(0,absHexPosition) + hexValue.toString(16) + piDec.substring(absHexPosition+1,length);
			
			return piDec;
		
		}
		else
		{			
			if(piPos > 31)
			{
				return piDec;
			}
			//process by old format			
			return this.setBitFlagOldVersion(piDec, piPos, piVal);		
		}

	},	
	
	//> private String  createCookieValue (String, String, String);
	createCookieValue : function (psName,psKey,psVal) {
		var cmap = this.aConversionMap[psName], format = this.getFormat(psName), 
			mode = this.getMode(psName), val;
		if (cmap && (mode == this.sSTRICT || mode ==this.sCONVER)) {
			val = this.readCookieObj(cmap[0],cmap[1]).value || "";
		}
		else {
			val = this.aCookies[psName] || "";
		}
		
		if (format) {
			var clts = this.getCookieletArray(val,format);
			clts[psKey] = psVal;
			var str = "";
			for (var i in clts) {
				if (clts[i]) {
					str += i + format.NAME_VALUE_DELIMITER + clts[i] + format.COOKIELET_DELIMITER;
				}
			}
	
			if (str && format.startDelim) {
				str = format.startDelim + str;
			}
			val = str;
	
			if (format.escapedValue){
				val = encodeURIComponent(val);
			}
		}
		
		return val;
	},
	
	//> private void update();
	update : function () {
		//store cookie values
		var aC = document.cookie.split("; ");
		this.aCookies = {};
		for (var i=0;i<aC.length;i++){	
			var sC = aC[i].split("=");
			
			var format = this.getFormat(sC[0]), cv = sC[1], sd = format.startDelim;
			if (sd && cv && cv.indexOf(sd)===0) {
				sC[1] = cv.substring(sd.length,cv.length);	
			}
			this.aCookies[sC[0]] = sC[1];
		}
	},
	
	//> private String getCookielet(String, String, String);
	getCookielet : function (psCookie,psCookielet,psVal) {
		var format = this.getFormat(psCookie);
		var clts = this.getCookieletArray(psVal,format);
		return clts[psCookielet] || "";
	},
	
	//> private Object getFormat(String);
	getFormat : function (psCookie) {
		return this.aFormatMap[psCookie] || vjo.dsf.cookie.VjCookieJar.Default_Cookie_Format;
	},
	
	//> private Object getCookieletArray(String, Object);
	getCookieletArray : function (psVal,poFormat) {
		var rv = [], val = psVal || "";
		if (poFormat.escapedValue){
			val = decodeURIComponent(val);
		}
		var a = val.split(poFormat.COOKIELET_DELIMITER);
		for (var i=0;i<a.length; i++) { //create cookielet array
			var idx = a[i].indexOf(poFormat.NAME_VALUE_DELIMITER);
			if (idx>0) {
				rv[a[i].substring(0,idx)] = a[i].substring(idx+1);
			}
		}
		return rv;
	},

	/**
	* Gets the date behind a given days from current date. This is used to set 
	* the valid time when writing the cookie.
	*
	* @param {int} days 
	*        the number of days that cookie is valid
	* @return {String} 
	*        the expiration date in GMT format
	*/
	//> public String getExpDate(int);
	getExpDate : function (piDays) {
		var expires;
	    if (typeof piDays == "number" && piDays >= 0) {
	        var d = new Date();
	        d.setTime(d.getTime()+(piDays*24*60*60*1000));
	        expires = d.toGMTString();
	    }
	    return expires;
	},
	
	//> private Object getMode(String);
	getMode : function (psCookie) {
		var h = this.readCookieObj(this.sModesCookie,this.sModesCookielet).value, b;	
		if (!(psCookie in this.aConversionMap)){
			return null;
		}
		if (!h) {
			return "";
		}
		//default mode is STRICT when h is "0"
		if (h===0){
			return this.sSTRICT;
		}
	
		if(h && h!="0"){
			//checking for h is having "." or not
			//if (h.has(".")){
			if (h.indexOf(".")!=-1){
				//conversion cookie is having more than 15 cookie values
				var a = h.split(".");
				//looping through array
				for(var i=0; i<a.length; i++){
					//taking the first hex nubmer and converting to decimal
					//and converting to binary
					//b = a[i].hex2Dec().toString(2) + b;
					b = this.vj$.HexToDecimal.hex2Dec(a[i]).toString(2) + b;
				}
			}
			else{
				//converting to decimal
				//converting to binary number
				//b = h.hex2Dec().toString(2);
				b = this.vj$.HexToDecimal.hex2Dec(h).toString(2);
			}
			//fill the convArray with appropriate mode values
			i=0;
			//getting total binary string length
			var l = b.length, j;
			//looping through each cookie and filling mode of the cookie
			for(var o in this.aConversionMap)
			{
				//find the position to read
				j = l-(2*(i+1));
				//reading backwards 2 digits at a time
				var f = b.substring(j,j+2).toString(10);
				f = (!f)?this.sSTRICT:f;
				if (psCookie == o) 
				{
					return (f.length==1)?"0"+f:f;
				}
				i++;
			}
			return null;
		}	
	}
})
.inits(function () {
	var vCJ = vjo.dsf.cookie.VjCookieJar;
	vCJ.aFormatMap = {
		'r':vCJ.Default_Cookie_Format,
		'dp1':vCJ.DP_Cookie_Format,
		'npii':vCJ.DP_Cookie_Format,
		'ebay':vCJ.Session_Cookie_Format,
		'reg':vCJ.Session_Cookie_Format,
		'apcCookies':this.Session_Cookie_Format,
		'ds2':vCJ.DS_Cookie_Format
	};
})
.endType();




	
	

vjo.ctype("vjo.dsf.utils.SiteSpeed")
.needs(["vjo.dsf.EventDispatcher",
	"vjo.dsf.utils.URL",
	"vjo.dsf.document.Positioning",
	"vjo.dsf.error.ErrorHandlerManager",
	"vjo.dsf.cookie.VjCookieJar"])
.props({
	params : {},

	pload : function () {
		var oCJ = this.vj$.VjCookieJar, sbf = oCJ.readCookie("ebay","sbf"); 
		//Mark as cached for all pages including un-sampled. 
		//Can not do this in puload as previous page unload can happend after current response back, marking current page as cached
		oCJ.writeCookielet("ebay","sbf",oCJ.setBitFlag(sbf, 20, 1));
	},
	punload : function () {
		this.vj$.VjCookieJar.writeCookielet("ds2","ssts",(new Date()).getTime());
	},
	addParam : function (key,value) {
		if (key && value) {
			this.params[key] = value;
		}
	},
	getParams : function() {
		var rv = "";
		for (var k in this.params) {
			rv += "&" + k + "=" + this.params[k];
		}
		return rv;
	},
	getParam : function (key) {
		 return this.params[key];
	},
	/*
	 * This interfase can be used by app to callback to indicate lastest download after browser onload,
	 * so that we get correct page level timers.
	 */
	//> public void updateLoad()
	updateLoad : function () {
		if (typeof(oGaugeInfo)!='undefined' && oGaugeInfo.ld === true) {
			var g = oGaugeInfo; //<@SUPRESSTYPECHECK
			var ct = (new Date()).getTime();
			g.wt =  ct;
			g.ex3 = ct;
			g.ct21 =  ct - g.iST;
		}
	}
})
.inits(function () {
	ed = vjo.dsf.EventDispatcher;//<<
	ed.addEventListener(window,'load', this.pload, this);
	ed.addEventListener(window,'beforeunload', this.punload, this);
})
.endType();

/**
* This class provides series of boolean values to detect the client environment. 
* It's using <code>navigator.userAgent</code> to get those information
* <p>
* Browser detection:
* <li>bFirefox -  Firefox
* <li>bWebTV - WebTV
* <li>bOpera - Opera
* <li>bNav - Netscape
* <li>bIE - Internet Exploer
* <li>bSafari - Safari
* <li>bAOL - AOL browser
* <p>
* Browser version:
* <li>iVer - the major version
* <li>fMinorVer
* <p>
* Operating system detection:
* <li>bWin - Windows series
* <li>bMac - Macintosh
* <li>bMacppc - Macintosh PowerPC
* <li>bMactel - Macintosh Intel
* <li>bWinXp - Windows XP
* <li>bXpSp2 - Windows XP with Service Pack 2
* <li>bVista - Windows Vista
* <p>
* ActiveX support detection:
* <li>bActiveXSupported
* <P>
* Usage:
* <code>
*		if(vjo.dsf.client.Browser.bFirefox){
*			//some firefox browser specific logic here
*		}
* </code>
*/
vjo.ctype("vjo.dsf.client.Browser") //<dynamic
.props({
	init : function() {		
		this.bFirefox = this.bWebTV = this.bOpera = this.bNav = this.bIE = this.bSafari =
		this.bWin = this.bMac = this.bMacppc = this.bMactel =
		this.bActiveXSupported = this.bWinXp = this.bXpSp2 = this.bAOL = this.bVista = false;
		this.iVer = this.fVer = -1;
	    this.fMinorVer = 0;
	    this.aMimeTypes = null;
		
		var nv = navigator, agt = nv.userAgent.toLowerCase(), i = 0, ver;
		
		function has(source, find){
			return source.indexOf(find)!=-1;
		};
		
		with (this){
			if (has(agt,"webtv"))
			{
				bWebTV = true;
				i = agt.indexOf("webtv/") + 6;
			}
			else if (has(agt,"firefox"))
			{
				bFirefox = true;
				i = agt.lastIndexOf("firefox") + 8;
			}
			else if (has(agt,"safari"))
			{
				bSafari = true;
				i = agt.lastIndexOf("safari") + 7;
			}
			else if(typeof(window.opera)!="undefined")
			{
				bOpera = true;
				i = agt.lastIndexOf("opera") + 6;
			}
			else if (nv.appName=="Netscape")
			{
				bNav = true;
				i = agt.lastIndexOf("/") + 1;
			}
			else if (has(agt,"msie"))
			{
				bIE = true;
				i = agt.indexOf("msie") + 4;
				if (has(agt,'aol') || has(agt,'america online'))
					bAOL = true;
			}
			ver = bOpera?window.opera.version():agt.substring(i);
			//ver = agt.substring(i);
			iVer = parseInt(ver);
			fVer = parseFloat(ver);
	           fMinorVer = fVer - iVer;
	
			//Operating system detection
			bWin = has(agt,"win");
			bWinXp = (bWin && has(agt,"windows nt 5.1"));
			bVista = (bWin && has(agt,"windows nt 6.0"));
			bXpSp2 = (bWinXp && has(agt,"sv1"));
			bMac = has(agt,"mac");
			bMacppc = (bMac && (has(agt,"ppc")||has(agt,"powerpc")));
			bMactel = (bMac && has(agt,"intel")); 
			
			aMimeTypes = nv.mimeTypes;
	   
			//ActiveX support
			bActiveXSupported =	(!(bMac || bMacppc) && (typeof(ActiveXObject) == 'function'));
		}	         
	}
})
.inits(function () {
	this.init();
})
.endType();	
vjo.ctype("vjo.Registry")
.props({
	controls : [],
	//> public Object put(String, Object)
	put : function(psKey,poControl){
		this.controls[psKey] = poControl;
		if (this.isKeyValid(psKey)) {//make shorthand reference
			this['_'+psKey] = this.controls[psKey];
		}
		return this.controls[psKey];
	},

	//> public Object get(String)
	get : function(psKey){
		return this.controls[psKey];
	},
	
	//> public String dump()
	dump : function(){
		var controls = this.controls;
		var string = "controls on page:\n";
		for(var i in controls){
			string += "key = " + i;
			string += "controlName = " + controls[i].objtype;
			string +="\n";
		}
		return string;
	},
	isKeyValid : function (psKey) {
		if (typeof psKey != 'string') { 
			return false; 
		}
		return /^([a-zA-Z0-9_$]+)$/.test(psKey);
	}
})
.endType();
</script><script>function onFallBack (imgElemet,newTarget){	switch (newTarget) {	case 1:		imgElemet.src = 'http://pics.ebaystatic.com/aw/in/aboutebay/noImg100x140.png';		break;	case 2:		imgElemet.src = 'http://pics.ebaystatic.com/aw/in/aboutebay/noImg133x200.png';		break;	case 3:		imgElemet.src = 'http://pics.ebaystatic.com/aw/in/aboutebay/noImg100x140.png';		break;	default:		imgElemet.src = 'http://p.ebaystatic.com/aw/pics/nextGenVit/imgNoImg.gif';	}};</script><a name="topY" id="topY"></a><div><div style="padding-top:5px;height:26px;border-top:1px solid #e8e8e8;background-color:#EDEDED;padding-left:1em;"><span style="font-size: 16px;font-weight: bold;">182</span><span style="color: #666666;font-size: 14px;font-weight: normal;"> titles found for </span><span style="color: #333333;display: inline;font-size: 14px;font-weight: bold;white-space: nowrap;">dan brown</span></div><br><table width="100%"><tr><td rowspan="2" style="height:145px;width:160px;text-align:center;" align="center"><div style="width: 100px;height:140px;"><div style="padding-top:5px;margin-left:80px;margin-top:-5px;width:36px;height:36px;width:36px;height:36px;background-image: url(&quot;http://pics.ebaystatic.com/aw/in/books/ico_discountbooks.png&quot;);background-repeat:no-repeat;vertical-align:middle;position: absolute;"><span style="font-size:10px;text-align:center;font-weight:bold;">40%<br>OFF</span></div><a href="/ci/Da-Vinci-Code,-The-/210966?frmPg=4&amp;frmPgTx=dan brown&amp;deck=1&amp;schcatid=267" target="_parent" class="ebayLVTracking_clickthru" clickid="image_catalog"><img onerror="onFallBack(this,1)" border="0" src="http://66.211.164.72/bookImages/9780552161275.jpg" style="width: 100px;height:140px;"></a></div></td><td style="vertical-align:top;"><table><tr><td><a href="/ci/Da-Vinci-Code,-The-/210966?frmPg=4&amp;frmPgTx=dan brown&amp;schcatid=267" target="_parent" class="ebayLVTracking_clickthru" clickid="catalog"><span><span style="font-size:12px;font-family:Arial, Helvetica, sans-serif;color:#003DAD;font-weight:bold;">Da Vinci Code, The</span><span style="font-size:11px;font-family:Arial, Helvetica, sans-serif;color:#003DAD;font-style:italic;"> by Dan Brown</span></span></a></td></tr><tr><td><label style="font-size:11px;font-family:Arial, Helvetica, sans-serif;font-style:italic;color:#777;">Harvard professor Robert Langdon receives an urgent late-night phone call while on business in Paris: the elderly curator of the Louvre has been brutally murdered inside the museum. Alongside the body, police have found a series...</label></td></tr></table></td><td align="right" style="vertical-align:top;"><table style="font-size:10.5px;font-family:Arial, Helvetica, sans-serif;color:#777;"><tr><td style="text-align:right;">Buy New:</td><td style="font-size:12px;font-family:Arial, Helvetica, sans-serif;font-weight:bold;color:#777;"><img src="http://pics.ebaystatic.com/aw/in/books/img_rupee_srp_mrp.gif" style="height:8px;width:6px;"> 239.00</td></tr><tr><td style="text-align:right;">MRP:</td><td style="font-size:10.5px;font-family:Arial, Helvetica, sans-serif;color:#777;text-decoration: line-through;"><span><img src="http://pics.ebaystatic.com/aw/in/books/img_rupee_srp_mrp.gif" style="height:8px;width:6px;"></span> 399.00</td></tr><tr><td style="text-align:right;">You Save:</td><td style="font-size:10.5px;font-family:Arial, Helvetica, sans-serif;color:#6C3;"><img src="http://pics.ebaystatic.com/aw/in/books/img_rupee_srp_yousave.gif" style="height:8px;width:6px;"> 160.00</td></tr><tr><td style="text-align:right;">Shipping:</td><td><span>Free</span><span style="font-size:10.5px;font-family:Arial, Helvetica, sans-serif;color:#777;font-weight:bold;">, 5 Days</span></td></tr></table></td></tr><tr><td style="vertical-align:top;"><div style="color:#848484;height:20px;width:60px" id="othersellerlistingthrobber0">Loading...</div><iframe src="/othersellerlisting?key=Da Vinci Code, The&amp;index=0&amp;isap=true&amp;prodid=210966" height="60" frameborder="0" style="overflow:hidden"></iframe></td><td align="right" style="width:138px;vertical-align:top;"><span><b id="bin" class="btn-w btn-m psb-S"><i>Buy it now</i><span id="spn_bin" class="btn-b psb-b psb-S"><a id="but_bin" href="javascript:parent.document.location.href='http://orders.ebay.in/ws/eBayISAPI.dll?CreateOrder&amp;action=add&amp;itemId=390497600336&amp;_trksid=p2046780.l3198'" title="" attr="value">Buy it now</a><b id="txt_bin">Buy it now</b></span></b></span></td></tr><tr><td style="height:4px;" colspan="3"><div style="width:100%;height:1px;background-color:#DDD"></div></td></tr><tr><td rowspan="2" style="height:145px;width:160px;text-align:center;" align="center"><div style="width: 100px;height:140px;"><div style="padding-top:5px;margin-left:80px;margin-top:-5px;width:36px;height:36px;width:36px;height:36px;background-image: url(&quot;http://pics.ebaystatic.com/aw/in/books/ico_discountbooks.png&quot;);background-repeat:no-repeat;vertical-align:middle;position: absolute;"><span style="font-size:10px;text-align:center;font-weight:bold;">20%<br>OFF</span></div><a href="/ci/Lost-Symbol,-The-/9468212?frmPg=4&amp;frmPgTx=dan brown&amp;deck=1&amp;schcatid=267" target="_parent" class="ebayLVTracking_clickthru" clickid="image_catalog"><img onerror="onFallBack(this,1)" border="0" src="http://66.211.164.72/bookImages/9780552161237.jpg" style="width: 100px;height:140px;"></a></div></td><td style="vertical-align:top;"><table><tr><td><a href="/ci/Lost-Symbol,-The-/9468212?frmPg=4&amp;frmPgTx=dan brown&amp;schcatid=267" target="_parent" class="ebayLVTracking_clickthru" clickid="catalog"><span><span style="font-size:12px;font-family:Arial, Helvetica, sans-serif;color:#003DAD;font-weight:bold;">Lost Symbol, The</span><span style="font-size:11px;font-family:Arial, Helvetica, sans-serif;color:#003DAD;font-style:italic;"> by Dan Brown</span></span></a></td></tr><tr><td><label style="font-size:11px;font-family:Arial, Helvetica, sans-serif;font-style:italic;color:#777;">WHAT WAS LOST WILL BE FOUND… Washington DC: Harvard symbologist Robert Langdon is summoned at the last minute to deliver an evening lecture in the Capitol Building. Within moments of his arrival, however, a disturbing object – g...</label></td></tr></table></td><td align="right" style="vertical-align:top;"><table style="font-size:10.5px;font-family:Arial, Helvetica, sans-serif;color:#777;"><tr><td style="text-align:right;">Buy New:</td><td style="font-size:12px;font-family:Arial, Helvetica, sans-serif;font-weight:bold;color:#777;"><img src="http://pics.ebaystatic.com/aw/in/books/img_rupee_srp_mrp.gif" style="height:8px;width:6px;"> 319.00</td></tr><tr><td style="text-align:right;">MRP:</td><td style="font-size:10.5px;font-family:Arial, Helvetica, sans-serif;color:#777;text-decoration: line-through;"><span><img src="http://pics.ebaystatic.com/aw/in/books/img_rupee_srp_mrp.gif" style="height:8px;width:6px;"></span> 399.00</td></tr><tr><td style="text-align:right;">You Save:</td><td style="font-size:10.5px;font-family:Arial, Helvetica, sans-serif;color:#6C3;"><img src="http://pics.ebaystatic.com/aw/in/books/img_rupee_srp_yousave.gif" style="height:8px;width:6px;"> 80.00</td></tr><tr><td style="text-align:right;">Shipping:</td><td><span>Free</span><span style="font-size:10.5px;font-family:Arial, Helvetica, sans-serif;color:#777;font-weight:bold;">, 5 Days</span></td></tr></table></td></tr><tr><td style="vertical-align:top;"><div style="color:#848484;height:20px;width:60px" id="othersellerlistingthrobber1">Loading...</div><iframe src="/othersellerlisting?key=Lost Symbol, The&amp;index=1&amp;isap=true&amp;prodid=9468212" height="60" frameborder="0" style="overflow:hidden"></iframe></td><td align="right" style="width:138px;vertical-align:top;"><span><b id="bin" class="btn-w btn-m psb-S"><i>Buy it now</i><span id="spn_bin" class="btn-b psb-b psb-S"><a id="but_bin" href="javascript:parent.document.location.href='http://orders.ebay.in/ws/eBayISAPI.dll?CreateOrder&amp;action=add&amp;itemId=390497601519&amp;_trksid=p2046780.l3198'" title="" attr="value">Buy it now</a><b id="txt_bin">Buy it now</b></span></b></span></td></tr><tr><td style="height:4px;" colspan="3"><div style="width:100%;height:1px;background-color:#DDD"></div></td></tr><tr><td rowspan="2" style="height:145px;width:160px;text-align:center;" align="center"><div style="width: 100px;height:140px;"><div style="padding-top:5px;margin-left:80px;margin-top:-5px;width:36px;height:36px;width:36px;height:36px;background-image: url(&quot;http://pics.ebaystatic.com/aw/in/books/ico_discountbooks.png&quot;);background-repeat:no-repeat;vertical-align:middle;position: absolute;"><span style="font-size:10px;text-align:center;font-weight:bold;">20%<br>OFF</span></div><a href="/ci/The-Da-Vinci-Code-/859707?frmPg=4&amp;frmPgTx=dan brown&amp;deck=1&amp;schcatid=267" target="_parent" class="ebayLVTracking_clickthru" clickid="image_catalog"><img onerror="onFallBack(this,1)" border="0" src="http://66.211.164.72/bookImages/9780307277671.jpg" style="width: 100px;height:140px;"></a></div></td><td style="vertical-align:top;"><table><tr><td><a href="/ci/The-Da-Vinci-Code-/859707?frmPg=4&amp;frmPgTx=dan brown&amp;schcatid=267" target="_parent" class="ebayLVTracking_clickthru" clickid="catalog"><span><span style="font-size:12px;font-family:Arial, Helvetica, sans-serif;color:#003DAD;font-weight:bold;">The Da Vinci Code</span><span style="font-size:11px;font-family:Arial, Helvetica, sans-serif;color:#003DAD;font-style:italic;"> by Dan Brown</span></span></a></td></tr><tr><td><label style="font-size:11px;font-family:Arial, Helvetica, sans-serif;font-style:italic;color:#777;">An ingenious code hidden in the works of Leonardo da Vinci.A desperate race through the cathedrals and castles of Europe.An astonishing truth concealed for centuries . . . unveiled at last.While in Paris, Harvard sym...</label></td></tr></table></td><td align="right" style="vertical-align:top;"><table style="font-size:10.5px;font-family:Arial, Helvetica, sans-serif;color:#777;"><tr><td style="text-align:right;">Buy New:</td><td style="font-size:12px;font-family:Arial, Helvetica, sans-serif;font-weight:bold;color:#777;"><img src="http://pics.ebaystatic.com/aw/in/books/img_rupee_srp_mrp.gif" style="height:8px;width:6px;"> 319.00</td></tr><tr><td style="text-align:right;">MRP:</td><td style="font-size:10.5px;font-family:Arial, Helvetica, sans-serif;color:#777;text-decoration: line-through;"><span><img src="http://pics.ebaystatic.com/aw/in/books/img_rupee_srp_mrp.gif" style="height:8px;width:6px;"></span> 399.00</td></tr><tr><td style="text-align:right;">You Save:</td><td style="font-size:10.5px;font-family:Arial, Helvetica, sans-serif;color:#6C3;"><img src="http://pics.ebaystatic.com/aw/in/books/img_rupee_srp_yousave.gif" style="height:8px;width:6px;"> 80.00</td></tr><tr><td style="text-align:right;">Shipping:</td><td><span>Free</span><span style="font-size:10.5px;font-family:Arial, Helvetica, sans-serif;color:#777;font-weight:bold;">, 5 Days</span></td></tr></table></td></tr><tr><td style="vertical-align:top;"><div style="color:#848484;height:20px;width:60px" id="othersellerlistingthrobber2">Loading...</div><iframe src="/othersellerlisting?key=The Da Vinci Code&amp;index=2&amp;isap=true&amp;prodid=859707" height="60" frameborder="0" style="overflow:hidden"></iframe></td><td align="right" style="width:138px;vertical-align:top;"><span><b id="bin" class="btn-w btn-m psb-S"><i>Buy it now</i><span id="spn_bin" class="btn-b psb-b psb-S"><a id="but_bin" href="javascript:parent.document.location.href='http://orders.ebay.in/ws/eBayISAPI.dll?CreateOrder&amp;action=add&amp;itemId=390482955360&amp;_trksid=p2046780.l3198'" title="" attr="value">Buy it now</a><b id="txt_bin">Buy it now</b></span></b></span></td></tr><tr><td style="height:4px;" colspan="3"><div style="width:100%;height:1px;background-color:#DDD"></div></td></tr><tr><td rowspan="2" style="height:145px;width:160px;text-align:center;" align="center"><div style="width: 100px;height:140px;"><div style="padding-top:5px;margin-left:80px;margin-top:-5px;width:36px;height:36px;width:36px;height:36px;background-image: url(&quot;http://pics.ebaystatic.com/aw/in/books/ico_discountbooks.png&quot;);background-repeat:no-repeat;vertical-align:middle;position: absolute;"><span style="font-size:10px;text-align:center;font-weight:bold;">20%<br>OFF</span></div><a href="/ci/Angels-And-Demons-/9468215?frmPg=4&amp;frmPgTx=dan brown&amp;deck=1&amp;schcatid=267" target="_parent" class="ebayLVTracking_clickthru" clickid="image_catalog"><img onerror="onFallBack(this,1)" border="0" src="http://66.211.164.72/bookImages/9780552161268.jpg" style="width: 100px;height:140px;"></a></div></td><td style="vertical-align:top;"><table><tr><td><a href="/ci/Angels-And-Demons-/9468215?frmPg=4&amp;frmPgTx=dan brown&amp;schcatid=267" target="_parent" class="ebayLVTracking_clickthru" clickid="catalog"><span><span style="font-size:12px;font-family:Arial, Helvetica, sans-serif;color:#003DAD;font-weight:bold;">Angels And Demons</span><span style="font-size:11px;font-family:Arial, Helvetica, sans-serif;color:#003DAD;font-style:italic;"> by Dan Brown</span></span></a></td></tr><tr><td><label style="font-size:11px;font-family:Arial, Helvetica, sans-serif;font-style:italic;color:#777;">CERN Institute, Switzerland: a world-renowned scientist is found brutally murdered with a mysterious symbol seared onto his chest. The Vatican, Rome: the College of Cardinals assembles to elect a new pope. Somewhere beneath them...</label></td></tr></table></td><td align="right" style="vertical-align:top;"><table style="font-size:10.5px;font-family:Arial, Helvetica, sans-serif;color:#777;"><tr><td style="text-align:right;">Buy New:</td><td style="font-size:12px;font-family:Arial, Helvetica, sans-serif;font-weight:bold;color:#777;"><img src="http://pics.ebaystatic.com/aw/in/books/img_rupee_srp_mrp.gif" style="height:8px;width:6px;"> 319.00</td></tr><tr><td style="text-align:right;">MRP:</td><td style="font-size:10.5px;font-family:Arial, Helvetica, sans-serif;color:#777;text-decoration: line-through;"><span><img src="http://pics.ebaystatic.com/aw/in/books/img_rupee_srp_mrp.gif" style="height:8px;width:6px;"></span> 399.00</td></tr><tr><td style="text-align:right;">You Save:</td><td style="font-size:10.5px;font-family:Arial, Helvetica, sans-serif;color:#6C3;"><img src="http://pics.ebaystatic.com/aw/in/books/img_rupee_srp_yousave.gif" style="height:8px;width:6px;"> 80.00</td></tr><tr><td style="text-align:right;">Shipping:</td><td><span>Free</span><span style="font-size:10.5px;font-family:Arial, Helvetica, sans-serif;color:#777;font-weight:bold;">, 5 Days</span></td></tr></table></td></tr><tr><td style="vertical-align:top;"><div style="color:#848484;height:20px;width:60px" id="othersellerlistingthrobber3">Loading...</div><iframe src="/othersellerlisting?key=Angels And Demons&amp;index=3&amp;isap=true&amp;prodid=9468215" height="60" frameborder="0" style="overflow:hidden"></iframe></td><td align="right" style="width:138px;vertical-align:top;"><span><b id="bin" class="btn-w btn-m psb-S"><i>Buy it now</i><span id="spn_bin" class="btn-b psb-b psb-S"><a id="but_bin" href="javascript:parent.document.location.href='http://orders.ebay.in/ws/eBayISAPI.dll?CreateOrder&amp;action=add&amp;itemId=390497602738&amp;_trksid=p2046780.l3198'" title="" attr="value">Buy it now</a><b id="txt_bin">Buy it now</b></span></b></span></td></tr><tr><td style="height:4px;" colspan="3"><div style="width:100%;height:1px;background-color:#DDD"></div></td></tr><tr><td rowspan="2" style="height:145px;width:160px;text-align:center;" align="center"><div style="width: 100px;height:140px;"><a href="/ci/Deception-Point-/9468213?frmPg=4&amp;frmPgTx=dan brown&amp;deck=1&amp;schcatid=267" target="_parent" class="ebayLVTracking_clickthru" clickid="image_catalog"><img onerror="onFallBack(this,1)" border="0" src="http://66.211.164.72/bookImages/9780552161244.jpg" style="width: 100px;height:140px;"></a></div></td><td style="vertical-align:top;"><table><tr><td><a href="/ci/Deception-Point-/9468213?frmPg=4&amp;frmPgTx=dan brown&amp;schcatid=267" target="_parent" class="ebayLVTracking_clickthru" clickid="catalog"><span><span style="font-size:12px;font-family:Arial, Helvetica, sans-serif;color:#003DAD;font-weight:bold;">Deception Point</span><span style="font-size:11px;font-family:Arial, Helvetica, sans-serif;color:#003DAD;font-style:italic;"> by Dan Brown</span></span></a></td></tr><tr><td><label style="font-size:11px;font-family:Arial, Helvetica, sans-serif;font-style:italic;color:#777;">When a new NASA satellite detects evidence of an astonishingly rare object buried deep in the Arctic ice, the floundering space agency proclaims a much-needed victorya victory that has profound implications for U.S. space policy...</label></td></tr></table></td><td align="right" style="width:138px;vertical-align:top;" rowspan="2"><img src="http://pics.ebaystatic.com/aw/in/aboutebay/imgOutofStock_books.jpg" style="display:none" id="outofstock4"></td></tr><tr><td style="vertical-align:top;"><div style="color:#848484;height:20px;width:60px" id="othersellerlistingthrobber4">Loading...</div><iframe src="/othersellerlisting?key=Deception Point&amp;index=4&amp;isap=false&amp;prodid=9468213" height="60" frameborder="0" style="overflow:hidden"></iframe></td></tr><tr><td style="height:4px;" colspan="3"><div style="width:100%;height:1px;background-color:#DDD"></div></td></tr><tr><td rowspan="2" style="height:145px;width:160px;text-align:center;" align="center"><div style="width: 100px;height:140px;"><div style="padding-top:5px;margin-left:80px;margin-top:-5px;width:36px;height:36px;width:36px;height:36px;background-image: url(&quot;http://pics.ebaystatic.com/aw/in/books/ico_discountbooks.png&quot;);background-repeat:no-repeat;vertical-align:middle;position: absolute;"><span style="font-size:10px;text-align:center;font-weight:bold;">20%<br>OFF</span></div><a href="/ci/Digital-Fortress-/9468214?frmPg=4&amp;frmPgTx=dan brown&amp;deck=1&amp;schcatid=267" target="_parent" class="ebayLVTracking_clickthru" clickid="image_catalog"><img onerror="onFallBack(this,1)" border="0" src="http://66.211.164.72/bookImages/9780552161251.jpg" style="width: 100px;height:140px;"></a></div></td><td style="vertical-align:top;"><table><tr><td><a href="/ci/Digital-Fortress-/9468214?frmPg=4&amp;frmPgTx=dan brown&amp;schcatid=267" target="_parent" class="ebayLVTracking_clickthru" clickid="catalog"><span><span style="font-size:12px;font-family:Arial, Helvetica, sans-serif;color:#003DAD;font-weight:bold;">Digital Fortress</span><span style="font-size:11px;font-family:Arial, Helvetica, sans-serif;color:#003DAD;font-style:italic;"> by Dan Brown</span></span></a></td></tr><tr><td><label style="font-size:11px;font-family:Arial, Helvetica, sans-serif;font-style:italic;color:#777;">When the National Security Agencys invincible code-breaking machine encounters a mysterious code it cannot break, the agency calls in its head cryptographer, Susan Fletcher, a brilliant, beautiful mathematician. What she uncover...</label></td></tr></table></td><td align="right" style="vertical-align:top;"><table style="font-size:10.5px;font-family:Arial, Helvetica, sans-serif;color:#777;"><tr><td style="text-align:right;">Buy New:</td><td style="font-size:12px;font-family:Arial, Helvetica, sans-serif;font-weight:bold;color:#777;"><img src="http://pics.ebaystatic.com/aw/in/books/img_rupee_srp_mrp.gif" style="height:8px;width:6px;"> 319.00</td></tr><tr><td style="text-align:right;">MRP:</td><td style="font-size:10.5px;font-family:Arial, Helvetica, sans-serif;color:#777;text-decoration: line-through;"><span><img src="http://pics.ebaystatic.com/aw/in/books/img_rupee_srp_mrp.gif" style="height:8px;width:6px;"></span> 399.00</td></tr><tr><td style="text-align:right;">You Save:</td><td style="font-size:10.5px;font-family:Arial, Helvetica, sans-serif;color:#6C3;"><img src="http://pics.ebaystatic.com/aw/in/books/img_rupee_srp_yousave.gif" style="height:8px;width:6px;"> 80.00</td></tr><tr><td style="text-align:right;">Shipping:</td><td><span>Free</span><span style="font-size:10.5px;font-family:Arial, Helvetica, sans-serif;color:#777;font-weight:bold;">, 5 Days</span></td></tr></table></td></tr><tr><td style="vertical-align:top;"><div style="color:#848484;height:20px;width:60px" id="othersellerlistingthrobber5">Loading...</div><iframe src="/othersellerlisting?key=Digital Fortress&amp;index=5&amp;isap=true&amp;prodid=9468214" height="60" frameborder="0" style="overflow:hidden"></iframe></td><td align="right" style="width:138px;vertical-align:top;"><span><b id="bin" class="btn-w btn-m psb-S"><i>Buy it now</i><span id="spn_bin" class="btn-b psb-b psb-S"><a id="but_bin" href="javascript:parent.document.location.href='http://orders.ebay.in/ws/eBayISAPI.dll?CreateOrder&amp;action=add&amp;itemId=390497601623&amp;_trksid=p2046780.l3198'" title="" attr="value">Buy it now</a><b id="txt_bin">Buy it now</b></span></b></span></td></tr><tr><td style="height:4px;" colspan="3"><div style="width:100%;height:1px;background-color:#DDD"></div></td></tr><tr><td rowspan="2" style="height:145px;width:160px;text-align:center;" align="center"><div style="width: 100px;height:140px;"><div style="padding-top:5px;margin-left:80px;margin-top:-5px;width:36px;height:36px;width:36px;height:36px;background-image: url(&quot;http://pics.ebaystatic.com/aw/in/books/ico_discountbooks.png&quot;);background-repeat:no-repeat;vertical-align:middle;position: absolute;"><span style="font-size:10px;text-align:center;font-weight:bold;">20%<br>OFF</span></div><a href="/ci/Angels-&amp;-Demons-(movie-tie-in)-/9919569?frmPg=4&amp;frmPgTx=dan brown&amp;deck=1&amp;schcatid=267" target="_parent" class="ebayLVTracking_clickthru" clickid="image_catalog"><img onerror="onFallBack(this,1)" border="0" src="http://66.211.164.72/bookImages/9781439142356.jpg" style="width: 100px;height:140px;"></a></div></td><td style="vertical-align:top;"><table><tr><td><a href="/ci/Angels-&amp;-Demons-(movie-tie-in)-/9919569?frmPg=4&amp;frmPgTx=dan brown&amp;schcatid=267" target="_parent" class="ebayLVTracking_clickthru" clickid="catalog"><span><span style="font-size:12px;font-family:Arial, Helvetica, sans-serif;color:#003DAD;font-weight:bold;">Angels &amp; Demons (movie tie-in)</span><span style="font-size:11px;font-family:Arial, Helvetica, sans-serif;color:#003DAD;font-style:italic;"> by Brown Dan</span></span></a></td></tr><tr><td><label style="font-size:11px;font-family:Arial, Helvetica, sans-serif;font-style:italic;color:#777;">From the #1 New York Times bestselling author of The Da Vinci Code comes the book that started it all—the first explosive adventure for world-renowned symbologist Robert Langdon.World-renowned Harvard symbologist Robert ...</label></td></tr></table></td><td align="right" style="vertical-align:top;"><table style="font-size:10.5px;font-family:Arial, Helvetica, sans-serif;color:#777;"><tr><td style="text-align:right;">Buy New:</td><td style="font-size:12px;font-family:Arial, Helvetica, sans-serif;font-weight:bold;color:#777;"><img src="http://pics.ebaystatic.com/aw/in/books/img_rupee_srp_mrp.gif" style="height:8px;width:6px;"> 257.00</td></tr><tr><td style="text-align:right;">MRP:</td><td style="font-size:10.5px;font-family:Arial, Helvetica, sans-serif;color:#777;text-decoration: line-through;"><span><img src="http://pics.ebaystatic.com/aw/in/books/img_rupee_srp_mrp.gif" style="height:8px;width:6px;"></span> 321.00</td></tr><tr><td style="text-align:right;">You Save:</td><td style="font-size:10.5px;font-family:Arial, Helvetica, sans-serif;color:#6C3;"><img src="http://pics.ebaystatic.com/aw/in/books/img_rupee_srp_yousave.gif" style="height:8px;width:6px;"> 64.00</td></tr><tr><td style="text-align:right;">Shipping:</td><td><span>Free</span><span style="font-size:10.5px;font-family:Arial, Helvetica, sans-serif;color:#777;font-weight:bold;">, 5 Days</span></td></tr></table></td></tr><tr><td style="vertical-align:top;"><div style="color:#848484;height:20px;width:60px" id="othersellerlistingthrobber6">Loading...</div><iframe src="/othersellerlisting?key=Angels &amp; Demons (movie tie-in)&amp;index=6&amp;isap=true&amp;prodid=9919569" height="60" frameborder="0" style="overflow:hidden"></iframe></td><td align="right" style="width:138px;vertical-align:top;"><span><b id="bin" class="btn-w btn-m psb-S"><i>Buy it now</i><span id="spn_bin" class="btn-b psb-b psb-S"><a id="but_bin" href="javascript:parent.document.location.href='http://orders.ebay.in/ws/eBayISAPI.dll?CreateOrder&amp;action=add&amp;itemId=390509085740&amp;_trksid=p2046780.l3198'" title="" attr="value">Buy it now</a><b id="txt_bin">Buy it now</b></span></b></span></td></tr><tr><td style="height:4px;" colspan="3"><div style="width:100%;height:1px;background-color:#DDD"></div></td></tr><tr><td rowspan="2" style="height:145px;width:160px;text-align:center;" align="center"><div style="width: 100px;height:140px;"><div style="padding-top:5px;margin-left:80px;margin-top:-5px;width:36px;height:36px;width:36px;height:36px;background-image: url(&quot;http://pics.ebaystatic.com/aw/in/books/ico_discountbooks.png&quot;);background-repeat:no-repeat;vertical-align:middle;position: absolute;"><span style="font-size:10px;text-align:center;font-weight:bold;">20%<br>OFF</span></div><a href="/ci/THE-LOST-SYMBOL-(CD)-/9918462?frmPg=4&amp;frmPgTx=dan brown&amp;deck=1&amp;schcatid=267" target="_parent" class="ebayLVTracking_clickthru" clickid="image_catalog"><img onerror="onFallBack(this,1)" border="0" src="http://66.211.164.72/bookImages/9780752869599.jpg" style="width: 100px;height:140px;"></a></div></td><td style="vertical-align:top;"><table><tr><td><a href="/ci/THE-LOST-SYMBOL-(CD)-/9918462?frmPg=4&amp;frmPgTx=dan brown&amp;schcatid=267" target="_parent" class="ebayLVTracking_clickthru" clickid="catalog"><span><span style="font-size:12px;font-family:Arial, Helvetica, sans-serif;color:#003DAD;font-weight:bold;">THE LOST SYMBOL (CD)</span><span style="font-size:11px;font-family:Arial, Helvetica, sans-serif;color:#003DAD;font-style:italic;"> by Dan Brown</span></span></a></td></tr><tr><td><label style="font-size:11px;font-family:Arial, Helvetica, sans-serif;font-style:italic;color:#777;">Six years in the writing, "The Lost Symbol" is Dan Brown's extraordinary sequel to his internationally bestselling Robert Langdon thrillers, "Angels &amp; Demons" and "The Da Vinci Code". Nothing is ever what it first appears in a D...</label></td></tr></table></td><td align="right" style="vertical-align:top;"><table style="font-size:10.5px;font-family:Arial, Helvetica, sans-serif;color:#777;"><tr><td style="text-align:right;">Buy New:</td><td style="font-size:12px;font-family:Arial, Helvetica, sans-serif;font-weight:bold;color:#777;"><img src="http://pics.ebaystatic.com/aw/in/books/img_rupee_srp_mrp.gif" style="height:8px;width:6px;"> 636.00</td></tr><tr><td style="text-align:right;">MRP:</td><td style="font-size:10.5px;font-family:Arial, Helvetica, sans-serif;color:#777;text-decoration: line-through;"><span><img src="http://pics.ebaystatic.com/aw/in/books/img_rupee_srp_mrp.gif" style="height:8px;width:6px;"></span> 795.00</td></tr><tr><td style="text-align:right;">You Save:</td><td style="font-size:10.5px;font-family:Arial, Helvetica, sans-serif;color:#6C3;"><img src="http://pics.ebaystatic.com/aw/in/books/img_rupee_srp_yousave.gif" style="height:8px;width:6px;"> 159.00</td></tr><tr><td style="text-align:right;">Shipping:</td><td><span>Free</span><span style="font-size:10.5px;font-family:Arial, Helvetica, sans-serif;color:#777;font-weight:bold;">, 10 Days</span></td></tr></table></td></tr><tr><td style="vertical-align:top;"><div style="color:#848484;height:20px;width:60px" id="othersellerlistingthrobber7">Loading...</div><iframe src="/othersellerlisting?key=THE LOST SYMBOL (CD)&amp;index=7&amp;isap=true&amp;prodid=9918462" height="60" frameborder="0" style="overflow:hidden"></iframe></td><td align="right" style="width:138px;vertical-align:top;"><span><b id="bin" class="btn-w btn-m psb-S"><i>Buy it now</i><span id="spn_bin" class="btn-b psb-b psb-S"><a id="but_bin" href="javascript:parent.document.location.href='http://orders.ebay.in/ws/eBayISAPI.dll?CreateOrder&amp;action=add&amp;itemId=390492832272&amp;_trksid=p2046780.l3198'" title="" attr="value">Buy it now</a><b id="txt_bin">Buy it now</b></span></b></span></td></tr><tr><td style="height:4px;" colspan="3"><div style="width:100%;height:1px;background-color:#DDD"></div></td></tr><tr><td rowspan="2" style="height:145px;width:160px;text-align:center;" align="center"><div style="width: 100px;height:140px;"><div style="padding-top:5px;margin-left:80px;margin-top:-5px;width:36px;height:36px;width:36px;height:36px;background-image: url(&quot;http://pics.ebaystatic.com/aw/in/books/ico_discountbooks.png&quot;);background-repeat:no-repeat;vertical-align:middle;position: absolute;"><span style="font-size:10px;text-align:center;font-weight:bold;">20%<br>OFF</span></div><a href="/ci/Angels-&amp;-Demons-/1335903?frmPg=4&amp;frmPgTx=dan brown&amp;deck=1&amp;schcatid=267" target="_parent" class="ebayLVTracking_clickthru" clickid="image_catalog"><img onerror="onFallBack(this,1)" border="0" src="http://66.211.164.72/bookImages/9781416580829.jpg" style="width: 100px;height:140px;"></a></div></td><td style="vertical-align:top;"><table><tr><td><a href="/ci/Angels-&amp;-Demons-/1335903?frmPg=4&amp;frmPgTx=dan brown&amp;schcatid=267" target="_parent" class="ebayLVTracking_clickthru" clickid="catalog"><span><span style="font-size:12px;font-family:Arial, Helvetica, sans-serif;color:#003DAD;font-weight:bold;">Angels &amp; Demons</span><span style="font-size:11px;font-family:Arial, Helvetica, sans-serif;color:#003DAD;font-style:italic;"> by Dan Brown</span></span></a></td></tr><tr><td><label style="font-size:11px;font-family:Arial, Helvetica, sans-serif;font-style:italic;color:#777;">-</label></td></tr></table></td><td align="right" style="vertical-align:top;"><table style="font-size:10.5px;font-family:Arial, Helvetica, sans-serif;color:#777;"><tr><td style="text-align:right;">Buy New:</td><td style="font-size:12px;font-family:Arial, Helvetica, sans-serif;font-weight:bold;color:#777;"><img src="http://pics.ebaystatic.com/aw/in/books/img_rupee_srp_mrp.gif" style="height:8px;width:6px;"> 319.00</td></tr><tr><td style="text-align:right;">MRP:</td><td style="font-size:10.5px;font-family:Arial, Helvetica, sans-serif;color:#777;text-decoration: line-through;"><span><img src="http://pics.ebaystatic.com/aw/in/books/img_rupee_srp_mrp.gif" style="height:8px;width:6px;"></span> 399.00</td></tr><tr><td style="text-align:right;">You Save:</td><td style="font-size:10.5px;font-family:Arial, Helvetica, sans-serif;color:#6C3;"><img src="http://pics.ebaystatic.com/aw/in/books/img_rupee_srp_yousave.gif" style="height:8px;width:6px;"> 80.00</td></tr><tr><td style="text-align:right;">Shipping:</td><td><span>Free</span><span style="font-size:10.5px;font-family:Arial, Helvetica, sans-serif;color:#777;font-weight:bold;">, 5 Days</span></td></tr></table></td></tr><tr><td style="vertical-align:top;"><div style="color:#848484;height:20px;width:60px" id="othersellerlistingthrobber8">Loading...</div><iframe src="/othersellerlisting?key=Angels &amp; Demons&amp;index=8&amp;isap=true&amp;prodid=1335903" height="60" frameborder="0" style="overflow:hidden"></iframe></td><td align="right" style="width:138px;vertical-align:top;"><span><b id="bin" class="btn-w btn-m psb-S"><i>Buy it now</i><span id="spn_bin" class="btn-b psb-b psb-S"><a id="but_bin" href="javascript:parent.document.location.href='http://orders.ebay.in/ws/eBayISAPI.dll?CreateOrder&amp;action=add&amp;itemId=390497601693&amp;_trksid=p2046780.l3198'" title="" attr="value">Buy it now</a><b id="txt_bin">Buy it now</b></span></b></span></td></tr><tr><td style="height:4px;" colspan="3"><div style="width:100%;height:1px;background-color:#DDD"></div></td></tr><tr><td rowspan="2" style="height:145px;width:160px;text-align:center;" align="center"><div style="width: 100px;height:140px;"><div style="padding-top:5px;margin-left:80px;margin-top:-5px;width:36px;height:36px;width:36px;height:36px;background-image: url(&quot;http://pics.ebaystatic.com/aw/in/books/ico_discountbooks.png&quot;);background-repeat:no-repeat;vertical-align:middle;position: absolute;"><span style="font-size:10px;text-align:center;font-weight:bold;">20%<br>OFF</span></div><a href="/ci/Digital-Fortress-/874697?frmPg=4&amp;frmPgTx=dan brown&amp;deck=1&amp;schcatid=267" target="_parent" class="ebayLVTracking_clickthru" clickid="image_catalog"><img onerror="onFallBack(this,1)" border="0" src="http://66.211.164.72/bookImages/9780312944926.jpg" style="width: 100px;height:140px;"></a></div></td><td style="vertical-align:top;"><table><tr><td><a href="/ci/Digital-Fortress-/874697?frmPg=4&amp;frmPgTx=dan brown&amp;schcatid=267" target="_parent" class="ebayLVTracking_clickthru" clickid="catalog"><span><span style="font-size:12px;font-family:Arial, Helvetica, sans-serif;color:#003DAD;font-weight:bold;">Digital Fortress</span><span style="font-size:11px;font-family:Arial, Helvetica, sans-serif;color:#003DAD;font-style:italic;"> by Brown, Dan</span></span></a></td></tr><tr><td><label style="font-size:11px;font-family:Arial, Helvetica, sans-serif;font-style:italic;color:#777;">When the NSA's invincible code-breaking machine encounters a mysterious code it cannot break, the agency calls its head cryptographer, Susan Fletcher, a brilliant, beautiful mathematician. What she uncovers sends shock waves thr...</label></td></tr></table></td><td align="right" style="vertical-align:top;"><table style="font-size:10.5px;font-family:Arial, Helvetica, sans-serif;color:#777;"><tr><td style="text-align:right;">Buy New:</td><td style="font-size:12px;font-family:Arial, Helvetica, sans-serif;font-weight:bold;color:#777;"><img src="http://pics.ebaystatic.com/aw/in/books/img_rupee_srp_mrp.gif" style="height:8px;width:6px;"> 319.00</td></tr><tr><td style="text-align:right;">MRP:</td><td style="font-size:10.5px;font-family:Arial, Helvetica, sans-serif;color:#777;text-decoration: line-through;"><span><img src="http://pics.ebaystatic.com/aw/in/books/img_rupee_srp_mrp.gif" style="height:8px;width:6px;"></span> 399.00</td></tr><tr><td style="text-align:right;">You Save:</td><td style="font-size:10.5px;font-family:Arial, Helvetica, sans-serif;color:#6C3;"><img src="http://pics.ebaystatic.com/aw/in/books/img_rupee_srp_yousave.gif" style="height:8px;width:6px;"> 80.00</td></tr><tr><td style="text-align:right;">Shipping:</td><td><span>Free</span><span style="font-size:10.5px;font-family:Arial, Helvetica, sans-serif;color:#777;font-weight:bold;">, 5 Days</span></td></tr></table></td></tr><tr><td style="vertical-align:top;"><div style="color:#848484;height:20px;width:60px" id="othersellerlistingthrobber9">Loading...</div><iframe src="/othersellerlisting?key=Digital Fortress&amp;index=9&amp;isap=true&amp;prodid=874697" height="60" frameborder="0" style="overflow:hidden"></iframe></td><td align="right" style="width:138px;vertical-align:top;"><span><b id="bin" class="btn-w btn-m psb-S"><i>Buy it now</i><span id="spn_bin" class="btn-b psb-b psb-S"><a id="but_bin" href="javascript:parent.document.location.href='http://orders.ebay.in/ws/eBayISAPI.dll?CreateOrder&amp;action=add&amp;itemId=390490835267&amp;_trksid=p2046780.l3198'" title="" attr="value">Buy it now</a><b id="txt_bin">Buy it now</b></span></b></span></td></tr><tr><td style="height:4px;" colspan="3"><div style="width:100%;height:1px;background-color:#DDD"></div></td></tr><tr><td rowspan="2" style="height:145px;width:160px;text-align:center;" align="center"><div style="width: 100px;height:140px;"><a href="/ci/Impatient-Pamela-Calls-9-1-1-/8280641?frmPg=4&amp;frmPgTx=dan brown&amp;deck=1&amp;schcatid=267" target="_parent" class="ebayLVTracking_clickthru" clickid="image_catalog"><img onerror="onFallBack(this,1)" border="0" src="http://66.211.164.72/bookImages/091/9781930650091.jpg" style="width: 100px;height:140px;"></a></div></td><td style="vertical-align:top;"><table><tr><td><a href="/ci/Impatient-Pamela-Calls-9-1-1-/8280641?frmPg=4&amp;frmPgTx=dan brown&amp;schcatid=267" target="_parent" class="ebayLVTracking_clickthru" clickid="catalog"><span><span style="font-size:12px;font-family:Arial, Helvetica, sans-serif;color:#003DAD;font-weight:bold;">Impatient Pamela Calls 9-1-1</span><span style="font-size:11px;font-family:Arial, Helvetica, sans-serif;color:#003DAD;font-style:italic;"> by Koski, Mary, Brown, Dan, Brown, Dan S.</span></span></a></td></tr><tr><td><label style="font-size:11px;font-family:Arial, Helvetica, sans-serif;font-style:italic;color:#777;">"Young readers of this exceptionally well-conceived and executed picture book will identify with Pamela and become better equipped to handle emergency 9-1-1 phone calls should the need ever arise."--"Children's Bookwatch""...</label></td></tr></table></td><td align="right" style="width:138px;vertical-align:top;" rowspan="2"><img src="http://pics.ebaystatic.com/aw/in/aboutebay/imgOutofStock_books.jpg" style="display:none" id="outofstock10"></td></tr><tr><td style="vertical-align:top;"><div style="color:#848484;height:20px;width:60px" id="othersellerlistingthrobber10">Loading...</div><iframe src="/othersellerlisting?key=Impatient Pamela Calls 9-1-1&amp;index=10&amp;isap=false&amp;prodid=8280641" height="60" frameborder="0" style="overflow:hidden"></iframe></td></tr><tr><td style="height:4px;" colspan="3"><div style="width:100%;height:1px;background-color:#DDD"></div></td></tr><tr><td rowspan="2" style="height:145px;width:160px;text-align:center;" align="center"><div style="width: 100px;height:140px;"><a href="/ci/Mastering-Information-Retrieval-and-Probabilistic-Decision-Intelligence-Technology-(Hb)-/8540895?frmPg=4&amp;frmPgTx=dan brown&amp;deck=1&amp;schcatid=267" target="_parent" class="ebayLVTracking_clickthru" clickid="image_catalog"><img onerror="onFallBack(this,1)" border="0" src="http://66.211.164.72/bookImages/805/9781843340805.jpg" style="width: 100px;height:140px;"></a></div></td><td style="vertical-align:top;"><table><tr><td><a href="/ci/Mastering-Information-Retrieval-and-Probabilistic-Decision-Intelligence-Technology-(Hb)-/8540895?frmPg=4&amp;frmPgTx=dan brown&amp;schcatid=267" target="_parent" class="ebayLVTracking_clickthru" clickid="catalog"><span><span style="font-size:12px;font-family:Arial, Helvetica, sans-serif;color:#003DAD;font-weight:bold;">Mastering Information Retrieval and Probabilisti...</span><span style="font-size:11px;font-family:Arial, Helvetica, sans-serif;color:#003DAD;font-style:italic;"> by Brown, Daniel, Brown, Dan</span></span></a></td></tr><tr><td><label style="font-size:11px;font-family:Arial, Helvetica, sans-serif;font-style:italic;color:#777;">Summary This book is about the management of information and its focus to people empowered to make decisions. It provides managers and students of information with the resources to understand and start to deploy Information Retr...</label></td></tr></table></td><td align="right" style="width:138px;vertical-align:top;" rowspan="2"><img src="http://pics.ebaystatic.com/aw/in/aboutebay/imgOutofStock_books.jpg" style="display:none" id="outofstock11"></td></tr><tr><td style="vertical-align:top;"><div style="color:#848484;height:20px;width:60px" id="othersellerlistingthrobber11">Loading...</div><iframe src="/othersellerlisting?key=Mastering Information Retrieval and Probabilistic Decision Intelligence Technology (Hb)&amp;index=11&amp;isap=false&amp;prodid=8540895" height="60" frameborder="0" style="overflow:hidden"></iframe></td></tr><tr><td style="height:4px;" colspan="3"><div style="width:100%;height:1px;background-color:#DDD"></div></td></tr><tr><td rowspan="2" style="height:145px;width:160px;text-align:center;" align="center"><div style="width: 100px;height:140px;"><a href="/ci/Mastering-Information-Retrieval-and-Probabilistic-Decision-Intelligence-Technology-/8540894?frmPg=4&amp;frmPgTx=dan brown&amp;deck=1&amp;schcatid=267" target="_parent" class="ebayLVTracking_clickthru" clickid="image_catalog"><img onerror="onFallBack(this,1)" border="0" src="http://66.211.164.72/bookImages/799/9781843340799.jpg" style="width: 100px;height:140px;"></a></div></td><td style="vertical-align:top;"><table><tr><td><a href="/ci/Mastering-Information-Retrieval-and-Probabilistic-Decision-Intelligence-Technology-/8540894?frmPg=4&amp;frmPgTx=dan brown&amp;schcatid=267" target="_parent" class="ebayLVTracking_clickthru" clickid="catalog"><span><span style="font-size:12px;font-family:Arial, Helvetica, sans-serif;color:#003DAD;font-weight:bold;">Mastering Information Retrieval and Probabilisti...</span><span style="font-size:11px;font-family:Arial, Helvetica, sans-serif;color:#003DAD;font-style:italic;"> by Brown, Dan, Brown, Daniel</span></span></a></td></tr><tr><td><label style="font-size:11px;font-family:Arial, Helvetica, sans-serif;font-style:italic;color:#777;">Summary This book is about the management of information and its focus to people empowered to make decisions. It provides managers and students of information with the resources to understand and start to deploy Information Retr...</label></td></tr></table></td><td align="right" style="width:138px;vertical-align:top;" rowspan="2"><img src="http://pics.ebaystatic.com/aw/in/aboutebay/imgOutofStock_books.jpg" style="display:none" id="outofstock12"></td></tr><tr><td style="vertical-align:top;"><div style="color:#848484;height:20px;width:60px" id="othersellerlistingthrobber12">Loading...</div><iframe src="/othersellerlisting?key=Mastering Information Retrieval and Probabilistic Decision Intelligence Technology&amp;index=12&amp;isap=false&amp;prodid=8540894" height="60" frameborder="0" style="overflow:hidden"></iframe></td></tr><tr><td style="height:4px;" colspan="3"><div style="width:100%;height:1px;background-color:#DDD"></div></td></tr><tr><td rowspan="2" style="height:145px;width:160px;text-align:center;" align="center"><div style="width: 100px;height:140px;"><a href="/ci/In-Pursuit-of-C.-S.-Lewis:-Adventures-in-Collecting-His-Works-/7550298?frmPg=4&amp;frmPgTx=dan brown&amp;deck=1&amp;schcatid=267" target="_parent" class="ebayLVTracking_clickthru" clickid="image_catalog"><img onerror="onFallBack(this,1)" border="0" src="http://66.211.164.72/bookImages/131/9780979484131.jpg" style="width: 100px;height:140px;"></a></div></td><td style="vertical-align:top;"><table><tr><td><a href="/ci/In-Pursuit-of-C.-S.-Lewis:-Adventures-in-Collecting-His-Works-/7550298?frmPg=4&amp;frmPgTx=dan brown&amp;schcatid=267" target="_parent" class="ebayLVTracking_clickthru" clickid="catalog"><span><span style="font-size:12px;font-family:Arial, Helvetica, sans-serif;color:#003DAD;font-weight:bold;">In Pursuit of C. S. Lewis: Adventures in Collect...</span><span style="font-size:11px;font-family:Arial, Helvetica, sans-serif;color:#003DAD;font-style:italic;"> by Brown, Edwin W., Brown, M. D. Edwin W, Hamilton, Dan</span></span></a></td></tr><tr><td><label style="font-size:11px;font-family:Arial, Helvetica, sans-serif;font-style:italic;color:#777;">Behind the Edwin W. Brown Collection at Taylor University -- one of the world's finest holdings of C. S. Lewis first editions, letters, and manuscripts -- are tales of thirty years of warm and humorous adventures, tales of curio...</label></td></tr></table></td><td align="right" style="width:138px;vertical-align:top;" rowspan="2"><img src="http://pics.ebaystatic.com/aw/in/aboutebay/imgOutofStock_books.jpg" style="display:none" id="outofstock13"></td></tr><tr><td style="vertical-align:top;"><div style="color:#848484;height:20px;width:60px" id="othersellerlistingthrobber13">Loading...</div><iframe src="/othersellerlisting?key=In Pursuit of C. S. Lewis: Adventures in Collecting His Works&amp;index=13&amp;isap=false&amp;prodid=7550298" height="60" frameborder="0" style="overflow:hidden"></iframe></td></tr><tr><td style="height:4px;" colspan="3"><div style="width:100%;height:1px;background-color:#DDD"></div></td></tr><tr><td rowspan="2" style="height:145px;width:160px;text-align:center;" align="center"><div style="width: 100px;height:140px;"><a href="/ci/Guitar-Chord-Resource:-A-Complete-Approach-to-Using-Chords-[With-CD-(Audio)]-/9559494?frmPg=4&amp;frmPgTx=dan brown&amp;deck=1&amp;schcatid=267" target="_parent" class="ebayLVTracking_clickthru" clickid="image_catalog"><img onerror="onFallBack(this,1)" border="0" src="http://66.211.164.72/bookImages/967/9780739085967.jpg" style="width: 100px;height:140px;"></a></div></td><td style="vertical-align:top;"><table><tr><td><a href="/ci/Guitar-Chord-Resource:-A-Complete-Approach-to-Using-Chords-[With-CD-(Audio)]-/9559494?frmPg=4&amp;frmPgTx=dan brown&amp;schcatid=267" target="_parent" class="ebayLVTracking_clickthru" clickid="catalog"><span><span style="font-size:12px;font-family:Arial, Helvetica, sans-serif;color:#003DAD;font-weight:bold;">Guitar Chord Resource: A Complete Approach to Us...</span><span style="font-size:11px;font-family:Arial, Helvetica, sans-serif;color:#003DAD;font-style:italic;"> by Brown, Buck, Brown, Robert, Donnelly, Dan</span></span></a></td></tr><tr><td><label style="font-size:11px;font-family:Arial, Helvetica, sans-serif;font-style:italic;color:#777;">-</label></td></tr></table></td><td align="right" style="width:138px;vertical-align:top;" rowspan="2"><img src="http://pics.ebaystatic.com/aw/in/aboutebay/imgOutofStock_books.jpg" style="display:none" id="outofstock14"></td></tr><tr><td style="vertical-align:top;"><div style="color:#848484;height:20px;width:60px" id="othersellerlistingthrobber14">Loading...</div><iframe src="/othersellerlisting?key=Guitar Chord Resource: A Complete Approach to Using Chords [With CD (Audio)]&amp;index=14&amp;isap=false&amp;prodid=9559494" height="60" frameborder="0" style="overflow:hidden"></iframe></td></tr><tr><td style="height:4px;" colspan="3"><div style="width:100%;height:1px;background-color:#DDD"></div></td></tr><tr><td rowspan="2" style="height:145px;width:160px;text-align:center;" align="center"><div style="width: 100px;height:140px;"><a href="/ci/Viaje-a-Los-Escenarios-de-Dan-Brown-/9411260?frmPg=4&amp;frmPgTx=dan brown&amp;deck=1&amp;schcatid=267" target="_parent" class="ebayLVTracking_clickthru" clickid="image_catalog"><img onerror="onFallBack(this,1)" border="0" src="http://66.211.164.72/bookImages/554/9788403504554.jpg" style="width: 100px;height:140px;"></a></div></td><td style="vertical-align:top;"><table><tr><td><a href="/ci/Viaje-a-Los-Escenarios-de-Dan-Brown-/9411260?frmPg=4&amp;frmPgTx=dan brown&amp;schcatid=267" target="_parent" class="ebayLVTracking_clickthru" clickid="catalog"><span><span style="font-size:12px;font-family:Arial, Helvetica, sans-serif;color:#003DAD;font-weight:bold;">Viaje a Los Escenarios de Dan Brown</span><span style="font-size:11px;font-family:Arial, Helvetica, sans-serif;color:#003DAD;font-style:italic;"> by Mittelbach, Oliver</span></span></a></td></tr><tr><td><label style="font-size:11px;font-family:Arial, Helvetica, sans-serif;font-style:italic;color:#777;">Dan Brown's books come to life in the pages of this guide. The characters of The Da Vinci Code in Paris, London and Roslin, Angels and Demons in Rome and in Seville, reveal to us where they lived their most exciting moments, and...</label></td></tr></table></td><td align="right" style="width:138px;vertical-align:top;" rowspan="2"><img src="http://pics.ebaystatic.com/aw/in/aboutebay/imgOutofStock_books.jpg" style="display:none" id="outofstock15"></td></tr><tr><td style="vertical-align:top;"><div style="color:#848484;height:20px;width:60px" id="othersellerlistingthrobber15">Loading...</div><iframe src="/othersellerlisting?key=Viaje a Los Escenarios de Dan Brown&amp;index=15&amp;isap=false&amp;prodid=9411260" height="60" frameborder="0" style="overflow:hidden"></iframe></td></tr><tr><td style="height:4px;" colspan="3"><div style="width:100%;height:1px;background-color:#DDD"></div></td></tr><tr><td rowspan="2" style="height:145px;width:160px;text-align:center;" align="center"><div style="width: 100px;height:140px;"><a href="/ci/Articles-on-1950-Fictional-Characters-Debuts,-Including:-Charlie-Brown,-Dan-Dare,-Lana-Lang,-Shermy-(Peanuts),-Apache-Kid,-Deadshot,-Patty-(Peanuts),-/5908075?frmPg=4&amp;frmPgTx=dan brown&amp;deck=1&amp;schcatid=267" target="_parent" class="ebayLVTracking_clickthru" clickid="image_catalog"><img onerror="onFallBack(this,1)" border="0" src="http://66.211.164.72/bookImages/982/9781244172982.jpg" style="width: 100px;height:140px;"></a></div></td><td style="vertical-align:top;"><table><tr><td><a href="/ci/Articles-on-1950-Fictional-Characters-Debuts,-Including:-Charlie-Brown,-Dan-Dare,-Lana-Lang,-Shermy-(Peanuts),-Apache-Kid,-Deadshot,-Patty-(Peanuts),-/5908075?frmPg=4&amp;frmPgTx=dan brown&amp;schcatid=267" target="_parent" class="ebayLVTracking_clickthru" clickid="catalog"><span><span style="font-size:12px;font-family:Arial, Helvetica, sans-serif;color:#003DAD;font-weight:bold;">Articles on 1950 Fictional Characters Debuts, In...</span><span style="font-size:11px;font-family:Arial, Helvetica, sans-serif;color:#003DAD;font-style:italic;"> by Hephaestus Books</span></span></a></td></tr><tr><td><label style="font-size:11px;font-family:Arial, Helvetica, sans-serif;font-style:italic;color:#777;">Hephaestus Books represents a new publishing paradigm, allowing disparate content sources to be curated into cohesive, relevant, and informative books. To date, this content has been curated from Wikipedia articles and images un...</label></td></tr></table></td><td align="right" style="width:138px;vertical-align:top;" rowspan="2"><img src="http://pics.ebaystatic.com/aw/in/aboutebay/imgOutofStock_books.jpg" style="display:none" id="outofstock16"></td></tr><tr><td style="vertical-align:top;"><div style="color:#848484;height:20px;width:60px" id="othersellerlistingthrobber16">Loading...</div><iframe src="/othersellerlisting?key=Articles on 1950 Fictional Characters Debuts, Including: Charlie Brown, Dan Dare, Lana Lang, Shermy (Peanuts), Apache Kid, Deadshot, Patty (Peanuts),&amp;index=16&amp;isap=false&amp;prodid=5908075" height="60" frameborder="0" style="overflow:hidden"></iframe></td></tr><tr><td style="height:4px;" colspan="3"><div style="width:100%;height:1px;background-color:#DDD"></div></td></tr><tr><td rowspan="2" style="height:145px;width:160px;text-align:center;" align="center"><div style="width: 100px;height:140px;"><a href="/ci/Picture-Book-of-George-Washinton-Carver-/6771300?frmPg=4&amp;frmPgTx=dan brown&amp;deck=1&amp;schcatid=267" target="_parent" class="ebayLVTracking_clickthru" clickid="image_catalog"><img onerror="onFallBack(this,1)" border="0" src="http://66.211.164.72/bookImages/493/9781430103493.jpg" style="width: 100px;height:140px;"></a></div></td><td style="vertical-align:top;"><table><tr><td><a href="/ci/Picture-Book-of-George-Washinton-Carver-/6771300?frmPg=4&amp;frmPgTx=dan brown&amp;schcatid=267" target="_parent" class="ebayLVTracking_clickthru" clickid="catalog"><span><span style="font-size:12px;font-family:Arial, Helvetica, sans-serif;color:#003DAD;font-weight:bold;">Picture Book of George Washinton Carver</span><span style="font-size:11px;font-family:Arial, Helvetica, sans-serif;color:#003DAD;font-style:italic;"> by Adler, David, Brown, Dan</span></span></a></td></tr><tr><td><label style="font-size:11px;font-family:Arial, Helvetica, sans-serif;font-style:italic;color:#777;">-</label></td></tr></table></td><td align="right" style="width:138px;vertical-align:top;" rowspan="2"><img src="http://pics.ebaystatic.com/aw/in/aboutebay/imgOutofStock_books.jpg" style="display:none" id="outofstock17"></td></tr><tr><td style="vertical-align:top;"><div style="color:#848484;height:20px;width:60px" id="othersellerlistingthrobber17">Loading...</div><iframe src="/othersellerlisting?key=Picture Book of George Washinton Carver&amp;index=17&amp;isap=false&amp;prodid=6771300" height="60" frameborder="0" style="overflow:hidden"></iframe></td></tr><tr><td style="height:4px;" colspan="3"><div style="width:100%;height:1px;background-color:#DDD"></div></td></tr><tr><td rowspan="2" style="height:145px;width:160px;text-align:center;" align="center"><div style="width: 100px;height:140px;"><a href="/ci/Picture-Book-of-George-Washinton-Carver-/6771299?frmPg=4&amp;frmPgTx=dan brown&amp;deck=1&amp;schcatid=267" target="_parent" class="ebayLVTracking_clickthru" clickid="image_catalog"><img onerror="onFallBack(this,1)" border="0" src="http://66.211.164.72/bookImages/462/9781430103462.jpg" style="width: 100px;height:140px;"></a></div></td><td style="vertical-align:top;"><table><tr><td><a href="/ci/Picture-Book-of-George-Washinton-Carver-/6771299?frmPg=4&amp;frmPgTx=dan brown&amp;schcatid=267" target="_parent" class="ebayLVTracking_clickthru" clickid="catalog"><span><span style="font-size:12px;font-family:Arial, Helvetica, sans-serif;color:#003DAD;font-weight:bold;">Picture Book of George Washinton Carver</span><span style="font-size:11px;font-family:Arial, Helvetica, sans-serif;color:#003DAD;font-style:italic;"> by Adler, David, Brown, Dan</span></span></a></td></tr><tr><td><label style="font-size:11px;font-family:Arial, Helvetica, sans-serif;font-style:italic;color:#777;">-</label></td></tr></table></td><td align="right" style="width:138px;vertical-align:top;" rowspan="2"><img src="http://pics.ebaystatic.com/aw/in/aboutebay/imgOutofStock_books.jpg" style="display:none" id="outofstock18"></td></tr><tr><td style="vertical-align:top;"><div style="color:#848484;height:20px;width:60px" id="othersellerlistingthrobber18">Loading...</div><iframe src="/othersellerlisting?key=Picture Book of George Washinton Carver&amp;index=18&amp;isap=false&amp;prodid=6771299" height="60" frameborder="0" style="overflow:hidden"></iframe></td></tr><tr><td style="height:4px;" colspan="3"><div style="width:100%;height:1px;background-color:#DDD"></div></td></tr><tr><td rowspan="2" style="height:145px;width:160px;text-align:center;" align="center"><div style="width: 100px;height:140px;"><a href="/ci/Angels-&amp;-Demons-/9023288?frmPg=4&amp;frmPgTx=dan brown&amp;deck=1&amp;schcatid=267" target="_parent" class="ebayLVTracking_clickthru" clickid="image_catalog"><img onerror="onFallBack(this,1)" border="0" src="http://66.211.164.72/bookImages/078/9784042955078.jpg" style="width: 100px;height:140px;"></a></div></td><td style="vertical-align:top;"><table><tr><td><a href="/ci/Angels-&amp;-Demons-/9023288?frmPg=4&amp;frmPgTx=dan brown&amp;schcatid=267" target="_parent" class="ebayLVTracking_clickthru" clickid="catalog"><span><span style="font-size:12px;font-family:Arial, Helvetica, sans-serif;color:#003DAD;font-weight:bold;">Angels &amp; Demons</span><span style="font-size:11px;font-family:Arial, Helvetica, sans-serif;color:#003DAD;font-style:italic;"> by Brown, Dan</span></span></a></td></tr><tr><td><label style="font-size:11px;font-family:Arial, Helvetica, sans-serif;font-style:italic;color:#777;">-</label></td></tr></table></td><td align="right" style="width:138px;vertical-align:top;" rowspan="2"><img src="http://pics.ebaystatic.com/aw/in/aboutebay/imgOutofStock_books.jpg" style="display:none" id="outofstock19"></td></tr><tr><td style="vertical-align:top;"><div style="color:#848484;height:20px;width:60px" id="othersellerlistingthrobber19">Loading...</div><iframe src="/othersellerlisting?key=Angels &amp; Demons&amp;index=19&amp;isap=false&amp;prodid=9023288" height="60" frameborder="0" style="overflow:hidden"></iframe></td></tr><tr><td style="height:4px;" colspan="3"><div style="width:100%;height:1px;background-color:#DDD"></div></td></tr><tr><td rowspan="2" style="height:145px;width:160px;text-align:center;" align="center"><div style="width: 100px;height:140px;"><a href="/ci/The-Lost-Symbol-/7798902?frmPg=4&amp;frmPgTx=dan brown&amp;deck=1&amp;schcatid=267" target="_parent" class="ebayLVTracking_clickthru" clickid="image_catalog"><img onerror="onFallBack(this,1)" border="0" src="http://66.211.164.72/bookImages/148/9781400079148.jpg" style="width: 100px;height:140px;"></a></div></td><td style="vertical-align:top;"><table><tr><td><a href="/ci/The-Lost-Symbol-/7798902?frmPg=4&amp;frmPgTx=dan brown&amp;schcatid=267" target="_parent" class="ebayLVTracking_clickthru" clickid="catalog"><span><span style="font-size:12px;font-family:Arial, Helvetica, sans-serif;color:#003DAD;font-weight:bold;">The Lost Symbol</span><span style="font-size:11px;font-family:Arial, Helvetica, sans-serif;color:#003DAD;font-style:italic;"> by Brown, Dan</span></span></a></td></tr><tr><td><label style="font-size:11px;font-family:Arial, Helvetica, sans-serif;font-style:italic;color:#777;">In this stunning follow-up to the global phenomenon "The Da Vinci Code, " Dan Brown demonstrates once again why he is the world's most popular thriller writer. "The Lost Symbol" is a masterstroke of storytelling that finds fa...</label></td></tr></table></td><td align="right" style="width:138px;vertical-align:top;" rowspan="2"><img src="http://pics.ebaystatic.com/aw/in/aboutebay/imgOutofStock_books.jpg" style="display:none" id="outofstock20"></td></tr><tr><td style="vertical-align:top;"><div style="color:#848484;height:20px;width:60px" id="othersellerlistingthrobber20">Loading...</div><iframe src="/othersellerlisting?key=The Lost Symbol&amp;index=20&amp;isap=false&amp;prodid=7798902" height="60" frameborder="0" style="overflow:hidden"></iframe></td></tr><tr><td style="height:4px;" colspan="3"><div style="width:100%;height:1px;background-color:#DDD"></div></td></tr><tr><td rowspan="2" style="height:145px;width:160px;text-align:center;" align="center"><div style="width: 100px;height:140px;"><a href="/ci/Lost-Symbol-V01-/9023295?frmPg=4&amp;frmPgTx=dan brown&amp;deck=1&amp;schcatid=267" target="_parent" class="ebayLVTracking_clickthru" clickid="image_catalog"><img onerror="onFallBack(this,1)" border="0" src="http://66.211.164.72/bookImages/272/9784047916272.jpg" style="width: 100px;height:140px;"></a></div></td><td style="vertical-align:top;"><table><tr><td><a href="/ci/Lost-Symbol-V01-/9023295?frmPg=4&amp;frmPgTx=dan brown&amp;schcatid=267" target="_parent" class="ebayLVTracking_clickthru" clickid="catalog"><span><span style="font-size:12px;font-family:Arial, Helvetica, sans-serif;color:#003DAD;font-weight:bold;">Lost Symbol V01</span><span style="font-size:11px;font-family:Arial, Helvetica, sans-serif;color:#003DAD;font-style:italic;"> by Brown, Dan</span></span></a></td></tr><tr><td><label style="font-size:11px;font-family:Arial, Helvetica, sans-serif;font-style:italic;color:#777;">-</label></td></tr></table></td><td align="right" style="width:138px;vertical-align:top;" rowspan="2"><img src="http://pics.ebaystatic.com/aw/in/aboutebay/imgOutofStock_books.jpg" style="display:none" id="outofstock21"></td></tr><tr><td style="vertical-align:top;"><div style="color:#848484;height:20px;width:60px" id="othersellerlistingthrobber21">Loading...</div><iframe src="/othersellerlisting?key=Lost Symbol V01&amp;index=21&amp;isap=false&amp;prodid=9023295" height="60" frameborder="0" style="overflow:hidden"></iframe></td></tr><tr><td style="height:4px;" colspan="3"><div style="width:100%;height:1px;background-color:#DDD"></div></td></tr><tr><td rowspan="2" style="height:145px;width:160px;text-align:center;" align="center"><div style="width: 100px;height:140px;"><a href="/ci/Lost-Symbol-V02-/9023296?frmPg=4&amp;frmPgTx=dan brown&amp;deck=1&amp;schcatid=267" target="_parent" class="ebayLVTracking_clickthru" clickid="image_catalog"><img onerror="onFallBack(this,1)" border="0" src="http://66.211.164.72/bookImages/289/9784047916289.jpg" style="width: 100px;height:140px;"></a></div></td><td style="vertical-align:top;"><table><tr><td><a href="/ci/Lost-Symbol-V02-/9023296?frmPg=4&amp;frmPgTx=dan brown&amp;schcatid=267" target="_parent" class="ebayLVTracking_clickthru" clickid="catalog"><span><span style="font-size:12px;font-family:Arial, Helvetica, sans-serif;color:#003DAD;font-weight:bold;">Lost Symbol V02</span><span style="font-size:11px;font-family:Arial, Helvetica, sans-serif;color:#003DAD;font-style:italic;"> by Brown, Dan</span></span></a></td></tr><tr><td><label style="font-size:11px;font-family:Arial, Helvetica, sans-serif;font-style:italic;color:#777;">-</label></td></tr></table></td><td align="right" style="width:138px;vertical-align:top;" rowspan="2"><img src="http://pics.ebaystatic.com/aw/in/aboutebay/imgOutofStock_books.jpg" style="display:none" id="outofstock22"></td></tr><tr><td style="vertical-align:top;"><div style="color:#848484;height:20px;width:60px" id="othersellerlistingthrobber22">Loading...</div><iframe src="/othersellerlisting?key=Lost Symbol V02&amp;index=22&amp;isap=false&amp;prodid=9023296" height="60" frameborder="0" style="overflow:hidden"></iframe></td></tr><tr><td style="height:4px;" colspan="3"><div style="width:100%;height:1px;background-color:#DDD"></div></td></tr><tr><td rowspan="2" style="height:145px;width:160px;text-align:center;" align="center"><div style="width: 100px;height:140px;"><a href="/ci/Angels-&amp;-Demons-/7848208?frmPg=4&amp;frmPgTx=dan brown&amp;deck=1&amp;schcatid=267" target="_parent" class="ebayLVTracking_clickthru" clickid="image_catalog"><img onerror="onFallBack(this,1)" border="0" src="http://66.211.164.72/bookImages/793/9781416524793.jpg" style="width: 100px;height:140px;"></a></div></td><td style="vertical-align:top;"><table><tr><td><a href="/ci/Angels-&amp;-Demons-/7848208?frmPg=4&amp;frmPgTx=dan brown&amp;schcatid=267" target="_parent" class="ebayLVTracking_clickthru" clickid="catalog"><span><span style="font-size:12px;font-family:Arial, Helvetica, sans-serif;color:#003DAD;font-weight:bold;">Angels &amp; Demons</span><span style="font-size:11px;font-family:Arial, Helvetica, sans-serif;color:#003DAD;font-style:italic;"> by Brown, Dan</span></span></a></td></tr><tr><td><label style="font-size:11px;font-family:Arial, Helvetica, sans-serif;font-style:italic;color:#777;">An ancient secret brotherhood. A devastating new weapon of destruction. An unthinkable target. World-renowned Harvard symbologist Robert Langdon is summoned to a Swiss research facility to analyze a cryptic symbol seared i...</label></td></tr></table></td><td align="right" style="width:138px;vertical-align:top;" rowspan="2"><img src="http://pics.ebaystatic.com/aw/in/aboutebay/imgOutofStock_books.jpg" style="display:none" id="outofstock23"></td></tr><tr><td style="vertical-align:top;"><div style="color:#848484;height:20px;width:60px" id="othersellerlistingthrobber23">Loading...</div><iframe src="/othersellerlisting?key=Angels &amp; Demons&amp;index=23&amp;isap=false&amp;prodid=7848208" height="60" frameborder="0" style="overflow:hidden"></iframe></td></tr></table><div><div class="pg-w"><table width="100%" cellspacing="0" cellpadding="0"><tr><td align="left" width="25%"><div class="pg-cnt"><span>Page </span><span class="pg-cw"><span id="PC_v4-0" class="pg-cpp">1</span><span>of 8</span></span></div></td><td id="PTD_v4-0" class="pg-cw"><b class="pg-lp" id="PP_v4-0"><i pagn="prev" class="pg-lad">&nbsp;</i></b><b class="pg-num" id="PGN_v4-0"><b>1</b><a href="/decksearchresults?frm=1&amp;catid=267&amp;pgno=2&amp;offset=24&amp;q=spell:dan brown">2</a><a href="/decksearchresults?frm=1&amp;catid=267&amp;pgno=3&amp;offset=48&amp;q=spell:dan brown">3</a><a href="/decksearchresults?frm=1&amp;catid=267&amp;pgno=4&amp;offset=72&amp;q=spell:dan brown">4</a><a href="/decksearchresults?frm=1&amp;catid=267&amp;pgno=5&amp;offset=96&amp;q=spell:dan brown">5</a><a href="/decksearchresults?frm=1&amp;catid=267&amp;pgno=6&amp;offset=120&amp;q=spell:dan brown">6</a><a href="/decksearchresults?frm=1&amp;catid=267&amp;pgno=7&amp;offset=144&amp;q=spell:dan brown">7</a><a href="/decksearchresults?frm=1&amp;catid=267&amp;pgno=8&amp;offset=168&amp;q=spell:dan brown">8</a></b><b class="pg-rp" id="PN_v4-0"><a href="/decksearchresults?frm=1&amp;catid=267&amp;pgno=2&amp;offset=24&amp;q=spell:dan brown" pagn="next" title="Next page"><u pagn="next">&nbsp;</u></a></b><input id="PSV_v4-0" type="hidden" value="1,8,5,1"></td><td width="25%">&nbsp;</td></tr></table></div></div></div><a name="bottomY" id="bottomY"></a><style>.btn-w i {visibility: hidden;background:white;border:0px;color:white;position:absolute;margin:0px 0 11px -1111px;}</style><script type="text/javascript">parent.document.getElementById('bkssrpthrobber').style.display="none";</script><script type="text/javascript">vjo.ctype('vjo.darwin.ebay.ap.books.TrackingVjo')
.props({
	//> public void trackFunc(String appId, int pgId)
	trackFunc:function(appId, pgId) {
	
		_rover.setAppId(appId);
		// Page Impression
		var pageImpEvent = pgId;
		var impEvt=_rover.createPageImpEvent(pageImpEvent);
		impEvt.setLVTrk(true);
		ebayLVTr.setRover(_rover);
		ebayLVTr.setPageImpEvent(pageImpEvent);
		//ebayLVTr.setActionSampling(100);
		//ebayLVTr.setEnableHeatMap();
		ebayLVTrClk._ebayLVTrackerClk_init_tracker();
	
	}
})
.endType();
vjo.ctype("vjo.darwin.comp.utils.EventUtils")
.needs("vjo.dsf.EventDispatcher",'ED')
.needs("vjo.darwin.comp.base.Base", "B")
.needs('vjo.Registry', 'R')
.props({ 

	reg : {},

	/**
	 * Adds the event to the html id and stored in the associative array with the key cmpId.
	 * If html id is body, then will not sotred in associative array.
	 * 
	 * @param {String} cmpId
	 * 		Component id associated with events
	 * 
	 * @return {Object} 
	 *      The added handler function or EventDispatcher itself if the handler 
	 *      is not a function
	 *       
	 * @see vjo.dsf.EventDispatcher
	 */
	//>public Object add(String, String, String, Object, Object)
	add : function(cmpId, id, eventType, handler, scope) {
		var rv = this.vj$.ED.add(id, eventType, handler, scope);
		//Should not register for body events 
		if(id != "body") {
			this.register(cmpId, id, eventType);
		}
		return rv;
	},
	
	/**
	 * Storing id and eventType in the associative array with the key cmpId
	 */
	//>public void register(String, String, String)
	register : function(cmpId, id, eventType) {
		if(!cmpId || !id) return;
		
		this.reg[cmpId] = this.reg[cmpId] || {};
		var htmlIds,
			handlers = this.reg[cmpId];
			
		if (!handlers[eventType]) {
			handlers[eventType] = [];
		}
		handlers[eventType].push(id);
	},
	
	/**
	 * Remove events that associated to the component id.
	 * If eventType is not specified, will remove for all the events for the component id.  
	 */
	//>public void unRegister(String)
	//>public void unRegister(String, String)
	unRegister : function(cmpId, eventType) {
		var evts = this.reg[cmpId];
		
		if(evts) {
			evts = (eventType) ? [evts[eventType]] : evts;
			for(var evtType in evts) {
				var htmlIds = evts[evtType];
				for(var idx in htmlIds) {
					this.vj$.ED.detachHandlers(htmlIds[idx], (eventType || evtType));
				}
					
			}
		}
	},
	
	//>public void callInit(Object,com.ebay.dsf.resource.html.event.handler.JsHandlerObjectEnum, String);
	callInit : function(elm,event,instanceId){
		var eType = (event) ? event.type : null;
		if (eType=="mouseover"){
			elm.onmouseover = null;
		} else if (eType=="focus"){
			elm.onfocus=null;
		}
		var obj = this.vj$.R.get(instanceId);
		if (obj) obj.init();
	},
	
	//>public void callOnLoad(java.util.List<String>)
	callOnLoad : function(jsInstanceIds){
		var t = this,
			f = function() {
					for(var i=0,l=jsInstanceIds.length;i<l;i++){
						var object = t.vj$.R.get(jsInstanceIds[i]);
						if (object && object.onLoad) object.onLoad(); // added null check
					}
				}
		if (t.vj$.B.bodyLoaded)	
			f();
		else
			t.add(null, "body", "load", f, t);
	}
})
.inits (
	function(){
		//remove all refrences on window unlaod
		vjo.dsf.EventDispatcher.addEventListener(window,'unload',function(){
			vjo.darwin.comp.utils.EventUtils.reg=null;
	});}
).endType();
vjo.ctype("vjo.darwin.comp.base.Base")
.needs("vjo.dsf.EventDispatcher",'ED')
.props({
	bodyLoaded:false//<public boolean
}).inits(function(){
	this.vj$.ED.add("body", "load", function(){if(!this.bodyLoaded) this.bodyLoaded=true;}, this);
}).endType();
vjo.ctype("vjo.darwin.comp.button.Button")
.needs("vjo.dsf.Element",'E')
.needs("vjo.dsf.Message",'M')
.needs("vjo.dsf.ServiceEngine",'S')
.needs("vjo.dsf.client.Browser")
.needs("vjo.dsf.EventDispatcher",'ED')
.needs('vjo.Registry')
.protos({
		
	m : null,//<com.ebay.darwin.comp.button.ButtonJsModel
	state : null,//<String
	dCls : null,//<String
	O : null,//<Object[]

	 //> public constructs(com.ebay.darwin.comp.button.ButtonJsModel)
	constructs:function(m)
	{ 
	  	var t=this;
	  	t.m = m;
	   	t.state='';
	   	//Sc -> Scope
	   	var Sc=m.scope;
	   	var secS = m.subScope;
	   	t.dCls = Sc+'-b '+secS+'-b';
	   	// 0 --> t.O of 1st element in the array i.e Span object , 1 --> t.O 2nd element in the array i.e Button object
	   	// entrue -> enable true and enfalse -- > enable false
 	   	t.Cls = [{'mouseup': [0, ''],'mousedown' : [0, 'p'],'mouseout': [0, ''],'mouseover':[0, 'o'],'focus':[1, 'o'],'blur':[1, ''],'entrue' : 'd','enfalse' : ''}];
		t.O = [];
	},
	
	onLoad : function () {
		var t = this,D = t.vj$.ED, O=t.get();
		t.enDis(t.m.dis);
		 /*
		 t.Cls is JSON object. Only one index. [0][0] = mouseup, [0][1]=mousedown, etc... 
		 t.Cls[0][0][0] = 0 and  O[t.Cls[0][0][0]]  ==  O[0] ==  Span object,  O[t.Cls[0][4][0]] == 1 == Button object.
		 */
		 for (var i in t.Cls[0]) {
		 	var V = O[t.Cls[0][i][0]];
		 	if (V) D.addEventListener(V, i ,t.handler(i), t);
		 }
	},
	handler : function (eT) {
		var t = this;
		return function () {
			t.changeState({'eventType':eT});
		};
	},
	//private void set();
	 get : function(){
	 var t=this,E=t.vj$.E, m=t.m;
	 if (t.O.length == 0){
		  t.O.push( E.get(m.SId), E.get(m.BId) ,  E.get(m.LId) );
	  }
	 return t.O;
	},
 //> public void changeState(com.ebay.dsf.resource.html.event.handler.JsHandlerObjectEnum)
 changeState : function(e) {
		var t=this,
		O = t.get(),
		eT = e.eventType;
		if ((O[1].disabled || O[0].className.indexOf('-bd') != -1) ||  (t.state=='mousedown' && eT=='focus')) 	return;
		
		t.state = eT;
		O[0].className =t.dCls + t.Cls[0][eT][1] + ' '+t.m.BT;			   
},
	 //> public void enable()
	enable : function () {
		this.enDis(false);
	},
	//> public void disable()
	disable : function () {
		this.enDis(true);
	},
	isDisabled : function() {
		return this.m.dis;
	},
	enDis :function (bool) {
		var t=this,
			N='none',
			E=t.vj$.E,
			m=t.m,
			
			O = t.get(), 
			b=O[1],
			bS = b.style,
			tS=(O[2]) ? O[2].style : "",
			B = vjo.dsf.client.Browser.bIE;

			O[0].className =t.dCls + t.Cls[0]['en'+bool]+ ' '+t.m.BT;
			t.m.dis = bool;
		//If not an anchor and its IE then disable - bug fix BUGDB00618938	 & BUGDB00618892
		if(m.tp !== 2)  b.disabled = bool;
		else b.display = (bool) ? N : "";
		
		//Not IE & Not anchor
		if(!B && m.tp != 2) return;
			
		if (bool) {
			tS.display="inline-block";
			if(!B){
				//tS.display="-moz-inline-box";
				b.style.setProperty("display", "none", "important");
			}
			bS.display=N;
		} else {
			tS.display=N;
			bS.display="";
		}
	}

})

.props ({
	 //> public static void enable(String)
	enable : function (ins) {
		var o = vjo.Registry.get(ins); 
		if (o) o.enable();
	},
	//> public void disable(String)
	disable : function (ins) {
		var o = vjo.Registry.get(ins); 
		if (o) o.disable();
	},
	
	//>public boolean onSubmit(String, com.ebay.dsf.resource.html.event.handler.JsHandlerObjectEnum)
	onSubmit : function (svcId, evt) {
		return this.sendMessage(svcId, evt);
	},
	
	sendMessage : function (svcId, evt) {
		var o=this.vj$, msg =new o.M(svcId);
		msg.event = evt;
		return o.S.handleRequest(msg);
	}
})
.endType();
vjo.ctype('vjo.darwin.ebay.ap.books.SearchResult')
.props({
	
	//> public void resizeIFrame(String frameId, int rows,int dimension)
	resizeIFrame:function(frameId, rows, dimension){		
		var toHeight = 170;
		try{
			var topY = document.getElementById('topY');
			var bottomY = document.getElementById('bottomY');		
			toHeight = (bottomY.offsetTop - topY.offsetTop);
			toHeight = 20 + toHeight;
		} catch (e) {
			//plan 2
			toHeight = (rows * dimension);
			if(frameId =='DeckFrame'){
				if(rows == 1) {
					toHeight = (toHeight + 100);
				}else if(rows > 10) {
					toHeight = toHeight + 110;
				}else{
					toHeight = toHeight + 105;
				}
			}else{
				if(rows > 10) {
					toHeight = toHeight + 110;
				} else {	
					toHeight = toHeight + 120;
				}
			}
		}		
		try {
			toHeight+= "px";
			parent.document.getElementById(frameId).height = toHeight;
			parent.document.getElementById(frameId).style.height = toHeight;
		} catch (e) {}
		this.hideLoadingDiv(frameId);
	},
	//> public void resizeIFrame(String frameId)
	resizeIFrame:function(frameId){
		var topY = document.getElementById('topY');
		var bottomY = document.getElementById('bottomY');		
		var toHeight = (bottomY.offsetTop - topY.offsetTop);
		toHeight = 20 + toHeight;
		try {
			toHeight+= "px";
			parent.document.getElementById(frameId).height = toHeight;
			parent.document.getElementById(frameId).style.height = toHeight;
		} catch (e) {
		}
		this.hideLoadingDiv(frameId);
	},
	//> private void hideLoadingDiv(String frameId)
	hideLoadingDiv : function(frameId) {
		this.setLoadingDiv(((frameId == 'DeckFrame') ? 'ldivDeckFrame' : 'ldivSrpFrame'),false);
	},
	//> public void unloadIFrame(String frameId,boolean fdisplay)
	setLoadingDiv : function(frameId, fdisplay) {
		try{
			parent.document.getElementById(frameId).style.display = fdisplay ? 'block' : 'none';			
		} catch (e) {}
	}
	
})
.endType();




</script><script type="text/javascript">(function () {
var _r = vjo.Registry;
function $o0(){return new vjo.darwin.comp.button.Button({FName:null,BT:"psb-S",subScope:"psb",scope:"btn",LId:"txt_bin",svcId:"BTN_SBMT_SRV_bin",tp:2,BId:"but_bin",dis:false,SId:"spn_bin"});};_r.put('Js-bin',$o0()); _r.put('Js-bin',$o0()); _r.put('Js-bin',$o0()); _r.put('Js-bin',$o0()); _r.put('Js-bin',$o0()); _r.put('Js-bin',$o0()); _r.put('Js-bin',$o0()); _r.put('Js-bin',$o0()); _r.put('Js-bin',$o0()); _r.put('9',new vjo.dsf.utils.SiteSpeed()); 
_r.put('10',new vjo.darwin.comp.base.Base()); })();
(function(){
var _d=vjo.dsf.EventDispatcher;
var _r=vjo.Registry;
function $1(){return function(event){return this.onSubmit("BTN_SBMT_SRV_bin",event);};};_d.add('but_bin','click',$1(),vjo.darwin.comp.button.Button);_d.add('but_bin','click',$1(),vjo.darwin.comp.button.Button);_d.add('but_bin','click',$1(),vjo.darwin.comp.button.Button);_d.add('but_bin','click',$1(),vjo.darwin.comp.button.Button);_d.add('but_bin','click',$1(),vjo.darwin.comp.button.Button);_d.add('but_bin','click',$1(),vjo.darwin.comp.button.Button);_d.add('but_bin','click',$1(),vjo.darwin.comp.button.Button);_d.add('but_bin','click',$1(),vjo.darwin.comp.button.Button);_d.add('but_bin','click',$1(),vjo.darwin.comp.button.Button);_d.add('body','load',function(event) { this.resizeIFrame("DeckFrame", 24, 153); },vjo.darwin.ebay.ap.books.SearchResult);
_d.add('body','load',function(event){ vjo.darwin.ebay.ap.books.TrackingVjo.trackFunc("1159", 2046782) });_d.add('body','load',function(event) { this.callOnLoad(["Js-bin"]); },vjo.darwin.comp.utils.EventUtils);})();
(function(){
var _s=vjo.dsf.ServiceEngine, $se=_s.register;var _r=vjo.Registry;

$se(4,'BTN_SBMT_SRV_bin',function (message) {_r.get('Js-bin').disable(); });
})();
</script><script type="text/javascript">// @JsDoNotOptimize
// @JsMinimize
// @JsDoNotLintValidate
// @Package vjo.dsf
vjo.ctype("vjo.dsf.FirePageLoad").endType();
if(typeof(oGaugeInfo)!="undefined"){
	//Keeping VJO onload start time in oGaugeInfo object.
	oGaugeInfo.iLoadST = (new Date()).getTime();
}
vjo.dsf.EventDispatcher.load(document.body);
</script></body></html><!--RcmdId decksearchresults,RlogId p4jkdhlnudlwc%3D9u%7E*ts67.1%606gd%3E5-13baed62cf8-->